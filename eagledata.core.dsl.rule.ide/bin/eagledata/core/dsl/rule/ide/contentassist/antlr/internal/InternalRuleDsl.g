/*
 * generated by Xtext 2.9.2
 */
grammar InternalRuleDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package eagledata.core.dsl.rule.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package eagledata.core.dsl.rule.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import eagledata.core.dsl.rule.services.RuleDslGrammarAccess;

}
@parser::members {
	private RuleDslGrammarAccess grammarAccess;

	public void setGrammarAccess(RuleDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRuleModel
entryRuleRuleModel
:
{ before(grammarAccess.getRuleModelRule()); }
	 ruleRuleModel
{ after(grammarAccess.getRuleModelRule()); } 
	 EOF 
;

// Rule RuleModel
ruleRuleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleModelAccess().getGroup()); }
		(rule__RuleModel__Group__0)?
		{ after(grammarAccess.getRuleModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleElement
entryRuleRuleElement
:
{ before(grammarAccess.getRuleElementRule()); }
	 ruleRuleElement
{ after(grammarAccess.getRuleElementRule()); } 
	 EOF 
;

// Rule RuleElement
ruleRuleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleElementAccess().getAlternatives()); }
		(rule__RuleElement__Alternatives)
		{ after(grammarAccess.getRuleElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuery
entryRuleQuery
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQueryAccess().getGroup()); }
		(rule__Query__Group__0)
		{ after(grammarAccess.getQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelect
entryRuleSelect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getAlternatives()); }
		(rule__Select__Alternatives)
		{ after(grammarAccess.getSelectAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetSelect
entryRuleSetSelect
:
{ before(grammarAccess.getSetSelectRule()); }
	 ruleSetSelect
{ after(grammarAccess.getSetSelectRule()); } 
	 EOF 
;

// Rule SetSelect
ruleSetSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetSelectAccess().getGroup()); }
		(rule__SetSelect__Group__0)
		{ after(grammarAccess.getSetSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelection
entryRuleSelection
:
{ before(grammarAccess.getSelectionRule()); }
	 ruleSelection
{ after(grammarAccess.getSelectionRule()); } 
	 EOF 
;

// Rule Selection
ruleSelection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectionAccess().getGroup()); }
		(rule__Selection__Group__0)
		{ after(grammarAccess.getSelectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddingSelect
entryRuleAddingSelect
:
{ before(grammarAccess.getAddingSelectRule()); }
	 ruleAddingSelect
{ after(grammarAccess.getAddingSelectRule()); } 
	 EOF 
;

// Rule AddingSelect
ruleAddingSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddingSelectAccess().getGroup()); }
		(rule__AddingSelect__Group__0)
		{ after(grammarAccess.getAddingSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhere
entryRuleWhere
:
{ before(grammarAccess.getWhereRule()); }
	 ruleWhere
{ after(grammarAccess.getWhereRule()); } 
	 EOF 
;

// Rule Where
ruleWhere 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhereAccess().getGroup()); }
		(rule__Where__Group__0)
		{ after(grammarAccess.getWhereAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhen
entryRuleWhen
:
{ before(grammarAccess.getWhenRule()); }
	 ruleWhen
{ after(grammarAccess.getWhenRule()); } 
	 EOF 
;

// Rule When
ruleWhen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhenAccess().getGroup()); }
		(rule__When__Group__0)
		{ after(grammarAccess.getWhenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlainExpression
entryRulePlainExpression
:
{ before(grammarAccess.getPlainExpressionRule()); }
	 rulePlainExpression
{ after(grammarAccess.getPlainExpressionRule()); } 
	 EOF 
;

// Rule PlainExpression
rulePlainExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlainExpressionAccess().getPlainOperandAssignment()); }
		(rule__PlainExpression__PlainOperandAssignment)
		{ after(grammarAccess.getPlainExpressionAccess().getPlainOperandAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComplexExpression
entryRuleComplexExpression
:
{ before(grammarAccess.getComplexExpressionRule()); }
	 ruleComplexExpression
{ after(grammarAccess.getComplexExpressionRule()); } 
	 EOF 
;

// Rule ComplexExpression
ruleComplexExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComplexExpressionAccess().getGroup()); }
		(rule__ComplexExpression__Group__0)
		{ after(grammarAccess.getComplexExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlainOperand
entryRulePlainOperand
:
{ before(grammarAccess.getPlainOperandRule()); }
	 rulePlainOperand
{ after(grammarAccess.getPlainOperandRule()); } 
	 EOF 
;

// Rule PlainOperand
rulePlainOperand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlainOperandAccess().getAlternatives()); }
		(rule__PlainOperand__Alternatives)
		{ after(grammarAccess.getPlainOperandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumeral
entryRuleNumeral
:
{ before(grammarAccess.getNumeralRule()); }
	 ruleNumeral
{ after(grammarAccess.getNumeralRule()); } 
	 EOF 
;

// Rule Numeral
ruleNumeral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumeralAccess().getValueAssignment()); }
		(rule__Numeral__ValueAssignment)
		{ after(grammarAccess.getNumeralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQueryOperand
entryRuleQueryOperand
:
{ before(grammarAccess.getQueryOperandRule()); }
	 ruleQueryOperand
{ after(grammarAccess.getQueryOperandRule()); } 
	 EOF 
;

// Rule QueryOperand
ruleQueryOperand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQueryOperandAccess().getQueryAssignment()); }
		(rule__QueryOperand__QueryAssignment)
		{ after(grammarAccess.getQueryOperandAccess().getQueryAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComplexOperand
entryRuleComplexOperand
:
{ before(grammarAccess.getComplexOperandRule()); }
	 ruleComplexOperand
{ after(grammarAccess.getComplexOperandRule()); } 
	 EOF 
;

// Rule ComplexOperand
ruleComplexOperand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComplexOperandAccess().getGroup()); }
		(rule__ComplexOperand__Group__0)
		{ after(grammarAccess.getComplexOperandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleElementAccess().getQueryParserRuleCall_0()); }
		ruleQuery
		{ after(grammarAccess.getRuleElementAccess().getQueryParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleElementAccess().getRuleParserRuleCall_1()); }
		ruleRule
		{ after(grammarAccess.getRuleElementAccess().getRuleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getAddingSelectParserRuleCall_0()); }
		ruleAddingSelect
		{ after(grammarAccess.getSelectAccess().getAddingSelectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSelectAccess().getSetSelectParserRuleCall_1()); }
		ruleSetSelect
		{ after(grammarAccess.getSelectAccess().getSetSelectParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetSelectAccess().getGroup_2_0()); }
		(rule__SetSelect__Group_2_0__0)?
		{ after(grammarAccess.getSetSelectAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetSelectAccess().getAllAssignment_2_1()); }
		(rule__SetSelect__AllAssignment_2_1)
		{ after(grammarAccess.getSetSelectAccess().getAllAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddingSelect__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddingSelectAccess().getElementAssignment_1_0()); }
		(rule__AddingSelect__ElementAssignment_1_0)?
		{ after(grammarAccess.getAddingSelectAccess().getElementAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddingSelectAccess().getAllAssignment_1_1()); }
		(rule__AddingSelect__AllAssignment_1_1)
		{ after(grammarAccess.getAddingSelectAccess().getAllAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereAccess().getRightVariableAssignment_3_0()); }
		(rule__Where__RightVariableAssignment_3_0)
		{ after(grammarAccess.getWhereAccess().getRightVariableAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getWhereAccess().getRightAssignment_3_1()); }
		(rule__Where__RightAssignment_3_1)
		{ after(grammarAccess.getWhereAccess().getRightAssignment_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getPlainExpressionParserRuleCall_0()); }
		rulePlainExpression
		{ after(grammarAccess.getExpressionAccess().getPlainExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getComplexExpressionParserRuleCall_1()); }
		ruleComplexExpression
		{ after(grammarAccess.getExpressionAccess().getComplexExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlainOperand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlainOperandAccess().getNumeralParserRuleCall_0()); }
		ruleNumeral
		{ after(grammarAccess.getPlainOperandAccess().getNumeralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlainOperandAccess().getQueryOperandParserRuleCall_1()); }
		ruleQueryOperand
		{ after(grammarAccess.getPlainOperandAccess().getQueryOperandParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleModel__Group__0__Impl
	rule__RuleModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleModelAccess().getElementsAssignment_0()); }
	(rule__RuleModel__ElementsAssignment_0)
	{ after(grammarAccess.getRuleModelAccess().getElementsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleModelAccess().getElementsAssignment_1()); }
	(rule__RuleModel__ElementsAssignment_1)*
	{ after(grammarAccess.getRuleModelAccess().getElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
	'rule'
	{ after(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getNameAssignment_1()); }
	(rule__Rule__NameAssignment_1)
	{ after(grammarAccess.getRuleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getRuleAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getRuleAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getOnKeyword_4()); }
	'on'
	{ after(grammarAccess.getRuleAccess().getOnKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__5__Impl
	rule__Rule__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getEventAssignment_5()); }
	(rule__Rule__EventAssignment_5)
	{ after(grammarAccess.getRuleAccess().getEventAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__6__Impl
	rule__Rule__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getGroup_6()); }
	(rule__Rule__Group_6__0)?
	{ after(grammarAccess.getRuleAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__7__Impl
	rule__Rule__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getDoKeyword_7()); }
	'do'
	{ after(grammarAccess.getRuleAccess().getDoKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__8__Impl
	rule__Rule__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getGroup_8()); }
	(rule__Rule__Group_8__0)
	{ after(grammarAccess.getRuleAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRightParenthesisKeyword_9()); }
	')'
	{ after(grammarAccess.getRuleAccess().getRightParenthesisKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_6__0__Impl
	rule__Rule__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_6_0()); }
	'{'
	{ after(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_6__1__Impl
	rule__Rule__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConditionAssignment_6_1()); }
	(rule__Rule__ConditionAssignment_6_1)?
	{ after(grammarAccess.getRuleAccess().getConditionAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_6_2()); }
	'}'
	{ after(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_8__0__Impl
	rule__Rule__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getActionsAssignment_8_0()); }
	(rule__Rule__ActionsAssignment_8_0)
	{ after(grammarAccess.getRuleAccess().getActionsAssignment_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getGroup_8_1()); }
	(rule__Rule__Group_8_1__0)*
	{ after(grammarAccess.getRuleAccess().getGroup_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_8_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_8_1__0__Impl
	rule__Rule__Group_8_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_8_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getCommaKeyword_8_1_0()); }
	','
	{ after(grammarAccess.getRuleAccess().getCommaKeyword_8_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_8_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_8_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_8_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getActionsAssignment_8_1_1()); }
	(rule__Rule__ActionsAssignment_8_1_1)
	{ after(grammarAccess.getRuleAccess().getActionsAssignment_8_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__0__Impl
	rule__Query__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getNameAssignment_0()); }
	(rule__Query__NameAssignment_0)
	{ after(grammarAccess.getQueryAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__1__Impl
	rule__Query__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getQueryAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__2__Impl
	rule__Query__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getSelectAssignment_2()); }
	(rule__Query__SelectAssignment_2)
	{ after(grammarAccess.getQueryAccess().getSelectAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getGroup_3()); }
	(rule__Query__Group_3__0)?
	{ after(grammarAccess.getQueryAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group_3__0__Impl
	rule__Query__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getLeftCurlyBracketKeyword_3_0()); }
	'{'
	{ after(grammarAccess.getQueryAccess().getLeftCurlyBracketKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group_3__1__Impl
	rule__Query__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getWhereAssignment_3_1()); }
	(rule__Query__WhereAssignment_3_1)
	{ after(grammarAccess.getQueryAccess().getWhereAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getRightCurlyBracketKeyword_3_2()); }
	'}'
	{ after(grammarAccess.getQueryAccess().getRightCurlyBracketKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetSelect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSelect__Group__0__Impl
	rule__SetSelect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSelectAccess().getSetSelectAction_0()); }
	()
	{ after(grammarAccess.getSetSelectAccess().getSetSelectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSelect__Group__1__Impl
	rule__SetSelect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSelectAccess().getSelectKeyword_1()); }
	'select'
	{ after(grammarAccess.getSetSelectAccess().getSelectKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSelect__Group__2__Impl
	rule__SetSelect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSelectAccess().getAlternatives_2()); }
	(rule__SetSelect__Alternatives_2)
	{ after(grammarAccess.getSetSelectAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSelect__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSelectAccess().getGroup_3()); }
	(rule__SetSelect__Group_3__0)?
	{ after(grammarAccess.getSetSelectAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetSelect__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSelect__Group_2_0__0__Impl
	rule__SetSelect__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSelectAccess().getSelectionAssignment_2_0_0()); }
	(rule__SetSelect__SelectionAssignment_2_0_0)
	{ after(grammarAccess.getSetSelectAccess().getSelectionAssignment_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSelect__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSelectAccess().getGroup_2_0_1()); }
	(rule__SetSelect__Group_2_0_1__0)*
	{ after(grammarAccess.getSetSelectAccess().getGroup_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetSelect__Group_2_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSelect__Group_2_0_1__0__Impl
	rule__SetSelect__Group_2_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group_2_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSelectAccess().getCommaKeyword_2_0_1_0()); }
	','
	{ after(grammarAccess.getSetSelectAccess().getCommaKeyword_2_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group_2_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSelect__Group_2_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group_2_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSelectAccess().getSelectionAssignment_2_0_1_1()); }
	(rule__SetSelect__SelectionAssignment_2_0_1_1)
	{ after(grammarAccess.getSetSelectAccess().getSelectionAssignment_2_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetSelect__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSelect__Group_3__0__Impl
	rule__SetSelect__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSelectAccess().getOperatorAssignment_3_0()); }
	(rule__SetSelect__OperatorAssignment_3_0)
	{ after(grammarAccess.getSetSelectAccess().getOperatorAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSelect__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSelectAccess().getSelectAssignment_3_1()); }
	(rule__SetSelect__SelectAssignment_3_1)
	{ after(grammarAccess.getSetSelectAccess().getSelectAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selection__Group__0__Impl
	rule__Selection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionAccess().getGroup_0()); }
	(rule__Selection__Group_0__0)?
	{ after(grammarAccess.getSelectionAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selection__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionAccess().getGroup_1()); }
	(rule__Selection__Group_1__0)
	{ after(grammarAccess.getSelectionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selection__Group_0__0__Impl
	rule__Selection__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionAccess().getSelectorAssignment_0_0()); }
	(rule__Selection__SelectorAssignment_0_0)
	{ after(grammarAccess.getSelectionAccess().getSelectorAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selection__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionAccess().getFullStopKeyword_0_1()); }
	'.'
	{ after(grammarAccess.getSelectionAccess().getFullStopKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selection__Group_1__0__Impl
	rule__Selection__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionAccess().getRootAssignment_1_0()); }
	(rule__Selection__RootAssignment_1_0)
	{ after(grammarAccess.getSelectionAccess().getRootAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selection__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionAccess().getGroup_1_1()); }
	(rule__Selection__Group_1_1__0)*
	{ after(grammarAccess.getSelectionAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selection__Group_1_1__0__Impl
	rule__Selection__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionAccess().getFullStopKeyword_1_1_0()); }
	'.'
	{ after(grammarAccess.getSelectionAccess().getFullStopKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selection__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionAccess().getRootAssignment_1_1_1()); }
	(rule__Selection__RootAssignment_1_1_1)
	{ after(grammarAccess.getSelectionAccess().getRootAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddingSelect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddingSelect__Group__0__Impl
	rule__AddingSelect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddingSelect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddingSelectAccess().getOperationAssignment_0()); }
	(rule__AddingSelect__OperationAssignment_0)
	{ after(grammarAccess.getAddingSelectAccess().getOperationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddingSelect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddingSelect__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddingSelect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddingSelectAccess().getAlternatives_1()); }
	(rule__AddingSelect__Alternatives_1)
	{ after(grammarAccess.getAddingSelectAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__0__Impl
	rule__Where__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getWhereKeyword_0()); }
	'where'
	{ after(grammarAccess.getWhereAccess().getWhereKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__1__Impl
	rule__Where__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getLeftAssignment_1()); }
	(rule__Where__LeftAssignment_1)
	{ after(grammarAccess.getWhereAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__2__Impl
	rule__Where__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getLogicalOperatorAssignment_2()); }
	(rule__Where__LogicalOperatorAssignment_2)
	{ after(grammarAccess.getWhereAccess().getLogicalOperatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getAlternatives_3()); }
	(rule__Where__Alternatives_3)
	{ after(grammarAccess.getWhereAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__When__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__0__Impl
	rule__When__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getWhenKeyword_0()); }
	'when'
	{ after(grammarAccess.getWhenAccess().getWhenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__1__Impl
	rule__When__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getLeftAssignment_1()); }
	(rule__When__LeftAssignment_1)
	{ after(grammarAccess.getWhenAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__2__Impl
	rule__When__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getLogicalOperatorAssignment_2()); }
	(rule__When__LogicalOperatorAssignment_2)
	{ after(grammarAccess.getWhenAccess().getLogicalOperatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getRightAssignment_3()); }
	(rule__When__RightAssignment_3)
	{ after(grammarAccess.getWhenAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexExpression__Group__0__Impl
	rule__ComplexExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getComplexExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexExpression__Group__1__Impl
	rule__ComplexExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexExpressionAccess().getPlainOperandAssignment_1()); }
	(rule__ComplexExpression__PlainOperandAssignment_1)
	{ after(grammarAccess.getComplexExpressionAccess().getPlainOperandAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexExpression__Group__2__Impl
	rule__ComplexExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexExpressionAccess().getGroup_2()); }
	(rule__ComplexExpression__Group_2__0)?
	{ after(grammarAccess.getComplexExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getComplexExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexExpression__Group_2__0__Impl
	rule__ComplexExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexExpressionAccess().getComplexOperandsAssignment_2_0()); }
	(rule__ComplexExpression__ComplexOperandsAssignment_2_0)
	{ after(grammarAccess.getComplexExpressionAccess().getComplexOperandsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexExpressionAccess().getComplexOperandsAssignment_2_1()); }
	(rule__ComplexExpression__ComplexOperandsAssignment_2_1)*
	{ after(grammarAccess.getComplexExpressionAccess().getComplexOperandsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexOperand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexOperand__Group__0__Impl
	rule__ComplexOperand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexOperand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexOperandAccess().getOperatorAssignment_0()); }
	(rule__ComplexOperand__OperatorAssignment_0)
	{ after(grammarAccess.getComplexOperandAccess().getOperatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexOperand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexOperand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexOperand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexOperandAccess().getExpressionAssignment_1()); }
	(rule__ComplexOperand__ExpressionAssignment_1)
	{ after(grammarAccess.getComplexOperandAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleModel__ElementsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleModelAccess().getElementsRuleElementParserRuleCall_0_0()); }
		ruleRuleElement
		{ after(grammarAccess.getRuleModelAccess().getElementsRuleElementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleModel__ElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleModelAccess().getElementsRuleElementParserRuleCall_1_0()); }
		ruleRuleElement
		{ after(grammarAccess.getRuleModelAccess().getElementsRuleElementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__EventAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getEventPhraseCrossReference_5_0()); }
		(
			{ before(grammarAccess.getRuleAccess().getEventPhraseIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRuleAccess().getEventPhraseIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getRuleAccess().getEventPhraseCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConditionWhenParserRuleCall_6_1_0()); }
		ruleWhen
		{ after(grammarAccess.getRuleAccess().getConditionWhenParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ActionsAssignment_8_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getActionsQueryParserRuleCall_8_0_0()); }
		ruleQuery
		{ after(grammarAccess.getRuleAccess().getActionsQueryParserRuleCall_8_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ActionsAssignment_8_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getActionsQueryParserRuleCall_8_1_1_0()); }
		ruleQuery
		{ after(grammarAccess.getRuleAccess().getActionsQueryParserRuleCall_8_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getQueryAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__SelectAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getSelectSelectParserRuleCall_2_0()); }
		ruleSelect
		{ after(grammarAccess.getQueryAccess().getSelectSelectParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__WhereAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getWhereWhereParserRuleCall_3_1_0()); }
		ruleWhere
		{ after(grammarAccess.getQueryAccess().getWhereWhereParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__SelectionAssignment_2_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetSelectAccess().getSelectionSelectionParserRuleCall_2_0_0_0()); }
		ruleSelection
		{ after(grammarAccess.getSetSelectAccess().getSelectionSelectionParserRuleCall_2_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__SelectionAssignment_2_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetSelectAccess().getSelectionSelectionParserRuleCall_2_0_1_1_0()); }
		ruleSelection
		{ after(grammarAccess.getSetSelectAccess().getSelectionSelectionParserRuleCall_2_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__AllAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetSelectAccess().getAllAsteriskKeyword_2_1_0()); }
		(
			{ before(grammarAccess.getSetSelectAccess().getAllAsteriskKeyword_2_1_0()); }
			'*'
			{ after(grammarAccess.getSetSelectAccess().getAllAsteriskKeyword_2_1_0()); }
		)
		{ after(grammarAccess.getSetSelectAccess().getAllAsteriskKeyword_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__OperatorAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetSelectAccess().getOperatorSETOPERATORTerminalRuleCall_3_0_0()); }
		RULE_SETOPERATOR
		{ after(grammarAccess.getSetSelectAccess().getOperatorSETOPERATORTerminalRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSelect__SelectAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetSelectAccess().getSelectSetSelectParserRuleCall_3_1_0()); }
		ruleSetSelect
		{ after(grammarAccess.getSetSelectAccess().getSelectSetSelectParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__SelectorAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectionAccess().getSelectorConceptCrossReference_0_0_0()); }
		(
			{ before(grammarAccess.getSelectionAccess().getSelectorConceptIDTerminalRuleCall_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSelectionAccess().getSelectorConceptIDTerminalRuleCall_0_0_0_1()); }
		)
		{ after(grammarAccess.getSelectionAccess().getSelectorConceptCrossReference_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__RootAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectionAccess().getRootConceptCrossReference_1_0_0()); }
		(
			{ before(grammarAccess.getSelectionAccess().getRootConceptIDTerminalRuleCall_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSelectionAccess().getRootConceptIDTerminalRuleCall_1_0_0_1()); }
		)
		{ after(grammarAccess.getSelectionAccess().getRootConceptCrossReference_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__RootAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectionAccess().getRootConceptCrossReference_1_1_1_0()); }
		(
			{ before(grammarAccess.getSelectionAccess().getRootConceptIDTerminalRuleCall_1_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSelectionAccess().getRootConceptIDTerminalRuleCall_1_1_1_0_1()); }
		)
		{ after(grammarAccess.getSelectionAccess().getRootConceptCrossReference_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddingSelect__OperationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddingSelectAccess().getOperationSELECTOPERATORTerminalRuleCall_0_0()); }
		RULE_SELECTOPERATOR
		{ after(grammarAccess.getAddingSelectAccess().getOperationSELECTOPERATORTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddingSelect__ElementAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddingSelectAccess().getElementConceptCrossReference_1_0_0()); }
		(
			{ before(grammarAccess.getAddingSelectAccess().getElementConceptIDTerminalRuleCall_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAddingSelectAccess().getElementConceptIDTerminalRuleCall_1_0_0_1()); }
		)
		{ after(grammarAccess.getAddingSelectAccess().getElementConceptCrossReference_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddingSelect__AllAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddingSelectAccess().getAllAsteriskKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getAddingSelectAccess().getAllAsteriskKeyword_1_1_0()); }
			'*'
			{ after(grammarAccess.getAddingSelectAccess().getAllAsteriskKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getAddingSelectAccess().getAllAsteriskKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereAccess().getLeftConceptCrossReference_1_0()); }
		(
			{ before(grammarAccess.getWhereAccess().getLeftConceptIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getWhereAccess().getLeftConceptIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getWhereAccess().getLeftConceptCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__LogicalOperatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereAccess().getLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0()); }
		RULE_LOGICALOPERATOR
		{ after(grammarAccess.getWhereAccess().getLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__RightVariableAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereAccess().getRightVariableConceptCrossReference_3_0_0()); }
		(
			{ before(grammarAccess.getWhereAccess().getRightVariableConceptIDTerminalRuleCall_3_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getWhereAccess().getRightVariableConceptIDTerminalRuleCall_3_0_0_1()); }
		)
		{ after(grammarAccess.getWhereAccess().getRightVariableConceptCrossReference_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__RightAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereAccess().getRightINTTerminalRuleCall_3_1_0()); }
		RULE_INT
		{ after(grammarAccess.getWhereAccess().getRightINTTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getLeftExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhenAccess().getLeftExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__LogicalOperatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0()); }
		RULE_LOGICALOPERATOR
		{ after(grammarAccess.getWhenAccess().getLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getWhenAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlainExpression__PlainOperandAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlainExpressionAccess().getPlainOperandPlainOperandParserRuleCall_0()); }
		rulePlainOperand
		{ after(grammarAccess.getPlainExpressionAccess().getPlainOperandPlainOperandParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__PlainOperandAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexExpressionAccess().getPlainOperandPlainOperandParserRuleCall_1_0()); }
		rulePlainOperand
		{ after(grammarAccess.getComplexExpressionAccess().getPlainOperandPlainOperandParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__ComplexOperandsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexExpressionAccess().getComplexOperandsComplexOperandParserRuleCall_2_0_0()); }
		ruleComplexOperand
		{ after(grammarAccess.getComplexExpressionAccess().getComplexOperandsComplexOperandParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexExpression__ComplexOperandsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexExpressionAccess().getComplexOperandsComplexOperandParserRuleCall_2_1_0()); }
		ruleComplexOperand
		{ after(grammarAccess.getComplexExpressionAccess().getComplexOperandsComplexOperandParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumeralAccess().getValueDOUBLETerminalRuleCall_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getNumeralAccess().getValueDOUBLETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryOperand__QueryAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryOperandAccess().getQueryQueryCrossReference_0()); }
		(
			{ before(grammarAccess.getQueryOperandAccess().getQueryQueryIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getQueryOperandAccess().getQueryQueryIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getQueryOperandAccess().getQueryQueryCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexOperand__OperatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexOperandAccess().getOperatorOPERATORTerminalRuleCall_0_0()); }
		RULE_OPERATOR
		{ after(grammarAccess.getComplexOperandAccess().getOperatorOPERATORTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexOperand__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexOperandAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getComplexOperandAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_OPERATOR : ('+'|'-'|'*'|'DIV');

RULE_LOGICALOPERATOR : ('>'|'<'|'>='|'<='|'=');

RULE_SELECTOPERATOR : ('COUNT'|'MIN'|'MAX');

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_SETOPERATOR : ('UNION'|'EXCEPT'|'INTERSECT');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
