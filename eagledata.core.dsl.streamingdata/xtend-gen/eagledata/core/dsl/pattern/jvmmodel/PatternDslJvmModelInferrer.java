/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.pattern.jvmmodel;

import com.google.inject.Inject;
import eagledata.core.dsl.pattern.streamingDsl.Feature;
import eagledata.core.dsl.pattern.streamingDsl.Operation;
import eagledata.core.dsl.pattern.streamingDsl.Phrase;
import eagledata.core.dsl.pattern.streamingDsl.StreamingModel;
import eagledata.core.dsl.pattern.streamingDsl.TermKey;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmAnnotationType;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class PatternDslJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the closure you pass to the returned
   *            {@link IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
   *            initializeLater(..)}.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final StreamingModel model, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final TreeIterator<EObject> iterator = model.eAllContents();
    while (iterator.hasNext()) {
      {
        final EObject object = iterator.next();
        if ((object instanceof Phrase)) {
          QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(object);
          JvmGenericType _class = this._jvmTypesBuilder.toClass(object, _fullyQualifiedName);
          final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
            String _documentation = this._jvmTypesBuilder.getDocumentation(object);
            this._jvmTypesBuilder.setDocumentation(it, _documentation);
            this.addConstructors(it, ((Phrase)object));
            EList<Feature> _features = ((Phrase)object).getFeatures();
            for (final Feature feature : _features) {
              boolean _matched = false;
              if (!_matched) {
                if (feature instanceof TermKey) {
                  _matched=true;
                  this.addDelegateFeature(it, ((TermKey)feature));
                }
              }
              if (!_matched) {
                if (feature instanceof Operation) {
                  _matched=true;
                  this.addMethod(it, ((Operation)feature));
                }
              }
            }
          };
          acceptor.<JvmGenericType>accept(_class, _function);
        }
      }
    }
  }
  
  protected boolean addConstructors(final JvmDeclaredType inferredType, final Phrase phrase) {
    boolean _xblockexpression = false;
    {
      final JvmTypeReference typeRefMessageSet = this._typeReferenceBuilder.typeRef(Object.class);
      EList<JvmMember> _members = inferredType.getMembers();
      JvmAnnotationType _annotationType = this._jvmTypesBuilder.toAnnotationType(phrase, "MessageSet");
      this._jvmTypesBuilder.<JvmAnnotationType>operator_add(_members, _annotationType);
      EList<JvmMember> _members_1 = inferredType.getMembers();
      final Procedure1<JvmConstructor> _function = (JvmConstructor it) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("Creates a new ");
        String _name = phrase.getName();
        _builder.append(_name, "");
        _builder.append(".");
        this._jvmTypesBuilder.setDocumentation(it, _builder.toString());
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("super();");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(phrase, _function);
      _xblockexpression = this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_1, _constructor);
    }
    return _xblockexpression;
  }
  
  protected boolean addDelegateFeature(final JvmDeclaredType inferredType, final TermKey feature) {
    boolean _xblockexpression = false;
    {
      EList<JvmMember> _members = inferredType.getMembers();
      String _name = feature.getName();
      JvmTypeReference _type = feature.getType();
      JvmField _field = this._jvmTypesBuilder.toField(feature, _name, _type);
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      EList<JvmMember> _members_1 = inferredType.getMembers();
      String _name_1 = feature.getName();
      String _firstUpper = StringExtensions.toFirstUpper(_name_1);
      String _plus = ("get" + _firstUpper);
      JvmTypeReference _type_1 = feature.getType();
      final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
        String _documentation = this._jvmTypesBuilder.getDocumentation(feature);
        this._jvmTypesBuilder.setDocumentation(it, _documentation);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return this.");
            String _name = feature.getName();
            _builder.append(_name, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        };
        this._jvmTypesBuilder.setBody(it, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(feature, _plus, _type_1, _function);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
      EList<JvmMember> _members_2 = inferredType.getMembers();
      String _name_2 = feature.getName();
      String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
      String _plus_1 = ("set" + _firstUpper_1);
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Void.TYPE);
      final Procedure1<JvmOperation> _function_1 = (JvmOperation it) -> {
        String _documentation = this._jvmTypesBuilder.getDocumentation(feature);
        this._jvmTypesBuilder.setDocumentation(it, _documentation);
        EList<JvmFormalParameter> _parameters = it.getParameters();
        String _name_3 = feature.getName();
        JvmTypeReference _type_2 = feature.getType();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(feature, _name_3, _type_2);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("this.");
            String _name = feature.getName();
            _builder.append(_name, "");
            _builder.append(" = ");
            String _name_1 = feature.getName();
            _builder.append(_name_1, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        };
        this._jvmTypesBuilder.setBody(it, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(feature, _plus_1, _typeRef, _function_1);
      _xblockexpression = this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_1);
    }
    return _xblockexpression;
  }
  
  protected boolean addMethod(final JvmDeclaredType inferredType, final Operation operation) {
    EList<JvmMember> _members = inferredType.getMembers();
    String _name = operation.getName();
    JvmTypeReference _returnType = operation.getReturnType();
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      String _documentation = this._jvmTypesBuilder.getDocumentation(operation);
      this._jvmTypesBuilder.setDocumentation(it, _documentation);
      EList<JvmFormalParameter> _parameters = it.getParameters();
      EList<JvmFormalParameter> _parameters_1 = operation.getParameters();
      final Function1<JvmFormalParameter, JvmFormalParameter> _function_1 = (JvmFormalParameter it_1) -> {
        String _name_1 = it_1.getName();
        JvmTypeReference _parameterType = it_1.getParameterType();
        return this._jvmTypesBuilder.toParameter(operation, _name_1, _parameterType);
      };
      List<JvmFormalParameter> _map = ListExtensions.<JvmFormalParameter, JvmFormalParameter>map(_parameters_1, _function_1);
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _map);
      XExpression _body = operation.getBody();
      this._jvmTypesBuilder.setBody(it, _body);
    };
    JvmOperation _method = this._jvmTypesBuilder.toMethod(operation, _name, _returnType, _function);
    return this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
  }
  
  public void infer(final EObject model, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (model instanceof StreamingModel) {
      _infer((StreamingModel)model, acceptor, isPreIndexingPhase);
      return;
    } else if (model != null) {
      _infer(model, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(model, acceptor, isPreIndexingPhase).toString());
    }
  }
}
