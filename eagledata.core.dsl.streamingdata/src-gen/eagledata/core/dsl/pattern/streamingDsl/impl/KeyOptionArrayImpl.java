/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.pattern.streamingDsl.impl;

import eagledata.core.dsl.pattern.streamingDsl.KeyOptionArray;
import eagledata.core.dsl.pattern.streamingDsl.StreamingDslPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Key Option Array</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eagledata.core.dsl.pattern.streamingDsl.impl.KeyOptionArrayImpl#getMinElement <em>Min Element</em>}</li>
 *   <li>{@link eagledata.core.dsl.pattern.streamingDsl.impl.KeyOptionArrayImpl#getMaxElement <em>Max Element</em>}</li>
 * </ul>
 *
 * @generated
 */
public class KeyOptionArrayImpl extends KeyOptionImpl implements KeyOptionArray
{
  /**
   * The default value of the '{@link #getMinElement() <em>Min Element</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinElement()
   * @generated
   * @ordered
   */
  protected static final int MIN_ELEMENT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMinElement() <em>Min Element</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinElement()
   * @generated
   * @ordered
   */
  protected int minElement = MIN_ELEMENT_EDEFAULT;

  /**
   * The default value of the '{@link #getMaxElement() <em>Max Element</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxElement()
   * @generated
   * @ordered
   */
  protected static final int MAX_ELEMENT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMaxElement() <em>Max Element</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxElement()
   * @generated
   * @ordered
   */
  protected int maxElement = MAX_ELEMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KeyOptionArrayImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StreamingDslPackage.Literals.KEY_OPTION_ARRAY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getMinElement()
  {
    return minElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMinElement(int newMinElement)
  {
    int oldMinElement = minElement;
    minElement = newMinElement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StreamingDslPackage.KEY_OPTION_ARRAY__MIN_ELEMENT, oldMinElement, minElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getMaxElement()
  {
    return maxElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMaxElement(int newMaxElement)
  {
    int oldMaxElement = maxElement;
    maxElement = newMaxElement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StreamingDslPackage.KEY_OPTION_ARRAY__MAX_ELEMENT, oldMaxElement, maxElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StreamingDslPackage.KEY_OPTION_ARRAY__MIN_ELEMENT:
        return getMinElement();
      case StreamingDslPackage.KEY_OPTION_ARRAY__MAX_ELEMENT:
        return getMaxElement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StreamingDslPackage.KEY_OPTION_ARRAY__MIN_ELEMENT:
        setMinElement((Integer)newValue);
        return;
      case StreamingDslPackage.KEY_OPTION_ARRAY__MAX_ELEMENT:
        setMaxElement((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StreamingDslPackage.KEY_OPTION_ARRAY__MIN_ELEMENT:
        setMinElement(MIN_ELEMENT_EDEFAULT);
        return;
      case StreamingDslPackage.KEY_OPTION_ARRAY__MAX_ELEMENT:
        setMaxElement(MAX_ELEMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StreamingDslPackage.KEY_OPTION_ARRAY__MIN_ELEMENT:
        return minElement != MIN_ELEMENT_EDEFAULT;
      case StreamingDslPackage.KEY_OPTION_ARRAY__MAX_ELEMENT:
        return maxElement != MAX_ELEMENT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (minElement: ");
    result.append(minElement);
    result.append(", maxElement: ");
    result.append(maxElement);
    result.append(')');
    return result.toString();
  }

} //KeyOptionArrayImpl
