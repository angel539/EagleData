/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.pattern.streamingDsl.impl;

import eagledata.core.dsl.pattern.streamingDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class StreamingDslFactoryImpl extends EFactoryImpl implements StreamingDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static StreamingDslFactory init()
  {
    try
    {
      StreamingDslFactory theStreamingDslFactory = (StreamingDslFactory)EPackage.Registry.INSTANCE.getEFactory(StreamingDslPackage.eNS_URI);
      if (theStreamingDslFactory != null)
      {
        return theStreamingDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new StreamingDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StreamingDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case StreamingDslPackage.STREAMING_MODEL: return createStreamingModel();
      case StreamingDslPackage.STREMING_DESCRIPTION: return createStremingDescription();
      case StreamingDslPackage.GEOGRAPHICAL_ELEMENT: return createGeographicalElement();
      case StreamingDslPackage.PLACE: return createPlace();
      case StreamingDslPackage.POINT: return createPoint();
      case StreamingDslPackage.COORDINATE: return createCoordinate();
      case StreamingDslPackage.LATITUDE_LONGITUDE: return createLatitudeLongitude();
      case StreamingDslPackage.UTM: return createUTM();
      case StreamingDslPackage.REGION: return createRegion();
      case StreamingDslPackage.PHRASE: return createPhrase();
      case StreamingDslPackage.FEATURE: return createFeature();
      case StreamingDslPackage.TERM_LIST: return createTermList();
      case StreamingDslPackage.TERM_KEY: return createTermKey();
      case StreamingDslPackage.OPERATION: return createOperation();
      case StreamingDslPackage.OPTION: return createOption();
      case StreamingDslPackage.STRING_OPTION: return createStringOption();
      case StreamingDslPackage.PATH_OPTION: return createPathOption();
      case StreamingDslPackage.KEY_OPTION: return createKeyOption();
      case StreamingDslPackage.KEY_OPTION_OBJECT: return createKeyOptionObject();
      case StreamingDslPackage.KEY_OPTION_ATTR: return createKeyOptionAttr();
      case StreamingDslPackage.KEY_OPTION_ARRAY: return createKeyOptionArray();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case StreamingDslPackage.DISTANCE_MESUREMENT:
        return createDistanceMesurementFromString(eDataType, initialValue);
      case StreamingDslPackage.WORD_LIST_PROPERTY:
        return createWordListPropertyFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case StreamingDslPackage.DISTANCE_MESUREMENT:
        return convertDistanceMesurementToString(eDataType, instanceValue);
      case StreamingDslPackage.WORD_LIST_PROPERTY:
        return convertWordListPropertyToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StreamingModel createStreamingModel()
  {
    StreamingModelImpl streamingModel = new StreamingModelImpl();
    return streamingModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StremingDescription createStremingDescription()
  {
    StremingDescriptionImpl stremingDescription = new StremingDescriptionImpl();
    return stremingDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GeographicalElement createGeographicalElement()
  {
    GeographicalElementImpl geographicalElement = new GeographicalElementImpl();
    return geographicalElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Place createPlace()
  {
    PlaceImpl place = new PlaceImpl();
    return place;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Point createPoint()
  {
    PointImpl point = new PointImpl();
    return point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Coordinate createCoordinate()
  {
    CoordinateImpl coordinate = new CoordinateImpl();
    return coordinate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LatitudeLongitude createLatitudeLongitude()
  {
    LatitudeLongitudeImpl latitudeLongitude = new LatitudeLongitudeImpl();
    return latitudeLongitude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UTM createUTM()
  {
    UTMImpl utm = new UTMImpl();
    return utm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Region createRegion()
  {
    RegionImpl region = new RegionImpl();
    return region;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Phrase createPhrase()
  {
    PhraseImpl phrase = new PhraseImpl();
    return phrase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TermList createTermList()
  {
    TermListImpl termList = new TermListImpl();
    return termList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TermKey createTermKey()
  {
    TermKeyImpl termKey = new TermKeyImpl();
    return termKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Option createOption()
  {
    OptionImpl option = new OptionImpl();
    return option;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringOption createStringOption()
  {
    StringOptionImpl stringOption = new StringOptionImpl();
    return stringOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PathOption createPathOption()
  {
    PathOptionImpl pathOption = new PathOptionImpl();
    return pathOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyOption createKeyOption()
  {
    KeyOptionImpl keyOption = new KeyOptionImpl();
    return keyOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyOptionObject createKeyOptionObject()
  {
    KeyOptionObjectImpl keyOptionObject = new KeyOptionObjectImpl();
    return keyOptionObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyOptionAttr createKeyOptionAttr()
  {
    KeyOptionAttrImpl keyOptionAttr = new KeyOptionAttrImpl();
    return keyOptionAttr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyOptionArray createKeyOptionArray()
  {
    KeyOptionArrayImpl keyOptionArray = new KeyOptionArrayImpl();
    return keyOptionArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DistanceMesurement createDistanceMesurementFromString(EDataType eDataType, String initialValue)
  {
    DistanceMesurement result = DistanceMesurement.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDistanceMesurementToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WordListProperty createWordListPropertyFromString(EDataType eDataType, String initialValue)
  {
    WordListProperty result = WordListProperty.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertWordListPropertyToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StreamingDslPackage getStreamingDslPackage()
  {
    return (StreamingDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static StreamingDslPackage getPackage()
  {
    return StreamingDslPackage.eINSTANCE;
  }

} //StreamingDslFactoryImpl
