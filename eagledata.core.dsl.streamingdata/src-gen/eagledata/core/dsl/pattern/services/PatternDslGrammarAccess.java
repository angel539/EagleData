/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.pattern.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class PatternDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StreamingModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.StreamingModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_0_0 = (RuleCall)cImportSectionAssignment_0.eContents().get(0);
		private final Assignment cDescriptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionsStreamingDescriptionParserRuleCall_1_0 = (RuleCall)cDescriptionsAssignment_1.eContents().get(0);
		private final Assignment cDescriptionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionsStreamingDescriptionParserRuleCall_2_0 = (RuleCall)cDescriptionsAssignment_2.eContents().get(0);
		
		//StreamingModel streaming::StreamingModel:
		//	importSection=XImportSection?
		//	descriptions+=StreamingDescription descriptions+=StreamingDescription*
		@Override public ParserRule getRule() { return rule; }
		
		//importSection=XImportSection? descriptions+=StreamingDescription descriptions+=StreamingDescription*
		public Group getGroup() { return cGroup; }
		
		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_0() { return cImportSectionAssignment_0; }
		
		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_0_0() { return cImportSectionXImportSectionParserRuleCall_0_0; }
		
		//descriptions+=StreamingDescription
		public Assignment getDescriptionsAssignment_1() { return cDescriptionsAssignment_1; }
		
		//StreamingDescription
		public RuleCall getDescriptionsStreamingDescriptionParserRuleCall_1_0() { return cDescriptionsStreamingDescriptionParserRuleCall_1_0; }
		
		//descriptions+=StreamingDescription*
		public Assignment getDescriptionsAssignment_2() { return cDescriptionsAssignment_2; }
		
		//StreamingDescription
		public RuleCall getDescriptionsStreamingDescriptionParserRuleCall_2_0() { return cDescriptionsStreamingDescriptionParserRuleCall_2_0; }
	}
	public class StreamingDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.StreamingDescription");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeographicalElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StreamingDescription streaming::StremingDescription:
		//	GeographicalElement | Phrase
		@Override public ParserRule getRule() { return rule; }
		
		//GeographicalElement | Phrase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GeographicalElement
		public RuleCall getGeographicalElementParserRuleCall_0() { return cGeographicalElementParserRuleCall_0; }
		
		//Phrase
		public RuleCall getPhraseParserRuleCall_1() { return cPhraseParserRuleCall_1; }
	}
	public class GeographicalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.GeographicalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GeographicalElement streaming::GeographicalElement:
		//	Place | Region
		@Override public ParserRule getRule() { return rule; }
		
		//Place | Region
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Place
		public RuleCall getPlaceParserRuleCall_0() { return cPlaceParserRuleCall_0; }
		
		//Region
		public RuleCall getRegionParserRuleCall_1() { return cRegionParserRuleCall_1; }
	}
	public class PlaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Place");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPointPointParserRuleCall_3_0 = (RuleCall)cPointAssignment_3.eContents().get(0);
		
		//Place streaming::Place:
		//	'place' name=ValidID '=' point=Point
		@Override public ParserRule getRule() { return rule; }
		
		//'place' name=ValidID '=' point=Point
		public Group getGroup() { return cGroup; }
		
		//'place'
		public Keyword getPlaceKeyword_0() { return cPlaceKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//point=Point
		public Assignment getPointAssignment_3() { return cPointAssignment_3; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_3_0() { return cPointPointParserRuleCall_3_0; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cRadiusAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRadiusDOUBLETerminalRuleCall_0_0_0 = (RuleCall)cRadiusAssignment_0_0.eContents().get(0);
		private final Assignment cMesurementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMesurementDistanceMesurementEnumRuleCall_0_1_0 = (RuleCall)cMesurementAssignment_0_1.eContents().get(0);
		private final Keyword cArroundKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cCoordinatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCoordinatesCoordinateParserRuleCall_1_0 = (RuleCall)cCoordinatesAssignment_1.eContents().get(0);
		
		//Point streaming::Point:
		//	(radius=DOUBLE mesurement=DistanceMesurement 'arround')? coordinates=Coordinate
		@Override public ParserRule getRule() { return rule; }
		
		//(radius=DOUBLE mesurement=DistanceMesurement 'arround')? coordinates=Coordinate
		public Group getGroup() { return cGroup; }
		
		//(radius=DOUBLE mesurement=DistanceMesurement 'arround')?
		public Group getGroup_0() { return cGroup_0; }
		
		//radius=DOUBLE
		public Assignment getRadiusAssignment_0_0() { return cRadiusAssignment_0_0; }
		
		//DOUBLE
		public RuleCall getRadiusDOUBLETerminalRuleCall_0_0_0() { return cRadiusDOUBLETerminalRuleCall_0_0_0; }
		
		//mesurement=DistanceMesurement
		public Assignment getMesurementAssignment_0_1() { return cMesurementAssignment_0_1; }
		
		//DistanceMesurement
		public RuleCall getMesurementDistanceMesurementEnumRuleCall_0_1_0() { return cMesurementDistanceMesurementEnumRuleCall_0_1_0; }
		
		//'arround'
		public Keyword getArroundKeyword_0_2() { return cArroundKeyword_0_2; }
		
		//coordinates=Coordinate
		public Assignment getCoordinatesAssignment_1() { return cCoordinatesAssignment_1; }
		
		//Coordinate
		public RuleCall getCoordinatesCoordinateParserRuleCall_1_0() { return cCoordinatesCoordinateParserRuleCall_1_0; }
	}
	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Coordinate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLatLongParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUTMParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Coordinate streaming::Coordinate:
		//	LatLong | UTM
		@Override public ParserRule getRule() { return rule; }
		
		//LatLong | UTM
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LatLong
		public RuleCall getLatLongParserRuleCall_0() { return cLatLongParserRuleCall_0; }
		
		//UTM
		public RuleCall getUTMParserRuleCall_1() { return cUTMParserRuleCall_1; }
	}
	public class LatLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.LatLong");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLatDOUBLETerminalRuleCall_0_0 = (RuleCall)cLatAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLongAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongDOUBLETerminalRuleCall_2_0 = (RuleCall)cLongAssignment_2.eContents().get(0);
		
		//LatLong streaming::LatitudeLongitude:
		//	lat=DOUBLE "," long=DOUBLE
		@Override public ParserRule getRule() { return rule; }
		
		//lat=DOUBLE "," long=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//lat=DOUBLE
		public Assignment getLatAssignment_0() { return cLatAssignment_0; }
		
		//DOUBLE
		public RuleCall getLatDOUBLETerminalRuleCall_0_0() { return cLatDOUBLETerminalRuleCall_0_0; }
		
		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//long=DOUBLE
		public Assignment getLongAssignment_2() { return cLongAssignment_2; }
		
		//DOUBLE
		public RuleCall getLongDOUBLETerminalRuleCall_2_0() { return cLongDOUBLETerminalRuleCall_2_0; }
	}
	public class UTMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.UTM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUTMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEDOUBLETerminalRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNDOUBLETerminalRuleCall_4_0 = (RuleCall)cNAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cZAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cZDOUBLETerminalRuleCall_6_0 = (RuleCall)cZAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cHemiAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHemiDOUBLETerminalRuleCall_8_0 = (RuleCall)cHemiAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//UTM streaming::UTM:
		//	'UTM' '{' e=DOUBLE "," n=DOUBLE "," z=DOUBLE "," Hemi=DOUBLE '}'
		@Override public ParserRule getRule() { return rule; }
		
		//'UTM' '{' e=DOUBLE "," n=DOUBLE "," z=DOUBLE "," Hemi=DOUBLE '}'
		public Group getGroup() { return cGroup; }
		
		//'UTM'
		public Keyword getUTMKeyword_0() { return cUTMKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//e=DOUBLE
		public Assignment getEAssignment_2() { return cEAssignment_2; }
		
		//DOUBLE
		public RuleCall getEDOUBLETerminalRuleCall_2_0() { return cEDOUBLETerminalRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//n=DOUBLE
		public Assignment getNAssignment_4() { return cNAssignment_4; }
		
		//DOUBLE
		public RuleCall getNDOUBLETerminalRuleCall_4_0() { return cNDOUBLETerminalRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//z=DOUBLE
		public Assignment getZAssignment_6() { return cZAssignment_6; }
		
		//DOUBLE
		public RuleCall getZDOUBLETerminalRuleCall_6_0() { return cZDOUBLETerminalRuleCall_6_0; }
		
		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//Hemi=DOUBLE
		public Assignment getHemiAssignment_8() { return cHemiAssignment_8; }
		
		//DOUBLE
		public RuleCall getHemiDOUBLETerminalRuleCall_8_0() { return cHemiDOUBLETerminalRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSouthWestBoundaryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSouthWestBoundaryPointParserRuleCall_4_0 = (RuleCall)cSouthWestBoundaryAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNorthEastBoundaryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNorthEastBoundaryPointParserRuleCall_6_0 = (RuleCall)cNorthEastBoundaryAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Region streaming::Region:
		//	'region' name=ValidID '=' '{'
		//	southWestBoundary=Point ':' northEastBoundary=Point
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'region' name=ValidID '=' '{' southWestBoundary=Point ':' northEastBoundary=Point '}'
		public Group getGroup() { return cGroup; }
		
		//'region'
		public Keyword getRegionKeyword_0() { return cRegionKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//southWestBoundary=Point
		public Assignment getSouthWestBoundaryAssignment_4() { return cSouthWestBoundaryAssignment_4; }
		
		//Point
		public RuleCall getSouthWestBoundaryPointParserRuleCall_4_0() { return cSouthWestBoundaryPointParserRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//northEastBoundary=Point
		public Assignment getNorthEastBoundaryAssignment_6() { return cNorthEastBoundaryAssignment_6; }
		
		//Point
		public RuleCall getNorthEastBoundaryPointParserRuleCall_6_0() { return cNorthEastBoundaryPointParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Phrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConnectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConnectionSTRINGTerminalRuleCall_0_0 = (RuleCall)cConnectionAssignment_0.eContents().get(0);
		private final Keyword cPhraseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInAGeoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cInAGeoGeographicalElementCrossReference_3_1_0 = (CrossReference)cInAGeoAssignment_3_1.eContents().get(0);
		private final RuleCall cInAGeoGeographicalElementValidIDParserRuleCall_3_1_0_1 = (RuleCall)cInAGeoGeographicalElementCrossReference_3_1_0.eContents().get(1);
		private final Assignment cOrderedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOrderedOrderedKeyword_4_0 = (Keyword)cOrderedAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cFeaturesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cFeaturesFeatureParserRuleCall_6_0_0 = (RuleCall)cFeaturesAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_6_1_1_0 = (RuleCall)cFeaturesAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cOptionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_8_1_0 = (RuleCall)cOptionsAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cOptionsAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_8_2_1_0 = (RuleCall)cOptionsAssignment_8_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//Phrase streaming::Phrase:
		//	connection=STRING 'phrase' name=ValidID ('in' inAGeo=[streaming::GeographicalElement|ValidID])? ordered?='ordered'?
		//	'{' (features+=Feature ("," features+=Feature)*)?
		//	'}' ('(' options+=Option ("," options+=Option)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//connection=STRING 'phrase' name=ValidID ('in' inAGeo=[streaming::GeographicalElement|ValidID])? ordered?='ordered'? '{'
		//(features+=Feature ("," features+=Feature)*)? '}' ('(' options+=Option ("," options+=Option)* ')')?
		public Group getGroup() { return cGroup; }
		
		//connection=STRING
		public Assignment getConnectionAssignment_0() { return cConnectionAssignment_0; }
		
		//STRING
		public RuleCall getConnectionSTRINGTerminalRuleCall_0_0() { return cConnectionSTRINGTerminalRuleCall_0_0; }
		
		//'phrase'
		public Keyword getPhraseKeyword_1() { return cPhraseKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//('in' inAGeo=[streaming::GeographicalElement|ValidID])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//inAGeo=[streaming::GeographicalElement|ValidID]
		public Assignment getInAGeoAssignment_3_1() { return cInAGeoAssignment_3_1; }
		
		//[streaming::GeographicalElement|ValidID]
		public CrossReference getInAGeoGeographicalElementCrossReference_3_1_0() { return cInAGeoGeographicalElementCrossReference_3_1_0; }
		
		//ValidID
		public RuleCall getInAGeoGeographicalElementValidIDParserRuleCall_3_1_0_1() { return cInAGeoGeographicalElementValidIDParserRuleCall_3_1_0_1; }
		
		//ordered?='ordered'?
		public Assignment getOrderedAssignment_4() { return cOrderedAssignment_4; }
		
		//'ordered'
		public Keyword getOrderedOrderedKeyword_4_0() { return cOrderedOrderedKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(features+=Feature ("," features+=Feature)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_6_0() { return cFeaturesAssignment_6_0; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_6_0_0() { return cFeaturesFeatureParserRuleCall_6_0_0; }
		
		//("," features+=Feature)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_6_1_1() { return cFeaturesAssignment_6_1_1; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_6_1_1_0() { return cFeaturesFeatureParserRuleCall_6_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('(' options+=Option ("," options+=Option)* ')')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_8_1() { return cOptionsAssignment_8_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_8_1_0() { return cOptionsOptionParserRuleCall_8_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//","
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_8_2_1() { return cOptionsAssignment_8_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_8_2_1_0() { return cOptionsOptionParserRuleCall_8_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTermListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTermKeyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Feature streaming::Feature:
		//	TermList | TermKey | Operation
		@Override public ParserRule getRule() { return rule; }
		
		//TermList | TermKey | Operation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TermList
		public RuleCall getTermListParserRuleCall_0() { return cTermListParserRuleCall_0; }
		
		//TermKey
		public RuleCall getTermKeyParserRuleCall_1() { return cTermKeyParserRuleCall_1; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_2() { return cOperationParserRuleCall_2; }
	}
	public class TermListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.TermList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyWordListPropertyEnumRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTermsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTermsSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cTermsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTermsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTermsSTRINGTerminalRuleCall_4_2_1_0 = (RuleCall)cTermsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//TermList streaming::TermList:
		//	'list' property=WordListProperty? name=ValidID '=' ('(' terms+=STRING ("," terms+=STRING)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//'list' property=WordListProperty? name=ValidID '=' ('(' terms+=STRING ("," terms+=STRING)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'list'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//property=WordListProperty?
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//WordListProperty
		public RuleCall getPropertyWordListPropertyEnumRuleCall_1_0() { return cPropertyWordListPropertyEnumRuleCall_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//('(' terms+=STRING ("," terms+=STRING)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//terms+=STRING
		public Assignment getTermsAssignment_4_1() { return cTermsAssignment_4_1; }
		
		//STRING
		public RuleCall getTermsSTRINGTerminalRuleCall_4_1_0() { return cTermsSTRINGTerminalRuleCall_4_1_0; }
		
		//("," terms+=STRING)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//terms+=STRING
		public Assignment getTermsAssignment_4_2_1() { return cTermsAssignment_4_2_1; }
		
		//STRING
		public RuleCall getTermsSTRINGTerminalRuleCall_4_2_1_0() { return cTermsSTRINGTerminalRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class TermKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.TermKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TermKey streaming::TermKey:
		//	type=JvmTypeReference name=ValidID
		@Override public ParserRule getRule() { return rule; }
		
		//type=JvmTypeReference name=ValidID
		public Group getGroup() { return cGroup; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_3_2_1_0 = (RuleCall)cParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Operation streaming::Operation:
		//	'operation' returnType=JvmTypeReference name=ValidID ('(' parameters+=FullJvmFormalParameter (','
		//	parameters+=FullJvmFormalParameter)* ')')? '{'
		//	body=XBlockExpression
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'operation' returnType=JvmTypeReference name=ValidID ('(' parameters+=FullJvmFormalParameter (','
		//parameters+=FullJvmFormalParameter)* ')')? '{' body=XBlockExpression '}'
		public Group getGroup() { return cGroup; }
		
		//'operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_1_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//('(' parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_3_1_0() { return cParametersFullJvmFormalParameterParserRuleCall_3_1_0; }
		
		//(',' parameters+=FullJvmFormalParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_3_2_1() { return cParametersAssignment_3_2_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_3_2_1_0() { return cParametersFullJvmFormalParameterParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_5_0() { return cBodyXBlockExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPathOptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Option streaming::Option:
		//	PathOption | StringOption
		@Override public ParserRule getRule() { return rule; }
		
		//PathOption | StringOption
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PathOption
		public RuleCall getPathOptionParserRuleCall_0() { return cPathOptionParserRuleCall_0; }
		
		//StringOption
		public RuleCall getStringOptionParserRuleCall_1() { return cStringOptionParserRuleCall_1; }
	}
	public class StringOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.StringOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StringOption streaming::StringOption:
		//	key=STRING '=' value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class PathOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.PathOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyKeyOptionObjectParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyKeyOptionParserRuleCall_1_1_0 = (RuleCall)cKeyAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertyWordListPropertyEnumRuleCall_2_1_0 = (RuleCall)cPropertyAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cValuesAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cValuesAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cValuesAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_4_1_0 = (RuleCall)cValuesAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//PathOption streaming::PathOption:
		//	key+=KeyOptionObject ("." key+=KeyOption)* ('=' property=WordListProperty? '[' values+=STRING ("," values+=STRING)*
		//	']')?
		@Override public ParserRule getRule() { return rule; }
		
		//key+=KeyOptionObject ("." key+=KeyOption)* ('=' property=WordListProperty? '[' values+=STRING ("," values+=STRING)*
		//']')?
		public Group getGroup() { return cGroup; }
		
		//key+=KeyOptionObject
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//KeyOptionObject
		public RuleCall getKeyKeyOptionObjectParserRuleCall_0_0() { return cKeyKeyOptionObjectParserRuleCall_0_0; }
		
		//("." key+=KeyOption)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//key+=KeyOption
		public Assignment getKeyAssignment_1_1() { return cKeyAssignment_1_1; }
		
		//KeyOption
		public RuleCall getKeyKeyOptionParserRuleCall_1_1_0() { return cKeyKeyOptionParserRuleCall_1_1_0; }
		
		//('=' property=WordListProperty? '[' values+=STRING ("," values+=STRING)* ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//property=WordListProperty?
		public Assignment getPropertyAssignment_2_1() { return cPropertyAssignment_2_1; }
		
		//WordListProperty
		public RuleCall getPropertyWordListPropertyEnumRuleCall_2_1_0() { return cPropertyWordListPropertyEnumRuleCall_2_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }
		
		//values+=STRING
		public Assignment getValuesAssignment_2_3() { return cValuesAssignment_2_3; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_3_0() { return cValuesSTRINGTerminalRuleCall_2_3_0; }
		
		//("," values+=STRING)*
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//","
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_2_4_1() { return cValuesAssignment_2_4_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_4_1_0() { return cValuesSTRINGTerminalRuleCall_2_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }
	}
	public class KeyOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.KeyOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKeyOptionObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeyOptionAttrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKeyOptionArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//KeyOption streaming::KeyOption:
		//	KeyOptionObject | KeyOptionAttr | KeyOptionArray
		@Override public ParserRule getRule() { return rule; }
		
		//KeyOptionObject | KeyOptionAttr | KeyOptionArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KeyOptionObject
		public RuleCall getKeyOptionObjectParserRuleCall_0() { return cKeyOptionObjectParserRuleCall_0; }
		
		//KeyOptionAttr
		public RuleCall getKeyOptionAttrParserRuleCall_1() { return cKeyOptionAttrParserRuleCall_1; }
		
		//KeyOptionArray
		public RuleCall getKeyOptionArrayParserRuleCall_2() { return cKeyOptionArrayParserRuleCall_2; }
	}
	public class KeyOptionObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.KeyOptionObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		
		//KeyOptionObject streaming::KeyOptionObject:
		//	'$' key=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//'$' key=STRING
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//key=STRING
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_1_0() { return cKeySTRINGTerminalRuleCall_1_0; }
	}
	public class KeyOptionAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.KeyOptionAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		
		//KeyOptionAttr streaming::KeyOptionAttr:
		//	'@' key=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//'@' key=STRING
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//key=STRING
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_1_0() { return cKeySTRINGTerminalRuleCall_1_0; }
	}
	public class KeyOptionArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.KeyOptionArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMinElementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMinElementINTTerminalRuleCall_2_0_0 = (RuleCall)cMinElementAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMaxElementAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMaxElementINTTerminalRuleCall_2_1_1_0 = (RuleCall)cMaxElementAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KeyOptionArray streaming::KeyOptionArray:
		//	key=STRING '[' (minElement=INT (':' maxElement=INT)?)? ']'
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING '[' (minElement=INT (':' maxElement=INT)?)? ']'
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(minElement=INT (':' maxElement=INT)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//minElement=INT
		public Assignment getMinElementAssignment_2_0() { return cMinElementAssignment_2_0; }
		
		//INT
		public RuleCall getMinElementINTTerminalRuleCall_2_0_0() { return cMinElementINTTerminalRuleCall_2_0_0; }
		
		//(':' maxElement=INT)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//':'
		public Keyword getColonKeyword_2_1_0() { return cColonKeyword_2_1_0; }
		
		//maxElement=INT
		public Assignment getMaxElementAssignment_2_1_1() { return cMaxElementAssignment_2_1_1; }
		
		//INT
		public RuleCall getMaxElementINTTerminalRuleCall_2_1_1_0() { return cMaxElementINTTerminalRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	
	public class DistanceMesurementElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.DistanceMesurement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cKmsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cKmsKmsKeyword_0_0 = (Keyword)cKmsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMilesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMilesMilesKeyword_1_0 = (Keyword)cMilesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMtsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMtsMtsKeyword_2_0 = (Keyword)cMtsEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DistanceMesurement returns streaming::DistanceMesurement:
		//	kms | miles | mts;
		public EnumRule getRule() { return rule; }
		
		//kms | miles | mts
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kms
		public EnumLiteralDeclaration getKmsEnumLiteralDeclaration_0() { return cKmsEnumLiteralDeclaration_0; }
		
		//'kms'
		public Keyword getKmsKmsKeyword_0_0() { return cKmsKmsKeyword_0_0; }
		
		//miles
		public EnumLiteralDeclaration getMilesEnumLiteralDeclaration_1() { return cMilesEnumLiteralDeclaration_1; }
		
		//'miles'
		public Keyword getMilesMilesKeyword_1_0() { return cMilesMilesKeyword_1_0; }
		
		//mts
		public EnumLiteralDeclaration getMtsEnumLiteralDeclaration_2() { return cMtsEnumLiteralDeclaration_2; }
		
		//'mts'
		public Keyword getMtsMtsKeyword_2_0() { return cMtsMtsKeyword_2_0; }
	}
	public class WordListPropertyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.WordListProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAllAllKeyword_0_0 = (Keyword)cAllEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnyAnyKeyword_1_0 = (Keyword)cAnyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum WordListProperty returns streaming::WordListProperty:
		//	all | any;
		public EnumRule getRule() { return rule; }
		
		//all | any
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//all
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_0() { return cAllEnumLiteralDeclaration_0; }
		
		//'all'
		public Keyword getAllAllKeyword_0_0() { return cAllAllKeyword_0_0; }
		
		//any
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_1() { return cAnyEnumLiteralDeclaration_1; }
		
		//'any'
		public Keyword getAnyAnyKeyword_1_0() { return cAnyAnyKeyword_1_0; }
	}
	
	private final StreamingModelElements pStreamingModel;
	private final StreamingDescriptionElements pStreamingDescription;
	private final GeographicalElementElements pGeographicalElement;
	private final PlaceElements pPlace;
	private final PointElements pPoint;
	private final CoordinateElements pCoordinate;
	private final LatLongElements pLatLong;
	private final UTMElements pUTM;
	private final RegionElements pRegion;
	private final PhraseElements pPhrase;
	private final FeatureElements pFeature;
	private final TermListElements pTermList;
	private final TermKeyElements pTermKey;
	private final OperationElements pOperation;
	private final OptionElements pOption;
	private final StringOptionElements pStringOption;
	private final PathOptionElements pPathOption;
	private final KeyOptionElements pKeyOption;
	private final KeyOptionObjectElements pKeyOptionObject;
	private final KeyOptionAttrElements pKeyOptionAttr;
	private final KeyOptionArrayElements pKeyOptionArray;
	private final DistanceMesurementElements eDistanceMesurement;
	private final TerminalRule tDOUBLE;
	private final WordListPropertyElements eWordListProperty;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public PatternDslGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pStreamingModel = new StreamingModelElements();
		this.pStreamingDescription = new StreamingDescriptionElements();
		this.pGeographicalElement = new GeographicalElementElements();
		this.pPlace = new PlaceElements();
		this.pPoint = new PointElements();
		this.pCoordinate = new CoordinateElements();
		this.pLatLong = new LatLongElements();
		this.pUTM = new UTMElements();
		this.pRegion = new RegionElements();
		this.pPhrase = new PhraseElements();
		this.pFeature = new FeatureElements();
		this.pTermList = new TermListElements();
		this.pTermKey = new TermKeyElements();
		this.pOperation = new OperationElements();
		this.pOption = new OptionElements();
		this.pStringOption = new StringOptionElements();
		this.pPathOption = new PathOptionElements();
		this.pKeyOption = new KeyOptionElements();
		this.pKeyOptionObject = new KeyOptionObjectElements();
		this.pKeyOptionAttr = new KeyOptionAttrElements();
		this.pKeyOptionArray = new KeyOptionArrayElements();
		this.eDistanceMesurement = new DistanceMesurementElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.DOUBLE");
		this.eWordListProperty = new WordListPropertyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eagledata.core.dsl.pattern.PatternDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//StreamingModel streaming::StreamingModel:
	//	importSection=XImportSection?
	//	descriptions+=StreamingDescription descriptions+=StreamingDescription*
	public StreamingModelElements getStreamingModelAccess() {
		return pStreamingModel;
	}
	
	public ParserRule getStreamingModelRule() {
		return getStreamingModelAccess().getRule();
	}
	
	//StreamingDescription streaming::StremingDescription:
	//	GeographicalElement | Phrase
	public StreamingDescriptionElements getStreamingDescriptionAccess() {
		return pStreamingDescription;
	}
	
	public ParserRule getStreamingDescriptionRule() {
		return getStreamingDescriptionAccess().getRule();
	}
	
	//GeographicalElement streaming::GeographicalElement:
	//	Place | Region
	public GeographicalElementElements getGeographicalElementAccess() {
		return pGeographicalElement;
	}
	
	public ParserRule getGeographicalElementRule() {
		return getGeographicalElementAccess().getRule();
	}
	
	//Place streaming::Place:
	//	'place' name=ValidID '=' point=Point
	public PlaceElements getPlaceAccess() {
		return pPlace;
	}
	
	public ParserRule getPlaceRule() {
		return getPlaceAccess().getRule();
	}
	
	//Point streaming::Point:
	//	(radius=DOUBLE mesurement=DistanceMesurement 'arround')? coordinates=Coordinate
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//Coordinate streaming::Coordinate:
	//	LatLong | UTM
	public CoordinateElements getCoordinateAccess() {
		return pCoordinate;
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}
	
	//LatLong streaming::LatitudeLongitude:
	//	lat=DOUBLE "," long=DOUBLE
	public LatLongElements getLatLongAccess() {
		return pLatLong;
	}
	
	public ParserRule getLatLongRule() {
		return getLatLongAccess().getRule();
	}
	
	//UTM streaming::UTM:
	//	'UTM' '{' e=DOUBLE "," n=DOUBLE "," z=DOUBLE "," Hemi=DOUBLE '}'
	public UTMElements getUTMAccess() {
		return pUTM;
	}
	
	public ParserRule getUTMRule() {
		return getUTMAccess().getRule();
	}
	
	//Region streaming::Region:
	//	'region' name=ValidID '=' '{'
	//	southWestBoundary=Point ':' northEastBoundary=Point
	//	'}'
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}
	
	//Phrase streaming::Phrase:
	//	connection=STRING 'phrase' name=ValidID ('in' inAGeo=[streaming::GeographicalElement|ValidID])? ordered?='ordered'?
	//	'{' (features+=Feature ("," features+=Feature)*)?
	//	'}' ('(' options+=Option ("," options+=Option)* ')')?
	public PhraseElements getPhraseAccess() {
		return pPhrase;
	}
	
	public ParserRule getPhraseRule() {
		return getPhraseAccess().getRule();
	}
	
	//Feature streaming::Feature:
	//	TermList | TermKey | Operation
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//TermList streaming::TermList:
	//	'list' property=WordListProperty? name=ValidID '=' ('(' terms+=STRING ("," terms+=STRING)* ')')?
	public TermListElements getTermListAccess() {
		return pTermList;
	}
	
	public ParserRule getTermListRule() {
		return getTermListAccess().getRule();
	}
	
	//TermKey streaming::TermKey:
	//	type=JvmTypeReference name=ValidID
	public TermKeyElements getTermKeyAccess() {
		return pTermKey;
	}
	
	public ParserRule getTermKeyRule() {
		return getTermKeyAccess().getRule();
	}
	
	//Operation streaming::Operation:
	//	'operation' returnType=JvmTypeReference name=ValidID ('(' parameters+=FullJvmFormalParameter (','
	//	parameters+=FullJvmFormalParameter)* ')')? '{'
	//	body=XBlockExpression
	//	'}'
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Option streaming::Option:
	//	PathOption | StringOption
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//StringOption streaming::StringOption:
	//	key=STRING '=' value=STRING
	public StringOptionElements getStringOptionAccess() {
		return pStringOption;
	}
	
	public ParserRule getStringOptionRule() {
		return getStringOptionAccess().getRule();
	}
	
	//PathOption streaming::PathOption:
	//	key+=KeyOptionObject ("." key+=KeyOption)* ('=' property=WordListProperty? '[' values+=STRING ("," values+=STRING)*
	//	']')?
	public PathOptionElements getPathOptionAccess() {
		return pPathOption;
	}
	
	public ParserRule getPathOptionRule() {
		return getPathOptionAccess().getRule();
	}
	
	//KeyOption streaming::KeyOption:
	//	KeyOptionObject | KeyOptionAttr | KeyOptionArray
	public KeyOptionElements getKeyOptionAccess() {
		return pKeyOption;
	}
	
	public ParserRule getKeyOptionRule() {
		return getKeyOptionAccess().getRule();
	}
	
	//KeyOptionObject streaming::KeyOptionObject:
	//	'$' key=STRING
	public KeyOptionObjectElements getKeyOptionObjectAccess() {
		return pKeyOptionObject;
	}
	
	public ParserRule getKeyOptionObjectRule() {
		return getKeyOptionObjectAccess().getRule();
	}
	
	//KeyOptionAttr streaming::KeyOptionAttr:
	//	'@' key=STRING
	public KeyOptionAttrElements getKeyOptionAttrAccess() {
		return pKeyOptionAttr;
	}
	
	public ParserRule getKeyOptionAttrRule() {
		return getKeyOptionAttrAccess().getRule();
	}
	
	//KeyOptionArray streaming::KeyOptionArray:
	//	key=STRING '[' (minElement=INT (':' maxElement=INT)?)? ']'
	public KeyOptionArrayElements getKeyOptionArrayAccess() {
		return pKeyOptionArray;
	}
	
	public ParserRule getKeyOptionArrayRule() {
		return getKeyOptionArrayAccess().getRule();
	}
	
	//enum DistanceMesurement returns streaming::DistanceMesurement:
	//	kms | miles | mts;
	public DistanceMesurementElements getDistanceMesurementAccess() {
		return eDistanceMesurement;
	}
	
	public EnumRule getDistanceMesurementRule() {
		return getDistanceMesurementAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//enum WordListProperty returns streaming::WordListProperty:
	//	all | any;
	public WordListPropertyElements getWordListPropertyAccess() {
		return eWordListProperty;
	}
	
	public EnumRule getWordListPropertyRule() {
		return getWordListPropertyAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
