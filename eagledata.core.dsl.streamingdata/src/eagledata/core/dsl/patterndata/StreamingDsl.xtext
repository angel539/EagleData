grammar eagledata.core.dsl.pattern.PatternDsl with org.eclipse.xtext.xbase.Xbase 

generate streamingDsl "http://www.core.eagledata/dsl/streamingdata/StreamingDsl" as streaming
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase"

StreamingModel returns streaming::StreamingModel:
	importSection = XImportSection?
	descriptions+=StreamingDescription (descriptions+=StreamingDescription)*
;

StreamingDescription returns streaming::StremingDescription:
	GeographicalElement | Phrase
;

GeographicalElement returns streaming::GeographicalElement:
	Place | Region
;

Place returns streaming::Place:
	'place' name=ValidID '=' point=Point
;

Point returns streaming::Point:
	(radius=DOUBLE mesurement=DistanceMesurement 'arround')? coordinates=Coordinate
;

Coordinate returns streaming::Coordinate: 
	LatLong | UTM
;

LatLong returns streaming::LatitudeLongitude:
	lat=DOUBLE "," long=DOUBLE
;

UTM returns streaming::UTM:
	'UTM' '{'e=DOUBLE "," n=DOUBLE "," z=DOUBLE "," Hemi=DOUBLE '}';


Region returns streaming::Region:
	'region' name=ValidID '=' '{'
		southWestBoundary = Point ':' northEastBoundary = Point
	'}'
;

Phrase returns streaming::Phrase:
	 connection=STRING 'phrase' name=ValidID ('in' inAGeo=[streaming::GeographicalElement|ValidID])? (ordered?='ordered')? '{' 
	 	(features += Feature ( "," features += Feature)*)?
	 '}'
	 ('(' options += Option ( "," options += Option)* ')')?
	 
;

Feature returns streaming::Feature:
	TermList | TermKey | Operation;
	
TermList returns streaming::TermList:
	'list' (property=WordListProperty)? name=ValidID '=' ('(' terms+=STRING ( "," terms+=STRING)* ')')?;
	
TermKey returns streaming::TermKey:
	type = JvmTypeReference name = ValidID
;
 
Operation returns streaming::Operation:
	'operation' returnType = JvmTypeReference name=ValidID ('('parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*')')? '{'
		body=XBlockExpression 
	'}';

Option returns streaming::Option:
	PathOption | StringOption
;

StringOption returns streaming::StringOption:
	key = STRING '=' value = STRING
;
	
PathOption returns streaming::PathOption:
	key+=KeyOptionObject("."key+=KeyOption)* ('=' (property=WordListProperty)? '['values +=STRING ("," values+=STRING)*']')?
;

KeyOption returns streaming::KeyOption:
	KeyOptionObject | KeyOptionAttr | KeyOptionArray
;

KeyOptionObject returns streaming::KeyOptionObject:
	'$' key=STRING
;

KeyOptionAttr returns streaming::KeyOptionAttr:
	'@' key=STRING
;

KeyOptionArray returns streaming::KeyOptionArray:
	key=STRING '['(minElement = INT (':' maxElement = INT)?)?']'
;


enum DistanceMesurement returns streaming::DistanceMesurement:
	kms = 'kms' | miles = 'miles' | mts = 'mts'
;

terminal DOUBLE returns ecore::EDouble: "-"?INT'.' INT;

enum WordListProperty returns streaming::WordListProperty:
	all = 'all' | any = 'any';

/*Option returns streaming::Option:
	BooleanOption | GeoOption | IntOption | LanguageOption | SourceOption
;

GeoOption returns streaming::GeoOption:
	key=GeoOptionKey '=' value = [streaming::GeographicalElement|QualifiedName]
;

SourceOption returns streaming::SourceOption:
	key=SourceOptionKey '=' value = Source
;

LanguageOption returns streaming::LanguageOption:
	key=LanguageOptionKey '=' value = Language
;

BooleanOption returns streaming::BooleanOption:
	key=BooleanOptionKey '=' value = BOOLEAN
;

IntOption returns streaming::IntOption:
	key=IntOptionKey '=' value = INT
;*/

/*terminal BOOLEAN : "true" | "false";

enum GeoOptionKey returns streaming::GeoOptionKey:
	in = 'in'
;

enum SourceOptionKey returns streaming::SourceOptionKey:
	source = 'source'
;

enum LanguageOptionKey returns streaming::LanguageOptionKey:
	lang = 'language'
;

enum IntOptionKey returns streaming::IntOptionKey:
	lang = 'minretweet' | source = "minfavorite"
;

enum BooleanOptionKey returns streaming::BooleanOptionKey:
	inreplyto = "inreplyto" | retweet = "retweet" | favorite = "favorite"
;

enum UserOptionKey returns streaming::UserOptionKey:
	inreplyto = "inreplyto" | retweet = "retweet" | favorite = "favorite"
;	

enum Attached returns streaming::Attached:
	links = 'links' | videos = 'videos' | imgs = 'imgs'
;

enum Source returns streaming::Source:
	android = 'android' | ios = 'ios' | web = 'web' | all = 'all'
;

enum Language returns streaming::Language:
	en = 'english' | es = 'spanish' | zh = 'chinese' //....
;*/

