grammar eagledata.core.dsl.pattern.PatternDsl with org.eclipse.xtext.common.Terminals

generate streamingDsl "http://www.core.eagledata/dsl/streamingdata/StreamingDsl" as streaming
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


StreamingModel returns streaming::StreamingModel:
	descriptions+=StreamingDescription (descriptions+=StreamingDescription)*
;

StreamingDescription returns streaming::StremingDescription:
	Import | GeographicalElement | PatternMatcherElement
;

Import returns streaming::Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;
    
QualifiedName:
    ID ('.' ID)*;

GeographicalElement returns streaming::GeographicalElement:
	Place | Region
;

Place returns streaming::Place:
	'place' name=ID '=' point=Point
;

Point returns streaming::Point:
	(radius=DOUBLE mesurement=DistanceMesurement 'arround')? coordinates=Coordinate
;

Coordinate returns streaming::Coordinate: 
	LatLong | UTM
;

LatLong returns streaming::LatitudeLongitude:
	lat=DOUBLE "," long=DOUBLE
;

UTM returns streaming::UTM:
	'UTM' '{'e=DOUBLE "," n=DOUBLE "," z=DOUBLE "," Hemi=DOUBLE '}';


 Region returns streaming::Region:
	'region' name=ID '=' '{'
		//('contains' '(' contains+=[streaming::GeographicalElement|ID] ( "," contains+=[streaming::GeographicalElement|ID])* ')' )?
		southWestBoundary = Point ':' northEastBoundary = Point
	'}'//('{' semanticField+=STRING ("," semanticField+=STRING)* '}')?
;

PatternMatcherElement returns streaming::PatternMatcherElement:
	Phrase | Concept;

Concept returns streaming::Concept:
	TermList | Term;
	
TermList returns streaming::TermList:
	'list' (property=WordListProperty)? name=ID '=' ('(' terms+=STRING ( "," terms+=STRING)* ')')?;

Term returns streaming::Term:
	name=ID
;

Phrase returns streaming::Phrase:
	 'phrase' name=ID (ordered?='ordered')? '=' '(' 
	 	(concepts+=Concept) ( "," concepts+=Concept)*
	 ')'
	 ('{' options += Option ( "," options+=Option)* '}')?
	 //('in' inAGeo=[streaming::GeographicalElement|QualifiedName])?
	 //('about' aboutAGeo=[streaming::GeographicalElement|QualifiedName])?
	 //('with' withA+=Attached (',' withA+=Attached)*)?
;

Option returns streaming::Option:
	BooleanOption | GeoOption | IntOption | LanguageOption | SourceOption
;

GeoOption returns streaming::GeoOption:
	key=GeoOptionKey '=' value = [streaming::GeographicalElement|QualifiedName]
;

SourceOption returns streaming::SourceOption:
	key=SourceOptionKey '=' value = Source
;

LanguageOption returns streaming::LanguageOption:
	key=LanguageOptionKey '=' value = Language
;

BooleanOption returns streaming::BooleanOption:
	key=BooleanOptionKey '=' value = BOOLEAN
;

IntOption returns streaming::IntOption:
	key=IntOptionKey '=' value = INT
;

terminal BOOLEAN : "true" | "false";

enum GeoOptionKey returns streaming::GeoOptionKey:
	in = 'in'
;

enum SourceOptionKey returns streaming::SourceOptionKey:
	source = 'source'
;

enum LanguageOptionKey returns streaming::LanguageOptionKey:
	lang = 'language'
;

enum IntOptionKey returns streaming::IntOptionKey:
	lang = 'minretweet' | source = "minfavorite"
;

enum BooleanOptionKey returns streaming::BooleanOptionKey:
	inreplyto = "inreplyto" | retweet = "retweet" | favorite = "favorite"
;

enum UserOptionKey returns streaming::UserOptionKey:
	inreplyto = "inreplyto" | retweet = "retweet" | favorite = "favorite"
;	

enum WordListProperty returns streaming::WordListProperty:
	all = 'all' | any = 'any';

terminal DOUBLE returns ecore::EDouble: "-"?INT'.' INT;

enum Attached returns streaming::Attached:
	links = 'links' | videos = 'videos' | imgs = 'imgs'
;

enum Source returns streaming::Source:
	android = 'android' | ios = 'ios' | web = 'web' | all = 'all'
;

enum DistanceMesurement returns streaming::DistanceMesurement:
	kms = 'kms' | miles = 'miles' | mts = 'mts'
;

enum Language returns streaming::Language:
	en = 'english' | es = 'spanish' | zh = 'chinese' //....
;

