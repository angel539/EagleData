module eagledata.core.dsl.patterndata.GenerateStreamingDsl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.xtext.generator.*

var rootPath = ".."

Workflow {
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "eagledata.core.dsl.streamingdata"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				
				genericIde = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = true
				
				/*web = {
					enabled = true
				}*/
				createEclipseMetaData = true
			}
			code = {
				encoding = "windows-1252"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "eagledata.core.dsl.patterndata.StreamingDsl"
			fileExtensions = "streamd"
			
			//registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
			//registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
			//referencedResource = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"


			//fragment = scoping.ImportNamespacesScopingFragment2 {}
			//fragment = exporting.QualifiedNamesFragment2 {}
			/*fragment = builder.BuilderIntegrationFragment2 {}
			
			fragment = types.TypesGeneratorFragment2 {}
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}
			fragment = adapter.FragmentAdapter {
				fragment = ecore2xtext.FormatterFragment {}
			}*/
			
			serializer = {
				generateStub = false
			}
			scopeProvider = {
				generateStub = false
			}
			contentAssist = {
				generateStub = false
			}	
			junitSupport = {
				generateStub = false
			}

			validator = {
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
		}
	}
}
