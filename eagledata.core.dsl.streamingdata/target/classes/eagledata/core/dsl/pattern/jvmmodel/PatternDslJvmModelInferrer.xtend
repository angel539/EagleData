/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.pattern.jvmmodel

import com.google.inject.Inject
import eagledata.core.dsl.pattern.streamingDsl.Operation
import eagledata.core.dsl.pattern.streamingDsl.Phrase
import eagledata.core.dsl.pattern.streamingDsl.StreamingModel
import eagledata.core.dsl.pattern.streamingDsl.TermKey
import org.eclipse.xtext.common.types.JvmDeclaredType
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class PatternDslJvmModelInferrer extends AbstractModelInferrer {

    /**
     * convenience API to build and initialize JVM types and their members.
     */
	@Inject extension JvmTypesBuilder
	@Inject extension IQualifiedNameProvider
	//@Inject extension IJvmModelAssociations associations
	//@Inject extension Primitives
	//@Inject extension IJvmModelAssociations associations
	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 * 
	 * @param element
	 *            the model to create one or more
	 *            {@link JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the closure you pass to the returned
	 *            {@link IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
	 *            initializeLater(..)}.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
	def dispatch void infer(StreamingModel model, 
                        IJvmDeclaredTypeAcceptor acceptor, 
                        boolean isPreIndexingPhase) {
	 	val iterator = model.eAllContents
		
		while(iterator.hasNext){
			val object = iterator.next
			if(object instanceof Phrase){
				acceptor.accept(object.toClass(object.fullyQualifiedName)) [
					documentation = object.documentation
					addConstructors(object)
					
					for(feature: object.features) {
						switch feature {
							TermKey:
								addDelegateFeature(feature)
							Operation:
								addMethod(feature)
						}
					}
				]
			}
			
		}
	}
	
	def protected addConstructors(JvmDeclaredType inferredType, Phrase phrase) {
		val typeRefMessageSet = typeRef(Object)
		inferredType.members += phrase.toAnnotationType("MessageSet")
		
		inferredType.members += phrase.toConstructor [
			documentation = '''Creates a new «phrase.name».'''
			body = '''
				super();
			'''
		]
	}

	def protected addDelegateFeature(JvmDeclaredType inferredType, TermKey feature) {
		inferredType.members += feature.toField(feature.name, feature.type)
		
		inferredType.members += feature.toMethod('get' + feature.name.toFirstUpper, feature.type) [
			documentation = feature.documentation
			body = '''
				return this.«feature.name»;
			'''
		]
		inferredType.members += feature.toMethod('set' + feature.name.toFirstUpper, typeRef(Void.TYPE)) [
			documentation = feature.documentation
			parameters += feature.toParameter(feature.name, feature.type)
			body = '''
				this.«feature.name» = «feature.name»;
			'''
		]
	}

	def protected addMethod(JvmDeclaredType inferredType, Operation operation) {
		inferredType.members += operation.toMethod(operation.name, operation.returnType) [
			documentation = operation.documentation
			parameters += operation.parameters.map[operation.toParameter(name, parameterType)]
			body = operation.body
		]
	}
}
