/*
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.datadescription.ide.contentassist.antlr;

import com.google.inject.Inject;
import eagledata.core.dsl.datadescription.ide.contentassist.antlr.internal.InternalDataDescriptionDslParser;
import eagledata.core.dsl.datadescription.services.DataDescriptionDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class DataDescriptionDslParser extends AbstractContentAssistParser {

	@Inject
	private DataDescriptionDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDataDescriptionDslParser createParser() {
		InternalDataDescriptionDslParser result = new InternalDataDescriptionDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDataDescriptionAccess().getAlternatives(), "rule__DataDescription__Alternatives");
					put(grammarAccess.getFormatSpecificationAccess().getAlternatives(), "rule__FormatSpecification__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getNodeDeprecationAccess().getAlternatives(), "rule__NodeDeprecation__Alternatives");
					put(grammarAccess.getTypeSpecificationAccess().getAlternatives(), "rule__TypeSpecification__Alternatives");
					put(grammarAccess.getDataTypeAccess().getAlternatives_0(), "rule__DataType__Alternatives_0");
					put(grammarAccess.getFormatKindAccess().getAlternatives(), "rule__FormatKind__Alternatives");
					put(grammarAccess.getTypeKindAccess().getAlternatives(), "rule__TypeKind__Alternatives");
					put(grammarAccess.getDataModelAccess().getGroup(), "rule__DataModel__Group__0");
					put(grammarAccess.getDataModelAccess().getGroup_0(), "rule__DataModel__Group_0__0");
					put(grammarAccess.getDataModelAccess().getGroup_0_2(), "rule__DataModel__Group_0_2__0");
					put(grammarAccess.getDataModelAccess().getGroup_3(), "rule__DataModel__Group_3__0");
					put(grammarAccess.getDataSourceAccess().getGroup(), "rule__DataSource__Group__0");
					put(grammarAccess.getDataSourceAccess().getGroup_3(), "rule__DataSource__Group_3__0");
					put(grammarAccess.getDataSourceAccess().getGroup_3_1(), "rule__DataSource__Group_3_1__0");
					put(grammarAccess.getDataSourceAccess().getGroup_4(), "rule__DataSource__Group_4__0");
					put(grammarAccess.getDataSourceAccess().getGroup_4_2(), "rule__DataSource__Group_4_2__0");
					put(grammarAccess.getDataSourceAccess().getGroup_7(), "rule__DataSource__Group_7__0");
					put(grammarAccess.getDataSourceAccess().getGroup_7_1(), "rule__DataSource__Group_7_1__0");
					put(grammarAccess.getDataSourceAccess().getGroup_9(), "rule__DataSource__Group_9__0");
					put(grammarAccess.getDataSourceAccess().getGroup_9_2(), "rule__DataSource__Group_9_2__0");
					put(grammarAccess.getDataFragmentAccess().getGroup(), "rule__DataFragment__Group__0");
					put(grammarAccess.getDataFragmentAccess().getGroup_4(), "rule__DataFragment__Group_4__0");
					put(grammarAccess.getDataFragmentAccess().getGroup_4_1(), "rule__DataFragment__Group_4_1__0");
					put(grammarAccess.getDataFragmentAccess().getGroup_6(), "rule__DataFragment__Group_6__0");
					put(grammarAccess.getDataFragmentAccess().getGroup_6_2(), "rule__DataFragment__Group_6_2__0");
					put(grammarAccess.getOptionAccess().getGroup(), "rule__Option__Group__0");
					put(grammarAccess.getOptionAccess().getGroup_4(), "rule__Option__Group_4__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup(), "rule__CompositeNode__Group__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_3(), "rule__CompositeNode__Group_3__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_3_2(), "rule__CompositeNode__Group_3_2__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_4(), "rule__CompositeNode__Group_4__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_4_2(), "rule__CompositeNode__Group_4_2__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_4_2_1(), "rule__CompositeNode__Group_4_2_1__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_6(), "rule__CompositeNode__Group_6__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_6_2(), "rule__CompositeNode__Group_6_2__0");
					put(grammarAccess.getLeafNodeAccess().getGroup(), "rule__LeafNode__Group__0");
					put(grammarAccess.getRemoveAccess().getGroup(), "rule__Remove__Group__0");
					put(grammarAccess.getRetypeAccess().getGroup(), "rule__Retype__Group__0");
					put(grammarAccess.getRenameAccess().getGroup(), "rule__Rename__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup_1(), "rule__DataType__Group_1__0");
					put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup_2(), "rule__Reference__Group_2__0");
					put(grammarAccess.getDataModelAccess().getImportURIAssignment_0_1(), "rule__DataModel__ImportURIAssignment_0_1");
					put(grammarAccess.getDataModelAccess().getImportURIAssignment_0_2_1(), "rule__DataModel__ImportURIAssignment_0_2_1");
					put(grammarAccess.getDataModelAccess().getDescriptionsAssignment_2(), "rule__DataModel__DescriptionsAssignment_2");
					put(grammarAccess.getDataModelAccess().getDescriptionsAssignment_3_1(), "rule__DataModel__DescriptionsAssignment_3_1");
					put(grammarAccess.getDataSourceAccess().getFormatAssignment_1(), "rule__DataSource__FormatAssignment_1");
					put(grammarAccess.getDataSourceAccess().getNameAssignment_2(), "rule__DataSource__NameAssignment_2");
					put(grammarAccess.getDataSourceAccess().getLinkAssignment_3_0(), "rule__DataSource__LinkAssignment_3_0");
					put(grammarAccess.getDataSourceAccess().getLinkAssignment_3_1_1(), "rule__DataSource__LinkAssignment_3_1_1");
					put(grammarAccess.getDataSourceAccess().getFragmentsAssignment_4_1(), "rule__DataSource__FragmentsAssignment_4_1");
					put(grammarAccess.getDataSourceAccess().getFragmentsAssignment_4_2_1(), "rule__DataSource__FragmentsAssignment_4_2_1");
					put(grammarAccess.getDataSourceAccess().getNodesAssignment_7_0(), "rule__DataSource__NodesAssignment_7_0");
					put(grammarAccess.getDataSourceAccess().getNodesAssignment_7_1_1(), "rule__DataSource__NodesAssignment_7_1_1");
					put(grammarAccess.getDataSourceAccess().getOptionsAssignment_9_1(), "rule__DataSource__OptionsAssignment_9_1");
					put(grammarAccess.getDataSourceAccess().getOptionsAssignment_9_2_1(), "rule__DataSource__OptionsAssignment_9_2_1");
					put(grammarAccess.getDataFragmentAccess().getNameAssignment_1(), "rule__DataFragment__NameAssignment_1");
					put(grammarAccess.getDataFragmentAccess().getNodesAssignment_4_0(), "rule__DataFragment__NodesAssignment_4_0");
					put(grammarAccess.getDataFragmentAccess().getNodesAssignment_4_1_1(), "rule__DataFragment__NodesAssignment_4_1_1");
					put(grammarAccess.getDataFragmentAccess().getOptionsAssignment_6_1(), "rule__DataFragment__OptionsAssignment_6_1");
					put(grammarAccess.getDataFragmentAccess().getOptionsAssignment_6_2_1(), "rule__DataFragment__OptionsAssignment_6_2_1");
					put(grammarAccess.getFormatSpecificationAccess().getSpecialFormatAssignment_0(), "rule__FormatSpecification__SpecialFormatAssignment_0");
					put(grammarAccess.getFormatSpecificationAccess().getFormatAssignment_1(), "rule__FormatSpecification__FormatAssignment_1");
					put(grammarAccess.getOptionAccess().getKeyAssignment_0(), "rule__Option__KeyAssignment_0");
					put(grammarAccess.getOptionAccess().getValuesAssignment_3(), "rule__Option__ValuesAssignment_3");
					put(grammarAccess.getOptionAccess().getValuesAssignment_4_1(), "rule__Option__ValuesAssignment_4_1");
					put(grammarAccess.getCompositeNodeAccess().getEnvironmentAssignment_0(), "rule__CompositeNode__EnvironmentAssignment_0");
					put(grammarAccess.getCompositeNodeAccess().getNameAssignment_1(), "rule__CompositeNode__NameAssignment_1");
					put(grammarAccess.getCompositeNodeAccess().getRepresentedAsAssignment_2(), "rule__CompositeNode__RepresentedAsAssignment_2");
					put(grammarAccess.getCompositeNodeAccess().getExtendsAssignment_3_1(), "rule__CompositeNode__ExtendsAssignment_3_1");
					put(grammarAccess.getCompositeNodeAccess().getExtendsAssignment_3_2_1(), "rule__CompositeNode__ExtendsAssignment_3_2_1");
					put(grammarAccess.getCompositeNodeAccess().getSubnodesAssignment_4_2_0(), "rule__CompositeNode__SubnodesAssignment_4_2_0");
					put(grammarAccess.getCompositeNodeAccess().getSubnodesAssignment_4_2_1_1(), "rule__CompositeNode__SubnodesAssignment_4_2_1_1");
					put(grammarAccess.getCompositeNodeAccess().getOptionsAssignment_6_1(), "rule__CompositeNode__OptionsAssignment_6_1");
					put(grammarAccess.getCompositeNodeAccess().getOptionsAssignment_6_2_1(), "rule__CompositeNode__OptionsAssignment_6_2_1");
					put(grammarAccess.getLeafNodeAccess().getKeyAssignment_0(), "rule__LeafNode__KeyAssignment_0");
					put(grammarAccess.getLeafNodeAccess().getUniqueAssignment_1(), "rule__LeafNode__UniqueAssignment_1");
					put(grammarAccess.getLeafNodeAccess().getTypeAssignment_2(), "rule__LeafNode__TypeAssignment_2");
					put(grammarAccess.getLeafNodeAccess().getKeywordAssignment_3(), "rule__LeafNode__KeywordAssignment_3");
					put(grammarAccess.getLeafNodeAccess().getNameAssignment_4(), "rule__LeafNode__NameAssignment_4");
					put(grammarAccess.getLeafNodeAccess().getRepresentedAsAssignment_5(), "rule__LeafNode__RepresentedAsAssignment_5");
					put(grammarAccess.getRemoveAccess().getDeprecatedAssignment_2(), "rule__Remove__DeprecatedAssignment_2");
					put(grammarAccess.getRetypeAccess().getDeprecatedAssignment_2(), "rule__Retype__DeprecatedAssignment_2");
					put(grammarAccess.getRetypeAccess().getNewTypeAssignment_4(), "rule__Retype__NewTypeAssignment_4");
					put(grammarAccess.getRenameAccess().getDeprecatedAssignment_2(), "rule__Rename__DeprecatedAssignment_2");
					put(grammarAccess.getRenameAccess().getNewRepresentedAsAssignment_4(), "rule__Rename__NewRepresentedAsAssignment_4");
					put(grammarAccess.getDataTypeAccess().getSpecialTypeAssignment_0_0(), "rule__DataType__SpecialTypeAssignment_0_0");
					put(grammarAccess.getDataTypeAccess().getTypeAssignment_0_1(), "rule__DataType__TypeAssignment_0_1");
					put(grammarAccess.getDataTypeAccess().getMinAssignment_1_1(), "rule__DataType__MinAssignment_1_1");
					put(grammarAccess.getDataTypeAccess().getMaxAssignment_1_3(), "rule__DataType__MaxAssignment_1_3");
					put(grammarAccess.getReferenceAccess().getReferenceTypeAssignment_1(), "rule__Reference__ReferenceTypeAssignment_1");
					put(grammarAccess.getReferenceAccess().getMinAssignment_2_1(), "rule__Reference__MinAssignment_2_1");
					put(grammarAccess.getReferenceAccess().getMaxAssignment_2_3(), "rule__Reference__MaxAssignment_2_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalDataDescriptionDslParser typedParser = (InternalDataDescriptionDslParser) parser;
			typedParser.entryRuleDataModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DataDescriptionDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DataDescriptionDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
