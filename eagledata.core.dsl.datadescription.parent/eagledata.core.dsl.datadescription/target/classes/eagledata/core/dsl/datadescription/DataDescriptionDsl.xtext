grammar eagledata.core.dsl.datadescription.DataDescriptionDsl with org.eclipse.xtext.common.Terminals

generate dataDescriptionDsl "http://www.core.eagledata/dsl/datadescription/DataDescriptionDsl"

DataModel returns DataModel:
	('import' importURI+=STRING ("," importURI+=STRING)*)?
	'{' descriptions+=DataDescription ("," descriptions+=DataDescription)* '}'
;

DataDescription returns DataDescription:
	DataSource | DataFragment
;

DataSource returns DataSource:
	'description' format=FormatSpecification name=ID (link+=STRING (',' link+=STRING)*)? ('uses' fragments+=[DataFragment | ID] (',' fragments+=[DataFragment | STRING])*)? '=' '{'
		(nodes+=Node ( "," nodes+=Node)*)?
	'}' ('[' options+=Option ("," options+=Option)* ']')?
;

DataFragment returns DataFragment:
	'fragment' name=ID '=' '{'
		(nodes+=Node ( "," nodes+=Node)*)?
	'}'('[' options+=Option ("," options+=Option)* ']')?
;

FormatSpecification returns FormatSpecification:
	(specialFormat=STRING | format=FormatKind)
;

enum FormatKind returns FormatKind:
				CSV = 'CSV' | JSON = 'JSON' | XML = 'XML';

Option returns Option:
	key=STRING '=' '{' values+=STRING (',' values+=STRING)* '}'
;

Node returns Node:
	CompositeNode | LeafNode
;

CompositeNode returns CompositeNode:
	(environment?=">")? name=ID (representedAs=STRING)? 
	('extends' extends+=[CompositeNode | ID] (',' extends+=[CompositeNode | ID])*)? 
	('=' '('(subnodes+=Node ( "," subnodes+=Node)*)?)')'
	
	//((",")? deprecations += NodeDeprecation ("," deprecations+=NodeDeprecation)*)?')')? 
	('{' options += Option ( "," options+=Option)* '}')?
;

NodeDeprecation returns NodeDeprecation:
	Remove | Retype | Rename
;

LeafNode returns LeafNode:
	(key?='key')? (unique?='unique')? type=TypeSpecification (keyword?="#")?name=ID  (representedAs=STRING)?// ('{' options+=Option ( "," options+=Option)* '}' )?
;

Remove returns Remove:
	{Remove}
	'remove' deprecated=[LeafNode|ID]
;

Retype returns Retype:
	{Retype}
	'retype' deprecated=[LeafNode|ID] 'as' newType=TypeSpecification
;

Rename returns Rename:
	{Rename}
	'rename' deprecated=[LeafNode|ID] 'as' newRepresentedAs=ID
;

TypeSpecification returns TypeSpecification:
	DataType | Reference
;

DataType returns DataType:
	(specialType=STRING | type=TypeKind) ('['min=INT ',' (max=INT)?']')?
;

Reference returns Reference:
	"ref:"referenceType=[CompositeNode | STRING] ('['min=INT ',' (max=INT)?']')?
;

enum TypeKind returns TypeKind:
	string = 'string' | numeral = 'numeral' | date = 'date' | time = 'time' | year = 'year' | month = 'month' | day = 'day' | boolean = 'boolean' | place = 'place' | latitude = 'latitude' | longitude = 'longitude' | UTMe = 'UTMe' | UTMn = 'UTMn' | UTMz = 'UTMz' | UTMHemi = 'UTMHemi' | name = 'name' | familyname = 'familyname' | personalID = 'personalID'
;

/*
DataModel returns DataModel:
	{DataModel}
	('importURI' '{' importURI+=EString ( "," importURI+=EString)* '}' )?
	('descriptions' '{' descriptions+=DataDescription ( "," descriptions+=DataDescription)* '}' )?;

DataDescription returns DataDescription:
	DataSource | DataFragment;

Node returns Node:
	CompositeNode | LeafNode;

NodeDeprecation returns NodeDeprecation:
	Remove | Retype | Rename;

TypeSpecification returns general::TypeSpecification:
	DataType | Reference;


NamedElement returns general::NamedElement:
	Table;

EString returns ecore::EString:
	STRING | ID;

Option returns general::Option:
	'Option'
	'{'
		'key' key=EString
		('values' '{' values+=EString ( "," values+=EString)* '}' )?
	'}';

DataSource returns DataSource:
	'DataSource'
	name=EString
	'{'
		('link' '{' link+=EString ( "," link+=EString)* '}' )?
		('fragments' '(' fragments+=[DataFragment|EString] ( "," fragments+=[DataFragment|EString])* ')' )?
		('options' '{' options+=Option ( "," options+=Option)* '}' )?
		('nodes' '{' nodes+=Node ( "," nodes+=Node)* '}' )?
		'format' format=FormatSpecification
	'}';

DataFragment returns DataFragment:
	{DataFragment}
	'DataFragment'
	name=EString
	'{'
		('options' '{' options+=Option ( "," options+=Option)* '}' )?
		('nodes' '{' nodes+=Node ( "," nodes+=Node)* '}' )?
	'}';

CompositeNode returns CompositeNode:
	{CompositeNode}
	(environment?='environment')?
	'CompositeNode'
	name=EString
	'{'
		('representedAs' representedAs=EString)?
		('extends' '(' extends+=[CompositeNode|EString] ( "," extends+=[CompositeNode|EString])* ')' )?
		('options' '{' options+=Option ( "," options+=Option)* '}' )?
		('subnodes' '{' subnodes+=Node ( "," subnodes+=Node)* '}' )?
		('deprecations' '{' deprecations+=NodeDeprecation ( "," deprecations+=NodeDeprecation)* '}' )?
	'}';

LeafNode returns LeafNode:
	{LeafNode}
	(key?='key')?
	(unique?='unique')?
	(keyword?='keyword')?
	'LeafNode'
	name=EString
	'{'
		('representedAs' representedAs=EString)?
		('options' '{' options+=Option ( "," options+=Option)* '}' )?
		('type' type=TypeSpecification)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Remove returns Remove:
	'Remove'
	'{'
		'deprecated' deprecated=[LeafNode|EString]
	'}';

Retype returns Retype:
	'Retype'
	'{'
		'deprecated' deprecated=[LeafNode|EString]
		'newType' newType=TypeSpecification
	'}';

Rename returns Rename:
	'Rename'
	'{'
		('newRepresentedAs' newRepresentedAs=EString)?
		'deprecated' deprecated=[LeafNode|EString]
	'}';

EInt returns ecore::EInt:
	'-'? INT;

DataType returns general::DataType:
	{general::DataType}
	'DataType'
	'{'
		('max' max=EInt)?
		('min' min=EInt)?
		('specialType' specialType=EString)?
		('type' type=TypeKind)?
	'}';

Reference returns general::Reference:
	'Reference'
	'{'
		('max' max=EInt)?
		('min' min=EInt)?
		'referenceType' referenceType=[general::NamedElement|EString]
	'}';

enum TypeKind returns general::TypeKind:
				string = 'string' | numeral = 'numeral' | date = 'date' | time = 'time' | year = 'year' | month = 'month' | day = 'day' | boolean = 'boolean' | place = 'place' | latitude = 'latitude' | longitude = 'longitude' | UTMe = 'UTMe' | UTMn = 'UTMn' | UTMz = 'UTMz' | UTMHemi = 'UTMHemi' | name = 'name' | familyname = 'familyname' | personalID = 'personalID' | price = 'price' | coin = 'coin';

Table returns general::Table:
	{general::Table}
	(exportable?='exportable')?
	'Table'
	name=EString
	'{'
		('id' id=EString)?
		('description' description=EString)?
		('options' '{' options+=Option ( "," options+=Option)* '}' )?
	'}';

FormatSpecification returns general::FormatSpecification:
	{general::FormatSpecification}
	'FormatSpecification'
	specialFormat=EString
	'{'
		('format' format=FormatKind)?
	'}';

enum FormatKind returns general::FormatKind:
				CSV = 'CSV' | ODS = 'ODS' | GML = 'GML' | KML = 'KML' | JSON = 'JSON' | RDF = 'RDF' | RSS = 'RSS' | SHP = 'SHP' | WHS = 'WHS' | XML = 'XML' | HTML = 'HTML' | PDF = 'PDF' | XLS = 'XLS' | GoogleSheets = 'GoogleSheets';
*/
