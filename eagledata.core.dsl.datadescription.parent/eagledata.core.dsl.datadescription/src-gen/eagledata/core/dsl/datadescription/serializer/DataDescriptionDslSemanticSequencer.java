/*
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.datadescription.serializer;

import com.google.inject.Inject;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.CompositeNode;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.DataDescriptionDslPackage;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.DataFragment;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.DataModel;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.DataSource;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.DataType;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.FormatSpecification;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.LeafNode;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.Option;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.Reference;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.Remove;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.Rename;
import eagledata.core.dsl.datadescription.dataDescriptionDsl.Retype;
import eagledata.core.dsl.datadescription.services.DataDescriptionDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DataDescriptionDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DataDescriptionDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DataDescriptionDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DataDescriptionDslPackage.COMPOSITE_NODE:
				sequence_CompositeNode(context, (CompositeNode) semanticObject); 
				return; 
			case DataDescriptionDslPackage.DATA_FRAGMENT:
				sequence_DataFragment(context, (DataFragment) semanticObject); 
				return; 
			case DataDescriptionDslPackage.DATA_MODEL:
				sequence_DataModel(context, (DataModel) semanticObject); 
				return; 
			case DataDescriptionDslPackage.DATA_SOURCE:
				sequence_DataSource(context, (DataSource) semanticObject); 
				return; 
			case DataDescriptionDslPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case DataDescriptionDslPackage.FORMAT_SPECIFICATION:
				sequence_FormatSpecification(context, (FormatSpecification) semanticObject); 
				return; 
			case DataDescriptionDslPackage.LEAF_NODE:
				sequence_LeafNode(context, (LeafNode) semanticObject); 
				return; 
			case DataDescriptionDslPackage.OPTION:
				sequence_Option(context, (Option) semanticObject); 
				return; 
			case DataDescriptionDslPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case DataDescriptionDslPackage.REMOVE:
				sequence_Remove(context, (Remove) semanticObject); 
				return; 
			case DataDescriptionDslPackage.RENAME:
				sequence_Rename(context, (Rename) semanticObject); 
				return; 
			case DataDescriptionDslPackage.RETYPE:
				sequence_Retype(context, (Retype) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Node returns CompositeNode
	 *     CompositeNode returns CompositeNode
	 *
	 * Constraint:
	 *     (
	 *         environment?='>'? 
	 *         name=ID 
	 *         representedAs=STRING? 
	 *         (extends+=[CompositeNode|ID] extends+=[CompositeNode|ID]*)? 
	 *         (subnodes+=Node subnodes+=Node*)? 
	 *         (options+=Option options+=Option*)?
	 *     )
	 */
	protected void sequence_CompositeNode(ISerializationContext context, CompositeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataDescription returns DataFragment
	 *     DataFragment returns DataFragment
	 *
	 * Constraint:
	 *     (name=ID (nodes+=Node nodes+=Node*)? (options+=Option options+=Option*)?)
	 */
	protected void sequence_DataFragment(ISerializationContext context, DataFragment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataModel returns DataModel
	 *
	 * Constraint:
	 *     ((importURI+=STRING importURI+=STRING*)? descriptions+=DataDescription descriptions+=DataDescription*)
	 */
	protected void sequence_DataModel(ISerializationContext context, DataModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataDescription returns DataSource
	 *     DataSource returns DataSource
	 *
	 * Constraint:
	 *     (
	 *         format=FormatSpecification 
	 *         name=ID 
	 *         (link+=STRING link+=STRING*)? 
	 *         (fragments+=[DataFragment|ID] fragments+=[DataFragment|STRING]*)? 
	 *         (nodes+=Node nodes+=Node*)? 
	 *         (options+=Option options+=Option*)?
	 *     )
	 */
	protected void sequence_DataSource(ISerializationContext context, DataSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeSpecification returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     ((specialType=STRING | type=TypeKind) (min=INT max=INT?)?)
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormatSpecification returns FormatSpecification
	 *
	 * Constraint:
	 *     (specialFormat=STRING | format=FormatKind)
	 */
	protected void sequence_FormatSpecification(ISerializationContext context, FormatSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns LeafNode
	 *     LeafNode returns LeafNode
	 *
	 * Constraint:
	 *     (
	 *         key?='key'? 
	 *         unique?='unique'? 
	 *         type=TypeSpecification 
	 *         keyword?='#'? 
	 *         name=ID 
	 *         representedAs=STRING?
	 *     )
	 */
	protected void sequence_LeafNode(ISerializationContext context, LeafNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Option
	 *
	 * Constraint:
	 *     (key=STRING values+=STRING values+=STRING*)
	 */
	protected void sequence_Option(ISerializationContext context, Option semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeSpecification returns Reference
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (referenceType=[CompositeNode|STRING] (min=INT max=INT?)?)
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeDeprecation returns Remove
	 *     Remove returns Remove
	 *
	 * Constraint:
	 *     deprecated=[LeafNode|ID]
	 */
	protected void sequence_Remove(ISerializationContext context, Remove semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataDescriptionDslPackage.Literals.NODE_DEPRECATION__DEPRECATED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataDescriptionDslPackage.Literals.NODE_DEPRECATION__DEPRECATED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRemoveAccess().getDeprecatedLeafNodeIDTerminalRuleCall_2_0_1(), semanticObject.getDeprecated());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NodeDeprecation returns Rename
	 *     Rename returns Rename
	 *
	 * Constraint:
	 *     (deprecated=[LeafNode|ID] newRepresentedAs=ID)
	 */
	protected void sequence_Rename(ISerializationContext context, Rename semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataDescriptionDslPackage.Literals.NODE_DEPRECATION__DEPRECATED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataDescriptionDslPackage.Literals.NODE_DEPRECATION__DEPRECATED));
			if (transientValues.isValueTransient(semanticObject, DataDescriptionDslPackage.Literals.RENAME__NEW_REPRESENTED_AS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataDescriptionDslPackage.Literals.RENAME__NEW_REPRESENTED_AS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRenameAccess().getDeprecatedLeafNodeIDTerminalRuleCall_2_0_1(), semanticObject.getDeprecated());
		feeder.accept(grammarAccess.getRenameAccess().getNewRepresentedAsIDTerminalRuleCall_4_0(), semanticObject.getNewRepresentedAs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NodeDeprecation returns Retype
	 *     Retype returns Retype
	 *
	 * Constraint:
	 *     (deprecated=[LeafNode|ID] newType=TypeSpecification)
	 */
	protected void sequence_Retype(ISerializationContext context, Retype semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DataDescriptionDslPackage.Literals.NODE_DEPRECATION__DEPRECATED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataDescriptionDslPackage.Literals.NODE_DEPRECATION__DEPRECATED));
			if (transientValues.isValueTransient(semanticObject, DataDescriptionDslPackage.Literals.RETYPE__NEW_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DataDescriptionDslPackage.Literals.RETYPE__NEW_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRetypeAccess().getDeprecatedLeafNodeIDTerminalRuleCall_2_0_1(), semanticObject.getDeprecated());
		feeder.accept(grammarAccess.getRetypeAccess().getNewTypeTypeSpecificationParserRuleCall_4_0(), semanticObject.getNewType());
		feeder.finish();
	}
	
	
}
