/**
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.datadescription.dataDescriptionDsl.impl;

import eagledata.core.dsl.datadescription.dataDescriptionDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DataDescriptionDslFactoryImpl extends EFactoryImpl implements DataDescriptionDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DataDescriptionDslFactory init()
  {
    try
    {
      DataDescriptionDslFactory theDataDescriptionDslFactory = (DataDescriptionDslFactory)EPackage.Registry.INSTANCE.getEFactory(DataDescriptionDslPackage.eNS_URI);
      if (theDataDescriptionDslFactory != null)
      {
        return theDataDescriptionDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DataDescriptionDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataDescriptionDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DataDescriptionDslPackage.DATA_MODEL: return createDataModel();
      case DataDescriptionDslPackage.DATA_DESCRIPTION: return createDataDescription();
      case DataDescriptionDslPackage.DATA_SOURCE: return createDataSource();
      case DataDescriptionDslPackage.DATA_FRAGMENT: return createDataFragment();
      case DataDescriptionDslPackage.FORMAT_SPECIFICATION: return createFormatSpecification();
      case DataDescriptionDslPackage.OPTION: return createOption();
      case DataDescriptionDslPackage.NODE: return createNode();
      case DataDescriptionDslPackage.COMPOSITE_NODE: return createCompositeNode();
      case DataDescriptionDslPackage.NODE_DEPRECATION: return createNodeDeprecation();
      case DataDescriptionDslPackage.LEAF_NODE: return createLeafNode();
      case DataDescriptionDslPackage.REMOVE: return createRemove();
      case DataDescriptionDslPackage.RETYPE: return createRetype();
      case DataDescriptionDslPackage.RENAME: return createRename();
      case DataDescriptionDslPackage.TYPE_SPECIFICATION: return createTypeSpecification();
      case DataDescriptionDslPackage.DATA_TYPE: return createDataType();
      case DataDescriptionDslPackage.REFERENCE: return createReference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DataDescriptionDslPackage.FORMAT_KIND:
        return createFormatKindFromString(eDataType, initialValue);
      case DataDescriptionDslPackage.TYPE_KIND:
        return createTypeKindFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DataDescriptionDslPackage.FORMAT_KIND:
        return convertFormatKindToString(eDataType, instanceValue);
      case DataDescriptionDslPackage.TYPE_KIND:
        return convertTypeKindToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataModel createDataModel()
  {
    DataModelImpl dataModel = new DataModelImpl();
    return dataModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataDescription createDataDescription()
  {
    DataDescriptionImpl dataDescription = new DataDescriptionImpl();
    return dataDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataSource createDataSource()
  {
    DataSourceImpl dataSource = new DataSourceImpl();
    return dataSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataFragment createDataFragment()
  {
    DataFragmentImpl dataFragment = new DataFragmentImpl();
    return dataFragment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FormatSpecification createFormatSpecification()
  {
    FormatSpecificationImpl formatSpecification = new FormatSpecificationImpl();
    return formatSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Option createOption()
  {
    OptionImpl option = new OptionImpl();
    return option;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompositeNode createCompositeNode()
  {
    CompositeNodeImpl compositeNode = new CompositeNodeImpl();
    return compositeNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeDeprecation createNodeDeprecation()
  {
    NodeDeprecationImpl nodeDeprecation = new NodeDeprecationImpl();
    return nodeDeprecation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LeafNode createLeafNode()
  {
    LeafNodeImpl leafNode = new LeafNodeImpl();
    return leafNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Remove createRemove()
  {
    RemoveImpl remove = new RemoveImpl();
    return remove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Retype createRetype()
  {
    RetypeImpl retype = new RetypeImpl();
    return retype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rename createRename()
  {
    RenameImpl rename = new RenameImpl();
    return rename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeSpecification createTypeSpecification()
  {
    TypeSpecificationImpl typeSpecification = new TypeSpecificationImpl();
    return typeSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FormatKind createFormatKindFromString(EDataType eDataType, String initialValue)
  {
    FormatKind result = FormatKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFormatKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeKind createTypeKindFromString(EDataType eDataType, String initialValue)
  {
    TypeKind result = TypeKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTypeKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataDescriptionDslPackage getDataDescriptionDslPackage()
  {
    return (DataDescriptionDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DataDescriptionDslPackage getPackage()
  {
    return DataDescriptionDslPackage.eINSTANCE;
  }

} //DataDescriptionDslFactoryImpl
