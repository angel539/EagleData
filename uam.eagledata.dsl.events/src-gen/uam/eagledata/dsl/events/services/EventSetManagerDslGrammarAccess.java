/*
 * generated by Xtext 2.9.2
 */
package uam.eagledata.dsl.events.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EventSetManagerDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EventSetManagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.EventSetManager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_0_1_0 = (RuleCall)cImportedNamespaceAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cImportKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_0_2_1_0 = (RuleCall)cImportedNamespaceAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cGeosAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGeosGeographicalElementParserRuleCall_1_0_0 = (RuleCall)cGeosAssignment_1_0.eContents().get(0);
		private final Assignment cGeosAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGeosGeographicalElementParserRuleCall_1_1_0 = (RuleCall)cGeosAssignment_1_1.eContents().get(0);
		private final Assignment cEventsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_2_0 = (RuleCall)cEventsAssignment_2.eContents().get(0);
		private final Assignment cEventsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventsEventParserRuleCall_3_0 = (RuleCall)cEventsAssignment_3.eContents().get(0);
		
		//EventSetManager ecarules::EventSetManager:
		//	('import' importedNamespace+=QualifiedNameWithWildcard ('import' importedNamespace+=QualifiedNameWithWildcard)*)?
		//	(geos+=GeographicalElement geos+=GeographicalElement*)?
		//	events+=Event events+=Event*
		@Override public ParserRule getRule() { return rule; }
		
		//('import' importedNamespace+=QualifiedNameWithWildcard ('import' importedNamespace+=QualifiedNameWithWildcard)*)?
		//(geos+=GeographicalElement geos+=GeographicalElement*)? events+=Event events+=Event*
		public Group getGroup() { return cGroup; }
		
		//('import' importedNamespace+=QualifiedNameWithWildcard ('import' importedNamespace+=QualifiedNameWithWildcard)*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'import'
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }
		
		//importedNamespace+=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_0_1() { return cImportedNamespaceAssignment_0_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_0_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_0_1_0; }
		
		//('import' importedNamespace+=QualifiedNameWithWildcard)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'import'
		public Keyword getImportKeyword_0_2_0() { return cImportKeyword_0_2_0; }
		
		//importedNamespace+=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_0_2_1() { return cImportedNamespaceAssignment_0_2_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_0_2_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_0_2_1_0; }
		
		//(geos+=GeographicalElement geos+=GeographicalElement*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//geos+=GeographicalElement
		public Assignment getGeosAssignment_1_0() { return cGeosAssignment_1_0; }
		
		//GeographicalElement
		public RuleCall getGeosGeographicalElementParserRuleCall_1_0_0() { return cGeosGeographicalElementParserRuleCall_1_0_0; }
		
		//geos+=GeographicalElement*
		public Assignment getGeosAssignment_1_1() { return cGeosAssignment_1_1; }
		
		//GeographicalElement
		public RuleCall getGeosGeographicalElementParserRuleCall_1_1_0() { return cGeosGeographicalElementParserRuleCall_1_1_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_2() { return cEventsAssignment_2; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_2_0() { return cEventsEventParserRuleCall_2_0; }
		
		//events+=Event*
		public Assignment getEventsAssignment_3() { return cEventsAssignment_3; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_3_0() { return cEventsEventParserRuleCall_3_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class GeographicalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.GeographicalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPointParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GeographicalElement ecarules::GeographicalElement:
		//	Point | Region
		@Override public ParserRule getRule() { return rule; }
		
		//Point | Region
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Point
		public RuleCall getPointParserRuleCall_0() { return cPointParserRuleCall_0; }
		
		//Region
		public RuleCall getRegionParserRuleCall_1() { return cRegionParserRuleCall_1; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLatAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLatDOUBLETerminalRuleCall_3_0 = (RuleCall)cLatAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLongAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLongDOUBLETerminalRuleCall_5_0 = (RuleCall)cLongAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Point ecarules::Point:
		//	{ecarules::Point} name=EString '{' lat=DOUBLE "," long=DOUBLE '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::Point} name=EString '{' lat=DOUBLE "," long=DOUBLE '}'
		public Group getGroup() { return cGroup; }
		
		//{ecarules::Point}
		public Action getPointAction_0() { return cPointAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//lat=DOUBLE
		public Assignment getLatAssignment_3() { return cLatAssignment_3; }
		
		//DOUBLE
		public RuleCall getLatDOUBLETerminalRuleCall_3_0() { return cLatDOUBLETerminalRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//long=DOUBLE
		public Assignment getLongAssignment_5() { return cLongAssignment_5; }
		
		//DOUBLE
		public RuleCall getLongDOUBLETerminalRuleCall_5_0() { return cLongDOUBLETerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPointsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPointsPointParserRuleCall_3_0 = (RuleCall)cPointsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPointsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPointsPointParserRuleCall_4_1_0 = (RuleCall)cPointsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Region ecarules::Region:
		//	{ecarules::Region} name=EString '[' points+=Point (',' points+=Point)* ']'
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::Region} name=EString '[' points+=Point (',' points+=Point)* ']'
		public Group getGroup() { return cGroup; }
		
		//{ecarules::Region}
		public Action getRegionAction_0() { return cRegionAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//points+=Point
		public Assignment getPointsAssignment_3() { return cPointsAssignment_3; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_3_0() { return cPointsPointParserRuleCall_3_0; }
		
		//(',' points+=Point)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//points+=Point
		public Assignment getPointsAssignment_4_1() { return cPointsAssignment_4_1; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_4_1_0() { return cPointsPointParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cConnectionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDataconnectionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cDataconnectionsDataConnectionCrossReference_1_1_0 = (CrossReference)cDataconnectionsAssignment_1_1.eContents().get(0);
		private final RuleCall cDataconnectionsDataConnectionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cDataconnectionsDataConnectionCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAndKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cDataconnectionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cDataconnectionsDataConnectionCrossReference_1_2_1_0 = (CrossReference)cDataconnectionsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cDataconnectionsDataConnectionIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cDataconnectionsDataConnectionCrossReference_1_2_1_0.eContents().get(1);
		private final Keyword cPatternKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConceptsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConceptsConceptParserRuleCall_5_0 = (RuleCall)cConceptsAssignment_5.eContents().get(0);
		private final Assignment cConceptsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConceptsConceptParserRuleCall_6_0 = (RuleCall)cConceptsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cWhenAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cWhenConditionParserRuleCall_8_0_0 = (RuleCall)cWhenAssignment_8_0.eContents().get(0);
		private final Assignment cWhenAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cWhenConditionParserRuleCall_8_1_0 = (RuleCall)cWhenAssignment_8_1.eContents().get(0);
		
		//Event ecarules::Event:
		//	{ecarules::Event} ('connection' dataconnections+=[ecarules::DataConnection] ('and'
		//	dataconnections+=[ecarules::DataConnection])*)?
		//	'pattern' name=EString '{'
		//	concepts+=Concept concepts+=Concept*
		//	'}' (when+=Condition when+=Condition*)
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::Event} ('connection' dataconnections+=[ecarules::DataConnection] ('and'
		//dataconnections+=[ecarules::DataConnection])*)? 'pattern' name=EString '{' concepts+=Concept concepts+=Concept* '}'
		//(when+=Condition when+=Condition*)
		public Group getGroup() { return cGroup; }
		
		//{ecarules::Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//('connection' dataconnections+=[ecarules::DataConnection] ('and' dataconnections+=[ecarules::DataConnection])*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'connection'
		public Keyword getConnectionKeyword_1_0() { return cConnectionKeyword_1_0; }
		
		//dataconnections+=[ecarules::DataConnection]
		public Assignment getDataconnectionsAssignment_1_1() { return cDataconnectionsAssignment_1_1; }
		
		//[ecarules::DataConnection]
		public CrossReference getDataconnectionsDataConnectionCrossReference_1_1_0() { return cDataconnectionsDataConnectionCrossReference_1_1_0; }
		
		//ID
		public RuleCall getDataconnectionsDataConnectionIDTerminalRuleCall_1_1_0_1() { return cDataconnectionsDataConnectionIDTerminalRuleCall_1_1_0_1; }
		
		//('and' dataconnections+=[ecarules::DataConnection])*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'and'
		public Keyword getAndKeyword_1_2_0() { return cAndKeyword_1_2_0; }
		
		//dataconnections+=[ecarules::DataConnection]
		public Assignment getDataconnectionsAssignment_1_2_1() { return cDataconnectionsAssignment_1_2_1; }
		
		//[ecarules::DataConnection]
		public CrossReference getDataconnectionsDataConnectionCrossReference_1_2_1_0() { return cDataconnectionsDataConnectionCrossReference_1_2_1_0; }
		
		//ID
		public RuleCall getDataconnectionsDataConnectionIDTerminalRuleCall_1_2_1_0_1() { return cDataconnectionsDataConnectionIDTerminalRuleCall_1_2_1_0_1; }
		
		//'pattern'
		public Keyword getPatternKeyword_2() { return cPatternKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//concepts+=Concept
		public Assignment getConceptsAssignment_5() { return cConceptsAssignment_5; }
		
		//Concept
		public RuleCall getConceptsConceptParserRuleCall_5_0() { return cConceptsConceptParserRuleCall_5_0; }
		
		//concepts+=Concept*
		public Assignment getConceptsAssignment_6() { return cConceptsAssignment_6; }
		
		//Concept
		public RuleCall getConceptsConceptParserRuleCall_6_0() { return cConceptsConceptParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//(when+=Condition when+=Condition*)
		public Group getGroup_8() { return cGroup_8; }
		
		//when+=Condition
		public Assignment getWhenAssignment_8_0() { return cWhenAssignment_8_0; }
		
		//Condition
		public RuleCall getWhenConditionParserRuleCall_8_0_0() { return cWhenConditionParserRuleCall_8_0_0; }
		
		//when+=Condition*
		public Assignment getWhenAssignment_8_1() { return cWhenAssignment_8_1; }
		
		//Condition
		public RuleCall getWhenConditionParserRuleCall_8_1_0() { return cWhenConditionParserRuleCall_8_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGeoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cGeoGeographicalElementCrossReference_2_1_0 = (CrossReference)cGeoAssignment_2_1.eContents().get(0);
		private final RuleCall cGeoGeographicalElementIDTerminalRuleCall_2_1_0_1 = (RuleCall)cGeoGeographicalElementCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTriggersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTriggersActionParserRuleCall_3_1_0 = (RuleCall)cTriggersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cAndKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTriggersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTriggersActionParserRuleCall_3_2_1_0 = (RuleCall)cTriggersAssignment_3_2_1.eContents().get(0);
		
		//Condition ecarules::Condition:
		//	{ecarules::Condition} ('if' expression=Expression)? ('in' geo=[ecarules::GeographicalElement])? ('then'
		//	triggers+=Action ('and' triggers+=Action)*)
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::Condition} ('if' expression=Expression)? ('in' geo=[ecarules::GeographicalElement])? ('then' triggers+=Action
		//('and' triggers+=Action)*)
		public Group getGroup() { return cGroup; }
		
		//{ecarules::Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//('if' expression=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'if'
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
		
		//('in' geo=[ecarules::GeographicalElement])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//geo=[ecarules::GeographicalElement]
		public Assignment getGeoAssignment_2_1() { return cGeoAssignment_2_1; }
		
		//[ecarules::GeographicalElement]
		public CrossReference getGeoGeographicalElementCrossReference_2_1_0() { return cGeoGeographicalElementCrossReference_2_1_0; }
		
		//ID
		public RuleCall getGeoGeographicalElementIDTerminalRuleCall_2_1_0_1() { return cGeoGeographicalElementIDTerminalRuleCall_2_1_0_1; }
		
		//('then' triggers+=Action ('and' triggers+=Action)*)
		public Group getGroup_3() { return cGroup_3; }
		
		//'then'
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }
		
		//triggers+=Action
		public Assignment getTriggersAssignment_3_1() { return cTriggersAssignment_3_1; }
		
		//Action
		public RuleCall getTriggersActionParserRuleCall_3_1_0() { return cTriggersActionParserRuleCall_3_1_0; }
		
		//('and' triggers+=Action)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'and'
		public Keyword getAndKeyword_3_2_0() { return cAndKeyword_3_2_0; }
		
		//triggers+=Action
		public Assignment getTriggersAssignment_3_2_1() { return cTriggersAssignment_3_2_1; }
		
		//Action
		public RuleCall getTriggersActionParserRuleCall_3_2_1_0() { return cTriggersActionParserRuleCall_3_2_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLeftConceptCrossReference_1_0 = (CrossReference)cLeftAssignment_1.eContents().get(0);
		private final RuleCall cLeftConceptEStringParserRuleCall_1_0_1 = (RuleCall)cLeftConceptCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightLiteralParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//Expression ecarules::Expression:
		//	{ecarules::Expression} left=[ecarules::Concept|EString] '=' right=Literal
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::Expression} left=[ecarules::Concept|EString] '=' right=Literal
		public Group getGroup() { return cGroup; }
		
		//{ecarules::Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//left=[ecarules::Concept|EString]
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//[ecarules::Concept|EString]
		public CrossReference getLeftConceptCrossReference_1_0() { return cLeftConceptCrossReference_1_0; }
		
		//EString
		public RuleCall getLeftConceptEStringParserRuleCall_1_0_1() { return cLeftConceptEStringParserRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//right=Literal
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Literal
		public RuleCall getRightLiteralParserRuleCall_3_0() { return cRightLiteralParserRuleCall_3_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Literal ecarules::Literal:
		//	{ecarules::Literal} value=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::Literal} value=EString
		public Group getGroup() { return cGroup; }
		
		//{ecarules::Literal}
		public Action getLiteralAction_0() { return cLiteralAction_0; }
		
		//value=EString
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_1_0() { return cValueEStringParserRuleCall_1_0; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKeyConceptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegexConceptParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Concept ecarules::Concept:
		//	KeyConcept | RegexConcept
		@Override public ParserRule getRule() { return rule; }
		
		//KeyConcept | RegexConcept
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KeyConcept
		public RuleCall getKeyConceptParserRuleCall_0() { return cKeyConceptParserRuleCall_0; }
		
		//RegexConcept
		public RuleCall getRegexConceptParserRuleCall_1() { return cRegexConceptParserRuleCall_1; }
	}
	public class KeyConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.KeyConcept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeyConceptAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//KeyConcept ecarules::KeyConcept:
		//	{ecarules::KeyConcept} type=Type name=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::KeyConcept} type=Type name=EString
		public Group getGroup() { return cGroup; }
		
		//{ecarules::KeyConcept}
		public Action getKeyConceptAction_0() { return cKeyConceptAction_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_1_0() { return cTypeTypeEnumRuleCall_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class RegexConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.RegexConcept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegexConceptAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRegexAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRegexEStringParserRuleCall_4_0 = (RuleCall)cRegexAssignment_4.eContents().get(0);
		
		//RegexConcept ecarules::RegexConcept:
		//	{ecarules::RegexConcept} type=Type name=EString '=' regex=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::RegexConcept} type=Type name=EString '=' regex=EString
		public Group getGroup() { return cGroup; }
		
		//{ecarules::RegexConcept}
		public Action getRegexConceptAction_0() { return cRegexConceptAction_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_1_0() { return cTypeTypeEnumRuleCall_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//regex=EString
		public Assignment getRegexAssignment_4() { return cRegexAssignment_4; }
		
		//EString
		public RuleCall getRegexEStringParserRuleCall_4_0() { return cRegexEStringParserRuleCall_4_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Action ecarules::Action:
		//	ActionCall | QueryCall
		@Override public ParserRule getRule() { return rule; }
		
		//ActionCall | QueryCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActionCall
		public RuleCall getActionCallParserRuleCall_0() { return cActionCallParserRuleCall_0; }
		
		//QueryCall
		public RuleCall getQueryCallParserRuleCall_1() { return cQueryCallParserRuleCall_1; }
	}
	public class ActionParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.ActionParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ActionParam ecarules::ActionParam:
		//	ConceptParam | StringParam
		@Override public ParserRule getRule() { return rule; }
		
		//ConceptParam | StringParam
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConceptParam
		public RuleCall getConceptParamParserRuleCall_0() { return cConceptParamParserRuleCall_0; }
		
		//StringParam
		public RuleCall getStringParamParserRuleCall_1() { return cStringParamParserRuleCall_1; }
	}
	public class ConceptParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.ConceptParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConceptParamAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyEStringParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueConceptCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueConceptIDTerminalRuleCall_3_0_1 = (RuleCall)cValueConceptCrossReference_3_0.eContents().get(1);
		
		//ConceptParam ecarules::ConceptParam:
		//	{ecarules::ConceptParam} key=EString '<=' value=[ecarules::Concept]
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::ConceptParam} key=EString '<=' value=[ecarules::Concept]
		public Group getGroup() { return cGroup; }
		
		//{ecarules::ConceptParam}
		public Action getConceptParamAction_0() { return cConceptParamAction_0; }
		
		//key=EString
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_1_0() { return cKeyEStringParserRuleCall_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//value=[ecarules::Concept]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//[ecarules::Concept]
		public CrossReference getValueConceptCrossReference_3_0() { return cValueConceptCrossReference_3_0; }
		
		//ID
		public RuleCall getValueConceptIDTerminalRuleCall_3_0_1() { return cValueConceptIDTerminalRuleCall_3_0_1; }
	}
	public class StringParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.StringParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringParamAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyEStringParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//StringParam ecarules::StringParam:
		//	{ecarules::StringParam} key=EString '=' value=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::StringParam} key=EString '=' value=EString
		public Group getGroup() { return cGroup; }
		
		//{ecarules::StringParam}
		public Action getStringParamAction_0() { return cStringParamAction_0; }
		
		//key=EString
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_1_0() { return cKeyEStringParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=EString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_0() { return cValueEStringParserRuleCall_3_0; }
	}
	public class ActionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.ActionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCallsActionExecutableExtensionCrossReference_1_0 = (CrossReference)cCallsAssignment_1.eContents().get(0);
		private final RuleCall cCallsActionExecutableExtensionIDTerminalRuleCall_1_0_1 = (RuleCall)cCallsActionExecutableExtensionCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionParamsActionParamParserRuleCall_2_1_0 = (RuleCall)cActionParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cActionParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cActionParamsActionParamParserRuleCall_2_2_1_0 = (RuleCall)cActionParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ActionCall ecarules::ActionCall:
		//	{ecarules::ActionCall} calls=[ecarules::ActionExecutableExtension] ('(' actionParams+=ActionParam (','
		//	actionParams+=ActionParam)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::ActionCall} calls=[ecarules::ActionExecutableExtension] ('(' actionParams+=ActionParam (','
		//actionParams+=ActionParam)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{ecarules::ActionCall}
		public Action getActionCallAction_0() { return cActionCallAction_0; }
		
		//calls=[ecarules::ActionExecutableExtension]
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }
		
		//[ecarules::ActionExecutableExtension]
		public CrossReference getCallsActionExecutableExtensionCrossReference_1_0() { return cCallsActionExecutableExtensionCrossReference_1_0; }
		
		//ID
		public RuleCall getCallsActionExecutableExtensionIDTerminalRuleCall_1_0_1() { return cCallsActionExecutableExtensionIDTerminalRuleCall_1_0_1; }
		
		//('(' actionParams+=ActionParam (',' actionParams+=ActionParam)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//actionParams+=ActionParam
		public Assignment getActionParamsAssignment_2_1() { return cActionParamsAssignment_2_1; }
		
		//ActionParam
		public RuleCall getActionParamsActionParamParserRuleCall_2_1_0() { return cActionParamsActionParamParserRuleCall_2_1_0; }
		
		//(',' actionParams+=ActionParam)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//actionParams+=ActionParam
		public Assignment getActionParamsAssignment_2_2_1() { return cActionParamsAssignment_2_2_1; }
		
		//ActionParam
		public RuleCall getActionParamsActionParamParserRuleCall_2_2_1_0() { return cActionParamsActionParamParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class QueryCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.QueryCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQueryCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSelectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSelectSelectCrossReference_1_0 = (CrossReference)cSelectAssignment_1.eContents().get(0);
		private final RuleCall cSelectSelectQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cSelectSelectCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueryParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQueryParamsParamValueParserRuleCall_3_0 = (RuleCall)cQueryParamsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cQueryParamsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQueryParamsParamValueParserRuleCall_4_1_0 = (RuleCall)cQueryParamsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMethodAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMethodMethodParserRuleCall_7_0 = (RuleCall)cMethodAssignment_7.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCallsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cCallsActionExecutableExtensionCrossReference_9_0 = (CrossReference)cCallsAssignment_9.eContents().get(0);
		private final RuleCall cCallsActionExecutableExtensionIDTerminalRuleCall_9_0_1 = (RuleCall)cCallsActionExecutableExtensionCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cActionParamsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cActionParamsActionParamParserRuleCall_10_1_0 = (RuleCall)cActionParamsAssignment_10_1.eContents().get(0);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Keyword cCommaKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Assignment cActionParamsAssignment_10_2_1 = (Assignment)cGroup_10_2.eContents().get(1);
		private final RuleCall cActionParamsActionParamParserRuleCall_10_2_1_0 = (RuleCall)cActionParamsAssignment_10_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		
		//QueryCall ecarules::QueryCall:
		//	{ecarules::QueryCall} select=[query::Select|QualifiedName]
		//	'(' queryParams+=ParamValue (',' queryParams+=ParamValue)* ')' '.' method=Method
		//	'->'
		//	calls=[ecarules::ActionExecutableExtension] ('(' actionParams+=ActionParam (',' actionParams+=ActionParam)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::QueryCall} select=[query::Select|QualifiedName] '(' queryParams+=ParamValue (',' queryParams+=ParamValue)*
		//')' '.' method=Method '->' calls=[ecarules::ActionExecutableExtension] ('(' actionParams+=ActionParam (','
		//actionParams+=ActionParam)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{ecarules::QueryCall}
		public Action getQueryCallAction_0() { return cQueryCallAction_0; }
		
		//select=[query::Select|QualifiedName]
		public Assignment getSelectAssignment_1() { return cSelectAssignment_1; }
		
		//[query::Select|QualifiedName]
		public CrossReference getSelectSelectCrossReference_1_0() { return cSelectSelectCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getSelectSelectQualifiedNameParserRuleCall_1_0_1() { return cSelectSelectQualifiedNameParserRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//queryParams+=ParamValue
		public Assignment getQueryParamsAssignment_3() { return cQueryParamsAssignment_3; }
		
		//ParamValue
		public RuleCall getQueryParamsParamValueParserRuleCall_3_0() { return cQueryParamsParamValueParserRuleCall_3_0; }
		
		//(',' queryParams+=ParamValue)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//queryParams+=ParamValue
		public Assignment getQueryParamsAssignment_4_1() { return cQueryParamsAssignment_4_1; }
		
		//ParamValue
		public RuleCall getQueryParamsParamValueParserRuleCall_4_1_0() { return cQueryParamsParamValueParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//method=Method
		public Assignment getMethodAssignment_7() { return cMethodAssignment_7; }
		
		//Method
		public RuleCall getMethodMethodParserRuleCall_7_0() { return cMethodMethodParserRuleCall_7_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_8() { return cHyphenMinusGreaterThanSignKeyword_8; }
		
		//calls=[ecarules::ActionExecutableExtension]
		public Assignment getCallsAssignment_9() { return cCallsAssignment_9; }
		
		//[ecarules::ActionExecutableExtension]
		public CrossReference getCallsActionExecutableExtensionCrossReference_9_0() { return cCallsActionExecutableExtensionCrossReference_9_0; }
		
		//ID
		public RuleCall getCallsActionExecutableExtensionIDTerminalRuleCall_9_0_1() { return cCallsActionExecutableExtensionIDTerminalRuleCall_9_0_1; }
		
		//('(' actionParams+=ActionParam (',' actionParams+=ActionParam)* ')')?
		public Group getGroup_10() { return cGroup_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_0() { return cLeftParenthesisKeyword_10_0; }
		
		//actionParams+=ActionParam
		public Assignment getActionParamsAssignment_10_1() { return cActionParamsAssignment_10_1; }
		
		//ActionParam
		public RuleCall getActionParamsActionParamParserRuleCall_10_1_0() { return cActionParamsActionParamParserRuleCall_10_1_0; }
		
		//(',' actionParams+=ActionParam)*
		public Group getGroup_10_2() { return cGroup_10_2; }
		
		//','
		public Keyword getCommaKeyword_10_2_0() { return cCommaKeyword_10_2_0; }
		
		//actionParams+=ActionParam
		public Assignment getActionParamsAssignment_10_2_1() { return cActionParamsAssignment_10_2_1; }
		
		//ActionParam
		public RuleCall getActionParamsActionParamParserRuleCall_10_2_1_0() { return cActionParamsActionParamParserRuleCall_10_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_3() { return cRightParenthesisKeyword_10_3; }
	}
	public class ParamValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.ParamValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParamValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParamQueryParamCrossReference_1_0 = (CrossReference)cParamAssignment_1.eContents().get(0);
		private final RuleCall cParamQueryParamQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cParamQueryParamCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueConceptCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueConceptIDTerminalRuleCall_3_0_1 = (RuleCall)cValueConceptCrossReference_3_0.eContents().get(1);
		
		//ParamValue ecarules::ParamValue:
		//	{ecarules::ParamValue} param=[query::QueryParam|QualifiedName] ':' value=[ecarules::Concept]
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::ParamValue} param=[query::QueryParam|QualifiedName] ':' value=[ecarules::Concept]
		public Group getGroup() { return cGroup; }
		
		//{ecarules::ParamValue}
		public Action getParamValueAction_0() { return cParamValueAction_0; }
		
		//param=[query::QueryParam|QualifiedName]
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }
		
		//[query::QueryParam|QualifiedName]
		public CrossReference getParamQueryParamCrossReference_1_0() { return cParamQueryParamCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getParamQueryParamQualifiedNameParserRuleCall_1_0_1() { return cParamQueryParamQualifiedNameParserRuleCall_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=[ecarules::Concept]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//[ecarules::Concept]
		public CrossReference getValueConceptCrossReference_3_0() { return cValueConceptCrossReference_3_0; }
		
		//ID
		public RuleCall getValueConceptIDTerminalRuleCall_3_0_1() { return cValueConceptIDTerminalRuleCall_3_0_1; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Method");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFirstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLastParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Method ecarules::Method:
		//	First | Last
		@Override public ParserRule getRule() { return rule; }
		
		//First | Last
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//First
		public RuleCall getFirstParserRuleCall_0() { return cFirstParserRuleCall_0; }
		
		//Last
		public RuleCall getLastParserRuleCall_1() { return cLastParserRuleCall_1; }
	}
	public class FirstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.First");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFirstAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFirstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//First ecarules::First:
		//	{ecarules::First}
		//	'first'
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::First} 'first'
		public Group getGroup() { return cGroup; }
		
		//{ecarules::First}
		public Action getFirstAction_0() { return cFirstAction_0; }
		
		//'first'
		public Keyword getFirstKeyword_1() { return cFirstKeyword_1; }
	}
	public class LastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Last");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLastAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLastKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Last ecarules::Last:
		//	{ecarules::Last}
		//	'last'
		@Override public ParserRule getRule() { return rule; }
		
		//{ecarules::Last} 'last'
		public Group getGroup() { return cGroup; }
		
		//{ecarules::Last}
		public Action getLastAction_0() { return cLastAction_0; }
		
		//'last'
		public Keyword getLastKeyword_1() { return cLastKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFloatFloatKeyword_3_0 = (Keyword)cFloatEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDoubleDoubleKeyword_4_0 = (Keyword)cDoubleEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Type returns ecarules::Type:
		//	String | Int | Boolean | Float | Double;
		public EnumRule getRule() { return rule; }
		
		//String | Int | Boolean | Float | Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//Int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }
		
		//'Int'
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
		
		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }
		
		//'Boolean'
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
		
		//Float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_3() { return cFloatEnumLiteralDeclaration_3; }
		
		//'Float'
		public Keyword getFloatFloatKeyword_3_0() { return cFloatFloatKeyword_3_0; }
		
		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_4() { return cDoubleEnumLiteralDeclaration_4; }
		
		//'Double'
		public Keyword getDoubleDoubleKeyword_4_0() { return cDoubleDoubleKeyword_4_0; }
	}
	
	private final EventSetManagerElements pEventSetManager;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final GeographicalElementElements pGeographicalElement;
	private final PointElements pPoint;
	private final RegionElements pRegion;
	private final TerminalRule tDOUBLE;
	private final EventElements pEvent;
	private final ConditionElements pCondition;
	private final ExpressionElements pExpression;
	private final LiteralElements pLiteral;
	private final ConceptElements pConcept;
	private final KeyConceptElements pKeyConcept;
	private final RegexConceptElements pRegexConcept;
	private final ActionElements pAction;
	private final ActionParamElements pActionParam;
	private final ConceptParamElements pConceptParam;
	private final StringParamElements pStringParam;
	private final ActionCallElements pActionCall;
	private final QueryCallElements pQueryCall;
	private final ParamValueElements pParamValue;
	private final MethodElements pMethod;
	private final FirstElements pFirst;
	private final LastElements pLast;
	private final EStringElements pEString;
	private final TypeElements eType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EventSetManagerDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEventSetManager = new EventSetManagerElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pGeographicalElement = new GeographicalElementElements();
		this.pPoint = new PointElements();
		this.pRegion = new RegionElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.DOUBLE");
		this.pEvent = new EventElements();
		this.pCondition = new ConditionElements();
		this.pExpression = new ExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pConcept = new ConceptElements();
		this.pKeyConcept = new KeyConceptElements();
		this.pRegexConcept = new RegexConceptElements();
		this.pAction = new ActionElements();
		this.pActionParam = new ActionParamElements();
		this.pConceptParam = new ConceptParamElements();
		this.pStringParam = new StringParamElements();
		this.pActionCall = new ActionCallElements();
		this.pQueryCall = new QueryCallElements();
		this.pParamValue = new ParamValueElements();
		this.pMethod = new MethodElements();
		this.pFirst = new FirstElements();
		this.pLast = new LastElements();
		this.pEString = new EStringElements();
		this.eType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uam.eagledata.dsl.events.EventSetManagerDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EventSetManager ecarules::EventSetManager:
	//	('import' importedNamespace+=QualifiedNameWithWildcard ('import' importedNamespace+=QualifiedNameWithWildcard)*)?
	//	(geos+=GeographicalElement geos+=GeographicalElement*)?
	//	events+=Event events+=Event*
	public EventSetManagerElements getEventSetManagerAccess() {
		return pEventSetManager;
	}
	
	public ParserRule getEventSetManagerRule() {
		return getEventSetManagerAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//GeographicalElement ecarules::GeographicalElement:
	//	Point | Region
	public GeographicalElementElements getGeographicalElementAccess() {
		return pGeographicalElement;
	}
	
	public ParserRule getGeographicalElementRule() {
		return getGeographicalElementAccess().getRule();
	}
	
	//Point ecarules::Point:
	//	{ecarules::Point} name=EString '{' lat=DOUBLE "," long=DOUBLE '}'
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//Region ecarules::Region:
	//	{ecarules::Region} name=EString '[' points+=Point (',' points+=Point)* ']'
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//Event ecarules::Event:
	//	{ecarules::Event} ('connection' dataconnections+=[ecarules::DataConnection] ('and'
	//	dataconnections+=[ecarules::DataConnection])*)?
	//	'pattern' name=EString '{'
	//	concepts+=Concept concepts+=Concept*
	//	'}' (when+=Condition when+=Condition*)
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Condition ecarules::Condition:
	//	{ecarules::Condition} ('if' expression=Expression)? ('in' geo=[ecarules::GeographicalElement])? ('then'
	//	triggers+=Action ('and' triggers+=Action)*)
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Expression ecarules::Expression:
	//	{ecarules::Expression} left=[ecarules::Concept|EString] '=' right=Literal
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Literal ecarules::Literal:
	//	{ecarules::Literal} value=EString
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//Concept ecarules::Concept:
	//	KeyConcept | RegexConcept
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//KeyConcept ecarules::KeyConcept:
	//	{ecarules::KeyConcept} type=Type name=EString
	public KeyConceptElements getKeyConceptAccess() {
		return pKeyConcept;
	}
	
	public ParserRule getKeyConceptRule() {
		return getKeyConceptAccess().getRule();
	}
	
	//RegexConcept ecarules::RegexConcept:
	//	{ecarules::RegexConcept} type=Type name=EString '=' regex=EString
	public RegexConceptElements getRegexConceptAccess() {
		return pRegexConcept;
	}
	
	public ParserRule getRegexConceptRule() {
		return getRegexConceptAccess().getRule();
	}
	
	//Action ecarules::Action:
	//	ActionCall | QueryCall
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//ActionParam ecarules::ActionParam:
	//	ConceptParam | StringParam
	public ActionParamElements getActionParamAccess() {
		return pActionParam;
	}
	
	public ParserRule getActionParamRule() {
		return getActionParamAccess().getRule();
	}
	
	//ConceptParam ecarules::ConceptParam:
	//	{ecarules::ConceptParam} key=EString '<=' value=[ecarules::Concept]
	public ConceptParamElements getConceptParamAccess() {
		return pConceptParam;
	}
	
	public ParserRule getConceptParamRule() {
		return getConceptParamAccess().getRule();
	}
	
	//StringParam ecarules::StringParam:
	//	{ecarules::StringParam} key=EString '=' value=EString
	public StringParamElements getStringParamAccess() {
		return pStringParam;
	}
	
	public ParserRule getStringParamRule() {
		return getStringParamAccess().getRule();
	}
	
	//ActionCall ecarules::ActionCall:
	//	{ecarules::ActionCall} calls=[ecarules::ActionExecutableExtension] ('(' actionParams+=ActionParam (','
	//	actionParams+=ActionParam)* ')')?
	public ActionCallElements getActionCallAccess() {
		return pActionCall;
	}
	
	public ParserRule getActionCallRule() {
		return getActionCallAccess().getRule();
	}
	
	//QueryCall ecarules::QueryCall:
	//	{ecarules::QueryCall} select=[query::Select|QualifiedName]
	//	'(' queryParams+=ParamValue (',' queryParams+=ParamValue)* ')' '.' method=Method
	//	'->'
	//	calls=[ecarules::ActionExecutableExtension] ('(' actionParams+=ActionParam (',' actionParams+=ActionParam)* ')')?
	public QueryCallElements getQueryCallAccess() {
		return pQueryCall;
	}
	
	public ParserRule getQueryCallRule() {
		return getQueryCallAccess().getRule();
	}
	
	//ParamValue ecarules::ParamValue:
	//	{ecarules::ParamValue} param=[query::QueryParam|QualifiedName] ':' value=[ecarules::Concept]
	public ParamValueElements getParamValueAccess() {
		return pParamValue;
	}
	
	public ParserRule getParamValueRule() {
		return getParamValueAccess().getRule();
	}
	
	//Method ecarules::Method:
	//	First | Last
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//First ecarules::First:
	//	{ecarules::First}
	//	'first'
	public FirstElements getFirstAccess() {
		return pFirst;
	}
	
	public ParserRule getFirstRule() {
		return getFirstAccess().getRule();
	}
	
	//Last ecarules::Last:
	//	{ecarules::Last}
	//	'last'
	public LastElements getLastAccess() {
		return pLast;
	}
	
	public ParserRule getLastRule() {
		return getLastAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum Type returns ecarules::Type:
	//	String | Int | Boolean | Float | Double;
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
