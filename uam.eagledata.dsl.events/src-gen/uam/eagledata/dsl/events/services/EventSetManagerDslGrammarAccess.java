/*
 * generated by Xtext 2.9.2
 */
package uam.eagledata.dsl.events.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EventSetManagerDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EventSetManagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.EventSetManager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGeosAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGeosGeographicalElementParserRuleCall_0_0 = (RuleCall)cGeosAssignment_0.eContents().get(0);
		private final Assignment cGeosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGeosGeographicalElementParserRuleCall_1_0 = (RuleCall)cGeosAssignment_1.eContents().get(0);
		private final Assignment cEventsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_2_0 = (RuleCall)cEventsAssignment_2.eContents().get(0);
		private final Assignment cEventsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventsEventParserRuleCall_3_0 = (RuleCall)cEventsAssignment_3.eContents().get(0);
		
		//EventSetManager events::EventSetManager:
		//	geos+=GeographicalElement geos+=GeographicalElement*
		//	events+=Event events+=Event*
		@Override public ParserRule getRule() { return rule; }
		
		//geos+=GeographicalElement geos+=GeographicalElement* events+=Event events+=Event*
		public Group getGroup() { return cGroup; }
		
		//geos+=GeographicalElement
		public Assignment getGeosAssignment_0() { return cGeosAssignment_0; }
		
		//GeographicalElement
		public RuleCall getGeosGeographicalElementParserRuleCall_0_0() { return cGeosGeographicalElementParserRuleCall_0_0; }
		
		//geos+=GeographicalElement*
		public Assignment getGeosAssignment_1() { return cGeosAssignment_1; }
		
		//GeographicalElement
		public RuleCall getGeosGeographicalElementParserRuleCall_1_0() { return cGeosGeographicalElementParserRuleCall_1_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_2() { return cEventsAssignment_2; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_2_0() { return cEventsEventParserRuleCall_2_0; }
		
		//events+=Event*
		public Assignment getEventsAssignment_3() { return cEventsAssignment_3; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_3_0() { return cEventsEventParserRuleCall_3_0; }
	}
	public class GeographicalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.GeographicalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPointParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GeographicalElement events::GeographicalElement:
		//	Point | Region
		@Override public ParserRule getRule() { return rule; }
		
		//Point | Region
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Point
		public RuleCall getPointParserRuleCall_0() { return cPointParserRuleCall_0; }
		
		//Region
		public RuleCall getRegionParserRuleCall_1() { return cRegionParserRuleCall_1; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLatAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLatDOUBLETerminalRuleCall_3_0 = (RuleCall)cLatAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLongAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLongDOUBLETerminalRuleCall_5_0 = (RuleCall)cLongAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Point events::Point:
		//	{events::Point} name=EString '{' lat=DOUBLE "," long=DOUBLE '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{events::Point} name=EString '{' lat=DOUBLE "," long=DOUBLE '}'
		public Group getGroup() { return cGroup; }
		
		//{events::Point}
		public Action getPointAction_0() { return cPointAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//lat=DOUBLE
		public Assignment getLatAssignment_3() { return cLatAssignment_3; }
		
		//DOUBLE
		public RuleCall getLatDOUBLETerminalRuleCall_3_0() { return cLatDOUBLETerminalRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//long=DOUBLE
		public Assignment getLongAssignment_5() { return cLongAssignment_5; }
		
		//DOUBLE
		public RuleCall getLongDOUBLETerminalRuleCall_5_0() { return cLongDOUBLETerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPointsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPointsPointParserRuleCall_3_0 = (RuleCall)cPointsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPointsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPointsPointParserRuleCall_4_1_0 = (RuleCall)cPointsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Region events::Region:
		//	{events::Region} name=EString '[' points+=Point (',' points+=Point)* ']'
		@Override public ParserRule getRule() { return rule; }
		
		//{events::Region} name=EString '[' points+=Point (',' points+=Point)* ']'
		public Group getGroup() { return cGroup; }
		
		//{events::Region}
		public Action getRegionAction_0() { return cRegionAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//points+=Point
		public Assignment getPointsAssignment_3() { return cPointsAssignment_3; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_3_0() { return cPointsPointParserRuleCall_3_0; }
		
		//(',' points+=Point)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//points+=Point
		public Assignment getPointsAssignment_4_1() { return cPointsAssignment_4_1; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_4_1_0() { return cPointsPointParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cConnectionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDataconnectionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDataconnectionEStringParserRuleCall_1_1_0 = (RuleCall)cDataconnectionAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAndKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cDataconnectionAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cDataconnectionEStringParserRuleCall_1_2_1_0 = (RuleCall)cDataconnectionAssignment_1_2_1.eContents().get(0);
		private final Keyword cPatternKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGeoAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cGeoGeographicalElementCrossReference_4_1_0 = (CrossReference)cGeoAssignment_4_1.eContents().get(0);
		private final RuleCall cGeoGeographicalElementIDTerminalRuleCall_4_1_0_1 = (RuleCall)cGeoGeographicalElementCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConceptsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConceptsConceptParserRuleCall_6_0 = (RuleCall)cConceptsAssignment_6.eContents().get(0);
		private final Assignment cConceptsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConceptsConceptParserRuleCall_7_0 = (RuleCall)cConceptsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cIfKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cWhenAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cWhenConditionParserRuleCall_9_1_0 = (RuleCall)cWhenAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cThenKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cTriggersAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cTriggersActionParserRuleCall_10_1_0 = (RuleCall)cTriggersAssignment_10_1.eContents().get(0);
		private final Assignment cTriggersAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cTriggersActionParserRuleCall_10_2_0 = (RuleCall)cTriggersAssignment_10_2.eContents().get(0);
		
		//Event events::Event:
		//	{events::Event} ('connection' dataconnection+=EString ('and' dataconnection+=EString)*)?
		//	'pattern' name=EString ('in' geo=[events::GeographicalElement])? '{'
		//	concepts+=Concept concepts+=Concept*
		//	'}' ('if' when=Condition)? ('then' triggers+=Action triggers+=Action*)
		@Override public ParserRule getRule() { return rule; }
		
		//{events::Event} ('connection' dataconnection+=EString ('and' dataconnection+=EString)*)? 'pattern' name=EString ('in'
		//geo=[events::GeographicalElement])? '{' concepts+=Concept concepts+=Concept* '}' ('if' when=Condition)? ('then'
		//triggers+=Action triggers+=Action*)
		public Group getGroup() { return cGroup; }
		
		//{events::Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//('connection' dataconnection+=EString ('and' dataconnection+=EString)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'connection'
		public Keyword getConnectionKeyword_1_0() { return cConnectionKeyword_1_0; }
		
		//dataconnection+=EString
		public Assignment getDataconnectionAssignment_1_1() { return cDataconnectionAssignment_1_1; }
		
		//EString
		public RuleCall getDataconnectionEStringParserRuleCall_1_1_0() { return cDataconnectionEStringParserRuleCall_1_1_0; }
		
		//('and' dataconnection+=EString)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'and'
		public Keyword getAndKeyword_1_2_0() { return cAndKeyword_1_2_0; }
		
		//dataconnection+=EString
		public Assignment getDataconnectionAssignment_1_2_1() { return cDataconnectionAssignment_1_2_1; }
		
		//EString
		public RuleCall getDataconnectionEStringParserRuleCall_1_2_1_0() { return cDataconnectionEStringParserRuleCall_1_2_1_0; }
		
		//'pattern'
		public Keyword getPatternKeyword_2() { return cPatternKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('in' geo=[events::GeographicalElement])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'in'
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }
		
		//geo=[events::GeographicalElement]
		public Assignment getGeoAssignment_4_1() { return cGeoAssignment_4_1; }
		
		//[events::GeographicalElement]
		public CrossReference getGeoGeographicalElementCrossReference_4_1_0() { return cGeoGeographicalElementCrossReference_4_1_0; }
		
		//ID
		public RuleCall getGeoGeographicalElementIDTerminalRuleCall_4_1_0_1() { return cGeoGeographicalElementIDTerminalRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//concepts+=Concept
		public Assignment getConceptsAssignment_6() { return cConceptsAssignment_6; }
		
		//Concept
		public RuleCall getConceptsConceptParserRuleCall_6_0() { return cConceptsConceptParserRuleCall_6_0; }
		
		//concepts+=Concept*
		public Assignment getConceptsAssignment_7() { return cConceptsAssignment_7; }
		
		//Concept
		public RuleCall getConceptsConceptParserRuleCall_7_0() { return cConceptsConceptParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//('if' when=Condition)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'if'
		public Keyword getIfKeyword_9_0() { return cIfKeyword_9_0; }
		
		//when=Condition
		public Assignment getWhenAssignment_9_1() { return cWhenAssignment_9_1; }
		
		//Condition
		public RuleCall getWhenConditionParserRuleCall_9_1_0() { return cWhenConditionParserRuleCall_9_1_0; }
		
		//('then' triggers+=Action triggers+=Action*)
		public Group getGroup_10() { return cGroup_10; }
		
		//'then'
		public Keyword getThenKeyword_10_0() { return cThenKeyword_10_0; }
		
		//triggers+=Action
		public Assignment getTriggersAssignment_10_1() { return cTriggersAssignment_10_1; }
		
		//Action
		public RuleCall getTriggersActionParserRuleCall_10_1_0() { return cTriggersActionParserRuleCall_10_1_0; }
		
		//triggers+=Action*
		public Assignment getTriggersAssignment_10_2() { return cTriggersAssignment_10_2; }
		
		//Action
		public RuleCall getTriggersActionParserRuleCall_10_2_0() { return cTriggersActionParserRuleCall_10_2_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition events::Condition:
		//	BinaryExpression | BooleanExpression
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryExpression | BooleanExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall_0() { return cBinaryExpressionParserRuleCall_0; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_1() { return cBooleanExpressionParserRuleCall_1; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.BinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLeftConceptCrossReference_0_0 = (CrossReference)cLeftAssignment_0.eContents().get(0);
		private final RuleCall cLeftConceptEStringParserRuleCall_0_0_1 = (RuleCall)cLeftConceptCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightLiteralParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//BinaryExpression events::BinaryExpression:
		//	left=[events::Concept|EString] '=' right=Literal
		@Override public ParserRule getRule() { return rule; }
		
		//left=[events::Concept|EString] '=' right=Literal
		public Group getGroup() { return cGroup; }
		
		//left=[events::Concept|EString]
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//[events::Concept|EString]
		public CrossReference getLeftConceptCrossReference_0_0() { return cLeftConceptCrossReference_0_0; }
		
		//EString
		public RuleCall getLeftConceptEStringParserRuleCall_0_0_1() { return cLeftConceptEStringParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//right=Literal
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Literal
		public RuleCall getRightLiteralParserRuleCall_2_0() { return cRightLiteralParserRuleCall_2_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Literal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Literal events::Literal:
		//	value=EString
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.BooleanExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionBOOLEANTerminalRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//BooleanExpression events::BooleanExpression:
		//	expression=BOOLEAN
		@Override public ParserRule getRule() { return rule; }
		
		//expression=BOOLEAN
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//BOOLEAN
		public RuleCall getExpressionBOOLEANTerminalRuleCall_0() { return cExpressionBOOLEANTerminalRuleCall_0; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKeyConceptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegexConceptParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Concept events::Concept:
		//	KeyConcept | RegexConcept
		@Override public ParserRule getRule() { return rule; }
		
		//KeyConcept | RegexConcept
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KeyConcept
		public RuleCall getKeyConceptParserRuleCall_0() { return cKeyConceptParserRuleCall_0; }
		
		//RegexConcept
		public RuleCall getRegexConceptParserRuleCall_1() { return cRegexConceptParserRuleCall_1; }
	}
	public class KeyConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.KeyConcept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeyConceptAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//KeyConcept events::KeyConcept:
		//	{events::KeyConcept} type=Type name=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{events::KeyConcept} type=Type name=EString
		public Group getGroup() { return cGroup; }
		
		//{events::KeyConcept}
		public Action getKeyConceptAction_0() { return cKeyConceptAction_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_1_0() { return cTypeTypeEnumRuleCall_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class RegexConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.RegexConcept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegexConceptAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRegexAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRegexEStringParserRuleCall_4_0 = (RuleCall)cRegexAssignment_4.eContents().get(0);
		
		//RegexConcept events::RegexConcept:
		//	{events::RegexConcept} type=Type name=EString '=' regex=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{events::RegexConcept} type=Type name=EString '=' regex=EString
		public Group getGroup() { return cGroup; }
		
		//{events::RegexConcept}
		public Action getRegexConceptAction_0() { return cRegexConceptAction_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_1_0() { return cTypeTypeEnumRuleCall_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//regex=EString
		public Assignment getRegexAssignment_4() { return cRegexAssignment_4; }
		
		//EString
		public RuleCall getRegexEStringParserRuleCall_4_0() { return cRegexEStringParserRuleCall_4_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallsEStringParserRuleCall_1_0 = (RuleCall)cCallsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsActionParamParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsActionParamParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Action events::Action:
		//	{events::Action} calls=EString ('(' params+=ActionParam (',' params+=ActionParam)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//{events::Action} calls=EString ('(' params+=ActionParam (',' params+=ActionParam)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{events::Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//calls=EString
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }
		
		//EString
		public RuleCall getCallsEStringParserRuleCall_1_0() { return cCallsEStringParserRuleCall_1_0; }
		
		//('(' params+=ActionParam (',' params+=ActionParam)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//params+=ActionParam
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }
		
		//ActionParam
		public RuleCall getParamsActionParamParserRuleCall_2_1_0() { return cParamsActionParamParserRuleCall_2_1_0; }
		
		//(',' params+=ActionParam)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//params+=ActionParam
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }
		
		//ActionParam
		public RuleCall getParamsActionParamParserRuleCall_2_2_1_0() { return cParamsActionParamParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class ActionParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.ActionParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ActionParam events::ActionParam:
		//	ConceptParam | StringParam
		@Override public ParserRule getRule() { return rule; }
		
		//ConceptParam | StringParam
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConceptParam
		public RuleCall getConceptParamParserRuleCall_0() { return cConceptParamParserRuleCall_0; }
		
		//StringParam
		public RuleCall getStringParamParserRuleCall_1() { return cStringParamParserRuleCall_1; }
	}
	public class ConceptParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.ConceptParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConceptParamAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyEStringParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueConceptCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueConceptIDTerminalRuleCall_3_0_1 = (RuleCall)cValueConceptCrossReference_3_0.eContents().get(1);
		
		//ConceptParam events::ConceptParam:
		//	{events::ConceptParam} key=EString '<=' value=[events::Concept]
		@Override public ParserRule getRule() { return rule; }
		
		//{events::ConceptParam} key=EString '<=' value=[events::Concept]
		public Group getGroup() { return cGroup; }
		
		//{events::ConceptParam}
		public Action getConceptParamAction_0() { return cConceptParamAction_0; }
		
		//key=EString
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_1_0() { return cKeyEStringParserRuleCall_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//value=[events::Concept]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//[events::Concept]
		public CrossReference getValueConceptCrossReference_3_0() { return cValueConceptCrossReference_3_0; }
		
		//ID
		public RuleCall getValueConceptIDTerminalRuleCall_3_0_1() { return cValueConceptIDTerminalRuleCall_3_0_1; }
	}
	public class StringParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.StringParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringParamAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyEStringParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//StringParam events::StringParam:
		//	{events::StringParam} key=EString '=' value=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{events::StringParam} key=EString '=' value=EString
		public Group getGroup() { return cGroup; }
		
		//{events::StringParam}
		public Action getStringParamAction_0() { return cStringParamAction_0; }
		
		//key=EString
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_1_0() { return cKeyEStringParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=EString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_0() { return cValueEStringParserRuleCall_3_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFloatFloatKeyword_3_0 = (Keyword)cFloatEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDoubleDoubleKeyword_4_0 = (Keyword)cDoubleEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Type returns events::Type:
		//	String | Int | Boolean | Float | Double;
		public EnumRule getRule() { return rule; }
		
		//String | Int | Boolean | Float | Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//Int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }
		
		//'Int'
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
		
		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }
		
		//'Boolean'
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
		
		//Float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_3() { return cFloatEnumLiteralDeclaration_3; }
		
		//'Float'
		public Keyword getFloatFloatKeyword_3_0() { return cFloatFloatKeyword_3_0; }
		
		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_4() { return cDoubleEnumLiteralDeclaration_4; }
		
		//'Double'
		public Keyword getDoubleDoubleKeyword_4_0() { return cDoubleDoubleKeyword_4_0; }
	}
	
	private final EventSetManagerElements pEventSetManager;
	private final GeographicalElementElements pGeographicalElement;
	private final PointElements pPoint;
	private final RegionElements pRegion;
	private final TerminalRule tDOUBLE;
	private final EventElements pEvent;
	private final ConditionElements pCondition;
	private final BinaryExpressionElements pBinaryExpression;
	private final LiteralElements pLiteral;
	private final BooleanExpressionElements pBooleanExpression;
	private final TerminalRule tBOOLEAN;
	private final ConceptElements pConcept;
	private final KeyConceptElements pKeyConcept;
	private final RegexConceptElements pRegexConcept;
	private final ActionElements pAction;
	private final ActionParamElements pActionParam;
	private final ConceptParamElements pConceptParam;
	private final StringParamElements pStringParam;
	private final EStringElements pEString;
	private final TypeElements eType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EventSetManagerDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEventSetManager = new EventSetManagerElements();
		this.pGeographicalElement = new GeographicalElementElements();
		this.pPoint = new PointElements();
		this.pRegion = new RegionElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.DOUBLE");
		this.pEvent = new EventElements();
		this.pCondition = new ConditionElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.events.EventSetManagerDsl.BOOLEAN");
		this.pConcept = new ConceptElements();
		this.pKeyConcept = new KeyConceptElements();
		this.pRegexConcept = new RegexConceptElements();
		this.pAction = new ActionElements();
		this.pActionParam = new ActionParamElements();
		this.pConceptParam = new ConceptParamElements();
		this.pStringParam = new StringParamElements();
		this.pEString = new EStringElements();
		this.eType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uam.eagledata.dsl.events.EventSetManagerDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EventSetManager events::EventSetManager:
	//	geos+=GeographicalElement geos+=GeographicalElement*
	//	events+=Event events+=Event*
	public EventSetManagerElements getEventSetManagerAccess() {
		return pEventSetManager;
	}
	
	public ParserRule getEventSetManagerRule() {
		return getEventSetManagerAccess().getRule();
	}
	
	//GeographicalElement events::GeographicalElement:
	//	Point | Region
	public GeographicalElementElements getGeographicalElementAccess() {
		return pGeographicalElement;
	}
	
	public ParserRule getGeographicalElementRule() {
		return getGeographicalElementAccess().getRule();
	}
	
	//Point events::Point:
	//	{events::Point} name=EString '{' lat=DOUBLE "," long=DOUBLE '}'
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//Region events::Region:
	//	{events::Region} name=EString '[' points+=Point (',' points+=Point)* ']'
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//Event events::Event:
	//	{events::Event} ('connection' dataconnection+=EString ('and' dataconnection+=EString)*)?
	//	'pattern' name=EString ('in' geo=[events::GeographicalElement])? '{'
	//	concepts+=Concept concepts+=Concept*
	//	'}' ('if' when=Condition)? ('then' triggers+=Action triggers+=Action*)
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Condition events::Condition:
	//	BinaryExpression | BooleanExpression
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//BinaryExpression events::BinaryExpression:
	//	left=[events::Concept|EString] '=' right=Literal
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//Literal events::Literal:
	//	value=EString
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BooleanExpression events::BooleanExpression:
	//	expression=BOOLEAN
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//Concept events::Concept:
	//	KeyConcept | RegexConcept
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//KeyConcept events::KeyConcept:
	//	{events::KeyConcept} type=Type name=EString
	public KeyConceptElements getKeyConceptAccess() {
		return pKeyConcept;
	}
	
	public ParserRule getKeyConceptRule() {
		return getKeyConceptAccess().getRule();
	}
	
	//RegexConcept events::RegexConcept:
	//	{events::RegexConcept} type=Type name=EString '=' regex=EString
	public RegexConceptElements getRegexConceptAccess() {
		return pRegexConcept;
	}
	
	public ParserRule getRegexConceptRule() {
		return getRegexConceptAccess().getRule();
	}
	
	//Action events::Action:
	//	{events::Action} calls=EString ('(' params+=ActionParam (',' params+=ActionParam)* ')')?
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//ActionParam events::ActionParam:
	//	ConceptParam | StringParam
	public ActionParamElements getActionParamAccess() {
		return pActionParam;
	}
	
	public ParserRule getActionParamRule() {
		return getActionParamAccess().getRule();
	}
	
	//ConceptParam events::ConceptParam:
	//	{events::ConceptParam} key=EString '<=' value=[events::Concept]
	public ConceptParamElements getConceptParamAccess() {
		return pConceptParam;
	}
	
	public ParserRule getConceptParamRule() {
		return getConceptParamAccess().getRule();
	}
	
	//StringParam events::StringParam:
	//	{events::StringParam} key=EString '=' value=EString
	public StringParamElements getStringParamAccess() {
		return pStringParam;
	}
	
	public ParserRule getStringParamRule() {
		return getStringParamAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum Type returns events::Type:
	//	String | Int | Boolean | Float | Double;
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
