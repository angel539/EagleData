/*
 * generated by Xtext 2.9.2
 */
package uam.eagledata.dsl.events.serializer;

import com.google.inject.Inject;
import ecarules.BinaryExpression;
import ecarules.BooleanExpression;
import ecarules.EcarulesPackage;
import ecarules.EventSetManager;
import ecarules.KeyConcept;
import ecarules.Literal;
import ecarules.PatternEvent;
import ecarules.RegexConcept;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uam.eagledata.dsl.events.services.EventSetManagerDslGrammarAccess;

@SuppressWarnings("all")
public class EventSetManagerDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EventSetManagerDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EcarulesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EcarulesPackage.ACTION:
				sequence_Action(context, (ecarules.Action) semanticObject); 
				return; 
			case EcarulesPackage.BINARY_EXPRESSION:
				sequence_BinaryExpression(context, (BinaryExpression) semanticObject); 
				return; 
			case EcarulesPackage.BOOLEAN_EXPRESSION:
				sequence_BooleanExpression(context, (BooleanExpression) semanticObject); 
				return; 
			case EcarulesPackage.EVENT_SET_MANAGER:
				sequence_EventSetManager(context, (EventSetManager) semanticObject); 
				return; 
			case EcarulesPackage.KEY_CONCEPT:
				sequence_KeyConcept(context, (KeyConcept) semanticObject); 
				return; 
			case EcarulesPackage.LITERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case EcarulesPackage.PATTERN_EVENT:
				sequence_PatternEvent(context, (PatternEvent) semanticObject); 
				return; 
			case EcarulesPackage.REGEX_CONCEPT:
				sequence_RegexConcept(context, (RegexConcept) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Action(ISerializationContext context, ecarules.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, EcarulesPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EcarulesPackage.Literals.ACTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns BinaryExpression
	 *     BinaryExpression returns BinaryExpression
	 *
	 * Constraint:
	 *     (left=[Concept|EString] right=Literal)
	 */
	protected void sequence_BinaryExpression(ISerializationContext context, BinaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, EcarulesPackage.Literals.BINARY_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EcarulesPackage.Literals.BINARY_EXPRESSION__LEFT));
			if (transientValues.isValueTransient((EObject) semanticObject, EcarulesPackage.Literals.BINARY_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EcarulesPackage.Literals.BINARY_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getBinaryExpressionAccess().getLeftConceptEStringParserRuleCall_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getBinaryExpressionAccess().getRightLiteralParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns BooleanExpression
	 *     BooleanExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     expression=BOOLEAN
	 */
	protected void sequence_BooleanExpression(ISerializationContext context, BooleanExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, EcarulesPackage.Literals.BOOLEAN_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EcarulesPackage.Literals.BOOLEAN_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getBooleanExpressionAccess().getExpressionBOOLEANTerminalRuleCall_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EventSetManager returns EventSetManager
	 *
	 * Constraint:
	 *     (events+=Event events+=Event*)
	 */
	protected void sequence_EventSetManager(ISerializationContext context, EventSetManager semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Concept returns KeyConcept
	 *     KeyConcept returns KeyConcept
	 *
	 * Constraint:
	 *     (type=Type name=EString)
	 */
	protected void sequence_KeyConcept(ISerializationContext context, KeyConcept semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, EcarulesPackage.Literals.CONCEPT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EcarulesPackage.Literals.CONCEPT__TYPE));
			if (transientValues.isValueTransient((EObject) semanticObject, EcarulesPackage.Literals.CONCEPT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EcarulesPackage.Literals.CONCEPT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getKeyConceptAccess().getTypeTypeEnumRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getKeyConceptAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, EcarulesPackage.Literals.LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EcarulesPackage.Literals.LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getLiteralAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Event returns PatternEvent
	 *     PatternEvent returns PatternEvent
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         concepts+=Concept 
	 *         concepts+=Concept* 
	 *         when=Condition? 
	 *         triggers+=EString 
	 *         triggers+=EString*
	 *     )
	 */
	protected void sequence_PatternEvent(ISerializationContext context, PatternEvent semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Concept returns RegexConcept
	 *     RegexConcept returns RegexConcept
	 *
	 * Constraint:
	 *     (type=Type name=EString regex=EString)
	 */
	protected void sequence_RegexConcept(ISerializationContext context, RegexConcept semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, EcarulesPackage.Literals.CONCEPT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EcarulesPackage.Literals.CONCEPT__TYPE));
			if (transientValues.isValueTransient((EObject) semanticObject, EcarulesPackage.Literals.CONCEPT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EcarulesPackage.Literals.CONCEPT__NAME));
			if (transientValues.isValueTransient((EObject) semanticObject, EcarulesPackage.Literals.REGEX_CONCEPT__REGEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EcarulesPackage.Literals.REGEX_CONCEPT__REGEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getRegexConceptAccess().getTypeTypeEnumRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRegexConceptAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRegexConceptAccess().getRegexEStringParserRuleCall_4_0(), semanticObject.getRegex());
		feeder.finish();
	}
	
	
}
