// automatically generated by Xtext
grammar uam.eagledata.dsl.events.EventSetManagerDsl with org.eclipse.xtext.common.Terminals

import "http://www.core.eagledata/EcaRules" as ecarules
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.core.eagledata/Query" as query

EventSetManager returns ecarules::EventSetManager:
	('import' importedNamespace+=QualifiedNameWithWildcard ('import' importedNamespace+=QualifiedNameWithWildcard)*)?
	(geos+=GeographicalElement (geos+=GeographicalElement)*)?
	events+=Event (events+=Event)*;

QualifiedNameWithWildcard:
    QualifiedName '.*'?;

QualifiedName:
    ID ('.' ID)*;

GeographicalElement returns ecarules::GeographicalElement:
	Point | Region
;

Point returns ecarules::Point:
	{ecarules::Point}
	name=EString '{' lat=DOUBLE "," long=DOUBLE '}'
;

Region returns ecarules::Region:
	{ecarules::Region}
	name=EString '['points += Point (',' points += Point)*']'
;

terminal DOUBLE returns ecore::EDouble: "-"?INT'.' INT;

Event returns ecarules::Event:
	{ecarules::Event}
	('connection' dataconnections+=[ecarules::DataConnection] ('and' dataconnections+=[ecarules::DataConnection])*)?
	'pattern' name=EString  '{'
		concepts += Concept (concepts += Concept)*
	'}'
	(when += Condition (when += Condition)*)
;

Condition returns ecarules::Condition:
	{ecarules::Condition}
	('if' expression = Expression)?
	('in' geo = [ecarules::GeographicalElement])?
	('then' triggers += Action ('and' triggers += Action)*)
;

Expression returns ecarules::Expression:
	{ecarules::Expression}
	left = [ecarules::Concept|EString] '=' right = Literal
;

Literal returns ecarules::Literal:
	{ecarules::Literal}
	value = EString
;

Concept returns ecarules::Concept:
	KeyConcept | RegexConcept
;

KeyConcept returns ecarules::KeyConcept:
	{ecarules::KeyConcept}
	type=Type name=EString
;

RegexConcept returns ecarules::RegexConcept:
	{ecarules::RegexConcept}
	type=Type name=EString '=' regex=EString
;

Action returns ecarules::Action:
	ActionCall | QueryCall
;

ActionParam returns ecarules::ActionParam:
	ConceptParam | StringParam
;

ConceptParam returns ecarules::ConceptParam:
	{ecarules::ConceptParam}
	key=EString '<=' value=[ecarules::Concept]
;

StringParam returns ecarules::StringParam:
	{ecarules::StringParam}
	key=EString '=' value=EString
;

ActionCall returns ecarules::ActionCall:
	{ecarules::ActionCall}
	calls = [ecarules::ActionExecutableExtension] ('(' actionParams += ActionParam (',' actionParams += ActionParam)* ')')?
;

QueryCall returns ecarules::QueryCall:
	{ecarules::QueryCall}
	select=[query::Select | QualifiedName] 
		'('queryParams+=ParamValue (',' queryParams+=ParamValue)*')''.'method=Method 
		'->'
		calls = [ecarules::ActionExecutableExtension] ('(' actionParams += ActionParam (',' actionParams += ActionParam)* ')')?
;

ParamValue returns ecarules::ParamValue:
	{ecarules::ParamValue}
	param=[query::QueryParam | QualifiedName] ':' value=[ecarules::Concept]
;

Method returns ecarules::Method:
	First | Last
;

First returns ecarules::First:
	{ecarules::First}
	'first'
;

Last returns ecarules::Last:
	{ecarules::Last}
	'last'
;

EString returns ecore::EString:
	STRING | ID;

enum Type returns ecarules::Type:
	String = 'String' | Int = 'Int' | Boolean = 'Boolean' | Float = 'Float' | Double = 'Double' 
;
