// automatically generated by Xtext
grammar uam.eagledata.dsl.events.EventSetManagerDsl with org.eclipse.xtext.common.Terminals

import "http://www.core.eagledata/ECARules" as events
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

EventSetManager returns events::EventSetManager:
	(geos+=GeographicalElement (geos+=GeographicalElement)*)?
	events+=Event (events+=Event)*;

GeographicalElement returns events::GeographicalElement:
	Point | Region
;

Point returns events::Point:
	{events::Point}
	name=EString '{' lat=DOUBLE "," long=DOUBLE '}'
;

Region returns events::Region:
	{events::Region}
	name=EString '['points += Point (',' points += Point)*']'
;

terminal DOUBLE returns ecore::EDouble: "-"?INT'.' INT;

Event returns events::Event:
	{events::Event}
	('connection' dataconnections+=[events::DataConnection] ('and' dataconnections+=[events::DataConnection])*)?
	'pattern' name=EString  '{'
		concepts += Concept (concepts += Concept)*
	'}'
	(when += Condition (when += Condition)*)
;

Condition returns events::Condition:
	{events::Condition}
	('if' expression = Expression)?
	('in' geo = [events::GeographicalElement])?
	('then' triggers += Action ('and' triggers += Action)*)
;

Expression returns events::Expression:
	{events::Expression}
	left = [events::Concept|EString] '=' right = Literal
;

Literal returns events::Literal:
	{events::Literal}
	value = EString
;

Concept returns events::Concept:
	KeyConcept | RegexConcept
;

KeyConcept returns events::KeyConcept:
	{events::KeyConcept}
	type=Type name=EString
;

RegexConcept returns events::RegexConcept:
	{events::RegexConcept}
	type=Type name=EString '=' regex=EString
;

Action returns events::Action:
	{events::Action}
	calls = [events::ActionExecutableExtension] ('(' params += ActionParam (',' params += ActionParam)* ')')?
;

ActionParam returns events::ActionParam:
	ConceptParam | StringParam
;

ConceptParam returns events::ConceptParam:
	{events::ConceptParam}
	key=EString '<=' value=[events::Concept]
;

StringParam returns events::StringParam:
	{events::StringParam}
	key=EString '=' value=EString
;

EString returns ecore::EString:
	STRING | ID;

enum Type returns events::Type:
	String = 'String' | Int = 'Int' | Boolean = 'Boolean' | Float = 'Float' | Double = 'Double' 
;
