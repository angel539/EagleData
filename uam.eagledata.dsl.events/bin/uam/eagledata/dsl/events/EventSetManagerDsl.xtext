// automatically generated by Xtext
grammar uam.eagledata.dsl.events.EventSetManagerDsl with org.eclipse.xtext.common.Terminals

import "http://www.core.eagledata/ECARules" as events
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

EventSetManager returns events::EventSetManager:
	events+=Event (events+=Event)*;

Event returns events::Event:
	{events::Event}
	('connection' dataconnection+=EString ('and' dataconnection+=EString)*)?
	'pattern' name=EString '{'
		concepts += Concept (concepts += Concept)*
	'}'
	('if' when = Condition)?
	('then' triggers += Action (triggers += Action)*)
;

Condition returns events::Condition:
	BinaryExpression | BooleanExpression
;

BinaryExpression returns events::BinaryExpression:
	left = [events::Concept|EString] '=' right = Literal
;

Literal returns events::Literal:
	value = EString
;

BooleanExpression returns events::BooleanExpression:
	expression = BOOLEAN
;

terminal BOOLEAN : "true" | "false";

Concept returns events::Concept:
	KeyConcept | RegexConcept
;

KeyConcept returns events::KeyConcept:
	{events::KeyConcept}
	type=Type name=EString
;

RegexConcept returns events::RegexConcept:
	{events::RegexConcept}
	type=Type name=EString '=' regex=EString
;

Action returns events::Action:
	{events::Action}
	calls = EString ('(' params += ActionParam (',' params += ActionParam)* ')')?
;

ActionParam returns events::ActionParam:
	ConceptParam | StringParam
;

ConceptParam returns events::ConceptParam:
	{events::ConceptParam}
	key=EString '<=' value=[events::Concept]
;

StringParam returns events::StringParam:
	{events::StringParam}
	key=EString '=' value=EString
;

EString returns ecore::EString:
	STRING | ID;

enum Type returns events::Type:
	String = 'String' | Int = 'Int' | Boolean = 'Boolean' | Float = 'Float' | Double = 'Double' 
;
