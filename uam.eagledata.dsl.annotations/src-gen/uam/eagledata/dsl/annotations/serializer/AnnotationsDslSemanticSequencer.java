/*
 * generated by Xtext 2.9.2
 */
package uam.eagledata.dsl.annotations.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import semanticmanager.Annotation;
import semanticmanager.RepositoryManager;
import semanticmanager.SemanticmanagerPackage;
import uam.eagledata.dsl.annotations.services.AnnotationsDslGrammarAccess;

@SuppressWarnings("all")
public class AnnotationsDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AnnotationsDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SemanticmanagerPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SemanticmanagerPackage.ANNOTATION:
				if (rule == grammarAccess.getAnnotationHierarchyRule()) {
					sequence_AnnotationHierarchy(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()) {
					sequence_AnnotationHierarchy_AnnotationInstance_SimpleAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationInstanceRule()) {
					sequence_AnnotationInstance(context, (Annotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSimpleAnnotationRule()) {
					sequence_SimpleAnnotation(context, (Annotation) semanticObject); 
					return; 
				}
				else break;
			case SemanticmanagerPackage.REPOSITORY_MANAGER:
				sequence_RepositoryManager(context, (RepositoryManager) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AnnotationHierarchy returns Annotation
	 *
	 * Constraint:
	 *     (name=QualifiedName supers+=[Annotation|QualifiedName] supers+=[Annotation|QualifiedName]*)
	 */
	protected void sequence_AnnotationHierarchy(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName | 
	 *         (name=QualifiedName supers+=[Annotation|QualifiedName] supers+=[Annotation|QualifiedName]*) | 
	 *         (name=QualifiedName descriptors+=[Annotation|QualifiedName] descriptors+=[Annotation|QualifiedName]*)
	 *     )
	 */
	protected void sequence_AnnotationHierarchy_AnnotationInstance_SimpleAnnotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnotationInstance returns Annotation
	 *
	 * Constraint:
	 *     (name=QualifiedName descriptors+=[Annotation|QualifiedName] descriptors+=[Annotation|QualifiedName]*)
	 */
	protected void sequence_AnnotationInstance(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RepositoryManager returns RepositoryManager
	 *
	 * Constraint:
	 *     (annotations+=Annotation annotations+=Annotation*)?
	 */
	protected void sequence_RepositoryManager(ISerializationContext context, RepositoryManager semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleAnnotation returns Annotation
	 *
	 * Constraint:
	 *     name=QualifiedName
	 */
	protected void sequence_SimpleAnnotation(ISerializationContext context, Annotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, SemanticmanagerPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, SemanticmanagerPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getSimpleAnnotationAccess().getNameQualifiedNameParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
