/*
 * generated by Xtext 2.9.2
 */
package uam.eagledata.dsl.annotations.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AnnotationsDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RepositoryManagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.annotations.AnnotationsDsl.RepositoryManager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepositoryManagerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAnnotationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0_0 = (RuleCall)cAnnotationsAssignment_1_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		
		//RepositoryManager semanticmanager::RepositoryManager:
		//	{semanticmanager::RepositoryManager} (annotations+=Annotation annotations+=Annotation*)?
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::RepositoryManager} (annotations+=Annotation annotations+=Annotation*)?
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::RepositoryManager}
		public Action getRepositoryManagerAction_0() { return cRepositoryManagerAction_0; }
		
		//(annotations+=Annotation annotations+=Annotation*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_1_0() { return cAnnotationsAssignment_1_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0_0() { return cAnnotationsAnnotationParserRuleCall_1_0_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.annotations.AnnotationsDsl.Annotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationHierarchyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnnotationInstanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Annotation semanticmanager::Annotation:
		//	SimpleAnnotation | AnnotationHierarchy | AnnotationInstance
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleAnnotation | AnnotationHierarchy | AnnotationInstance
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleAnnotation
		public RuleCall getSimpleAnnotationParserRuleCall_0() { return cSimpleAnnotationParserRuleCall_0; }
		
		//AnnotationHierarchy
		public RuleCall getAnnotationHierarchyParserRuleCall_1() { return cAnnotationHierarchyParserRuleCall_1; }
		
		//AnnotationInstance
		public RuleCall getAnnotationInstanceParserRuleCall_2() { return cAnnotationInstanceParserRuleCall_2; }
	}
	public class SimpleAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.annotations.AnnotationsDsl.SimpleAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//SimpleAnnotation semanticmanager::Annotation:
		//	{semanticmanager::Annotation}
		//	'@' name=QualifiedName
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::Annotation} '@' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::Annotation}
		public Action getAnnotationAction_0() { return cAnnotationAction_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
	}
	public class AnnotationHierarchyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.annotations.AnnotationsDsl.AnnotationHierarchy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cCommercialAtKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSupersAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cSupersAnnotationCrossReference_3_2_0 = (CrossReference)cSupersAssignment_3_2.eContents().get(0);
		private final RuleCall cSupersAnnotationQualifiedNameParserRuleCall_3_2_0_1 = (RuleCall)cSupersAnnotationCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cCommercialAtKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cSupersAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final CrossReference cSupersAnnotationCrossReference_3_3_2_0 = (CrossReference)cSupersAssignment_3_3_2.eContents().get(0);
		private final RuleCall cSupersAnnotationQualifiedNameParserRuleCall_3_3_2_0_1 = (RuleCall)cSupersAnnotationCrossReference_3_3_2_0.eContents().get(1);
		
		//AnnotationHierarchy semanticmanager::Annotation:
		//	{semanticmanager::Annotation}
		//	'@' name=QualifiedName ('<' '@' supers+=[semanticmanager::Annotation|QualifiedName] ("," '@'
		//	supers+=[semanticmanager::Annotation|QualifiedName])*)
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::Annotation} '@' name=QualifiedName ('<' '@' supers+=[semanticmanager::Annotation|QualifiedName] (","
		//'@' supers+=[semanticmanager::Annotation|QualifiedName])*)
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::Annotation}
		public Action getAnnotationAction_0() { return cAnnotationAction_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//('<' '@' supers+=[semanticmanager::Annotation|QualifiedName] ("," '@'
		//supers+=[semanticmanager::Annotation|QualifiedName])*)
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_3_1() { return cCommercialAtKeyword_3_1; }
		
		//supers+=[semanticmanager::Annotation|QualifiedName]
		public Assignment getSupersAssignment_3_2() { return cSupersAssignment_3_2; }
		
		//[semanticmanager::Annotation|QualifiedName]
		public CrossReference getSupersAnnotationCrossReference_3_2_0() { return cSupersAnnotationCrossReference_3_2_0; }
		
		//QualifiedName
		public RuleCall getSupersAnnotationQualifiedNameParserRuleCall_3_2_0_1() { return cSupersAnnotationQualifiedNameParserRuleCall_3_2_0_1; }
		
		//("," '@' supers+=[semanticmanager::Annotation|QualifiedName])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_3_3_1() { return cCommercialAtKeyword_3_3_1; }
		
		//supers+=[semanticmanager::Annotation|QualifiedName]
		public Assignment getSupersAssignment_3_3_2() { return cSupersAssignment_3_3_2; }
		
		//[semanticmanager::Annotation|QualifiedName]
		public CrossReference getSupersAnnotationCrossReference_3_3_2_0() { return cSupersAnnotationCrossReference_3_3_2_0; }
		
		//QualifiedName
		public RuleCall getSupersAnnotationQualifiedNameParserRuleCall_3_3_2_0_1() { return cSupersAnnotationQualifiedNameParserRuleCall_3_3_2_0_1; }
	}
	public class AnnotationInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.annotations.AnnotationsDsl.AnnotationInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cCommercialAtKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDescriptorsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cDescriptorsAnnotationCrossReference_3_2_0 = (CrossReference)cDescriptorsAssignment_3_2.eContents().get(0);
		private final RuleCall cDescriptorsAnnotationQualifiedNameParserRuleCall_3_2_0_1 = (RuleCall)cDescriptorsAnnotationCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cCommercialAtKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cDescriptorsAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final CrossReference cDescriptorsAnnotationCrossReference_3_3_2_0 = (CrossReference)cDescriptorsAssignment_3_3_2.eContents().get(0);
		private final RuleCall cDescriptorsAnnotationQualifiedNameParserRuleCall_3_3_2_0_1 = (RuleCall)cDescriptorsAnnotationCrossReference_3_3_2_0.eContents().get(1);
		
		//AnnotationInstance semanticmanager::Annotation:
		//	{semanticmanager::Annotation}
		//	'@' name=QualifiedName (':' '@' descriptors+=[semanticmanager::Annotation|QualifiedName] ("," '@'
		//	descriptors+=[semanticmanager::Annotation|QualifiedName])*)
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::Annotation} '@' name=QualifiedName (':' '@' descriptors+=[semanticmanager::Annotation|QualifiedName]
		//("," '@' descriptors+=[semanticmanager::Annotation|QualifiedName])*)
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::Annotation}
		public Action getAnnotationAction_0() { return cAnnotationAction_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//(':' '@' descriptors+=[semanticmanager::Annotation|QualifiedName] ("," '@'
		//descriptors+=[semanticmanager::Annotation|QualifiedName])*)
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_3_1() { return cCommercialAtKeyword_3_1; }
		
		//descriptors+=[semanticmanager::Annotation|QualifiedName]
		public Assignment getDescriptorsAssignment_3_2() { return cDescriptorsAssignment_3_2; }
		
		//[semanticmanager::Annotation|QualifiedName]
		public CrossReference getDescriptorsAnnotationCrossReference_3_2_0() { return cDescriptorsAnnotationCrossReference_3_2_0; }
		
		//QualifiedName
		public RuleCall getDescriptorsAnnotationQualifiedNameParserRuleCall_3_2_0_1() { return cDescriptorsAnnotationQualifiedNameParserRuleCall_3_2_0_1; }
		
		//("," '@' descriptors+=[semanticmanager::Annotation|QualifiedName])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_3_3_1() { return cCommercialAtKeyword_3_3_1; }
		
		//descriptors+=[semanticmanager::Annotation|QualifiedName]
		public Assignment getDescriptorsAssignment_3_3_2() { return cDescriptorsAssignment_3_3_2; }
		
		//[semanticmanager::Annotation|QualifiedName]
		public CrossReference getDescriptorsAnnotationCrossReference_3_3_2_0() { return cDescriptorsAnnotationCrossReference_3_3_2_0; }
		
		//QualifiedName
		public RuleCall getDescriptorsAnnotationQualifiedNameParserRuleCall_3_3_2_0_1() { return cDescriptorsAnnotationQualifiedNameParserRuleCall_3_3_2_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.annotations.AnnotationsDsl.QualifiedName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//QualifiedName:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final RepositoryManagerElements pRepositoryManager;
	private final AnnotationElements pAnnotation;
	private final SimpleAnnotationElements pSimpleAnnotation;
	private final AnnotationHierarchyElements pAnnotationHierarchy;
	private final AnnotationInstanceElements pAnnotationInstance;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AnnotationsDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRepositoryManager = new RepositoryManagerElements();
		this.pAnnotation = new AnnotationElements();
		this.pSimpleAnnotation = new SimpleAnnotationElements();
		this.pAnnotationHierarchy = new AnnotationHierarchyElements();
		this.pAnnotationInstance = new AnnotationInstanceElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uam.eagledata.dsl.annotations.AnnotationsDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RepositoryManager semanticmanager::RepositoryManager:
	//	{semanticmanager::RepositoryManager} (annotations+=Annotation annotations+=Annotation*)?
	public RepositoryManagerElements getRepositoryManagerAccess() {
		return pRepositoryManager;
	}
	
	public ParserRule getRepositoryManagerRule() {
		return getRepositoryManagerAccess().getRule();
	}
	
	//Annotation semanticmanager::Annotation:
	//	SimpleAnnotation | AnnotationHierarchy | AnnotationInstance
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//SimpleAnnotation semanticmanager::Annotation:
	//	{semanticmanager::Annotation}
	//	'@' name=QualifiedName
	public SimpleAnnotationElements getSimpleAnnotationAccess() {
		return pSimpleAnnotation;
	}
	
	public ParserRule getSimpleAnnotationRule() {
		return getSimpleAnnotationAccess().getRule();
	}
	
	//AnnotationHierarchy semanticmanager::Annotation:
	//	{semanticmanager::Annotation}
	//	'@' name=QualifiedName ('<' '@' supers+=[semanticmanager::Annotation|QualifiedName] ("," '@'
	//	supers+=[semanticmanager::Annotation|QualifiedName])*)
	public AnnotationHierarchyElements getAnnotationHierarchyAccess() {
		return pAnnotationHierarchy;
	}
	
	public ParserRule getAnnotationHierarchyRule() {
		return getAnnotationHierarchyAccess().getRule();
	}
	
	//AnnotationInstance semanticmanager::Annotation:
	//	{semanticmanager::Annotation}
	//	'@' name=QualifiedName (':' '@' descriptors+=[semanticmanager::Annotation|QualifiedName] ("," '@'
	//	descriptors+=[semanticmanager::Annotation|QualifiedName])*)
	public AnnotationInstanceElements getAnnotationInstanceAccess() {
		return pAnnotationInstance;
	}
	
	public ParserRule getAnnotationInstanceRule() {
		return getAnnotationInstanceAccess().getRule();
	}
	
	//QualifiedName:
	//	ID;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
