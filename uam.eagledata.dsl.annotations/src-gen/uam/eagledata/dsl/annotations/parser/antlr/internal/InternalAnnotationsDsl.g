/*
 * generated by Xtext 2.9.2
 */
grammar InternalAnnotationsDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uam.eagledata.dsl.annotations.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uam.eagledata.dsl.annotations.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uam.eagledata.dsl.annotations.services.AnnotationsDslGrammarAccess;

}

@parser::members {

 	private AnnotationsDslGrammarAccess grammarAccess;

    public InternalAnnotationsDslParser(TokenStream input, AnnotationsDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RepositoryManager";
   	}

   	@Override
   	protected AnnotationsDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRepositoryManager
entryRuleRepositoryManager returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepositoryManagerRule()); }
	iv_ruleRepositoryManager=ruleRepositoryManager
	{ $current=$iv_ruleRepositoryManager.current; }
	EOF;

// Rule RepositoryManager
ruleRepositoryManager returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRepositoryManagerAccess().getRepositoryManagerAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRepositoryManagerAccess().getAnnotationsAnnotationParserRuleCall_1_0_0());
					}
					lv_annotations_1_0=ruleAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRepositoryManagerRule());
						}
						add(
							$current,
							"annotations",
							lv_annotations_1_0,
							"uam.eagledata.dsl.annotations.AnnotationsDsl.Annotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRepositoryManagerAccess().getAnnotationsAnnotationParserRuleCall_1_1_0());
					}
					lv_annotations_2_0=ruleAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRepositoryManagerRule());
						}
						add(
							$current,
							"annotations",
							lv_annotations_2_0,
							"uam.eagledata.dsl.annotations.AnnotationsDsl.Annotation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	iv_ruleAnnotation=ruleAnnotation
	{ $current=$iv_ruleAnnotation.current; }
	EOF;

// Rule Annotation
ruleAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAnnotationAccess().getSimpleAnnotationParserRuleCall_0());
		}
		this_SimpleAnnotation_0=ruleSimpleAnnotation
		{
			$current = $this_SimpleAnnotation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationHierarchyParserRuleCall_1());
		}
		this_AnnotationHierarchy_1=ruleAnnotationHierarchy
		{
			$current = $this_AnnotationHierarchy_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationInstanceParserRuleCall_2());
		}
		this_AnnotationInstance_2=ruleAnnotationInstance
		{
			$current = $this_AnnotationInstance_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimpleAnnotation
entryRuleSimpleAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleAnnotationRule()); }
	iv_ruleSimpleAnnotation=ruleSimpleAnnotation
	{ $current=$iv_ruleSimpleAnnotation.current; }
	EOF;

// Rule SimpleAnnotation
ruleSimpleAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSimpleAnnotationAccess().getAnnotationAction_0(),
					$current);
			}
		)
		otherlv_1='@'
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleAnnotationAccess().getCommercialAtKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleAnnotationAccess().getNameQualifiedNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"uam.eagledata.dsl.annotations.AnnotationsDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAnnotationHierarchy
entryRuleAnnotationHierarchy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationHierarchyRule()); }
	iv_ruleAnnotationHierarchy=ruleAnnotationHierarchy
	{ $current=$iv_ruleAnnotationHierarchy.current; }
	EOF;

// Rule AnnotationHierarchy
ruleAnnotationHierarchy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAnnotationHierarchyAccess().getAnnotationAction_0(),
					$current);
			}
		)
		otherlv_1='@'
		{
			newLeafNode(otherlv_1, grammarAccess.getAnnotationHierarchyAccess().getCommercialAtKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotationHierarchyAccess().getNameQualifiedNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotationHierarchyRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"uam.eagledata.dsl.annotations.AnnotationsDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='<'
			{
				newLeafNode(otherlv_3, grammarAccess.getAnnotationHierarchyAccess().getLessThanSignKeyword_3_0());
			}
			otherlv_4='@'
			{
				newLeafNode(otherlv_4, grammarAccess.getAnnotationHierarchyAccess().getCommercialAtKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAnnotationHierarchyRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getAnnotationHierarchyAccess().getSupersAnnotationCrossReference_3_2_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getAnnotationHierarchyAccess().getCommaKeyword_3_3_0());
				}
				otherlv_7='@'
				{
					newLeafNode(otherlv_7, grammarAccess.getAnnotationHierarchyAccess().getCommercialAtKeyword_3_3_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAnnotationHierarchyRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getAnnotationHierarchyAccess().getSupersAnnotationCrossReference_3_3_2_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleAnnotationInstance
entryRuleAnnotationInstance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationInstanceRule()); }
	iv_ruleAnnotationInstance=ruleAnnotationInstance
	{ $current=$iv_ruleAnnotationInstance.current; }
	EOF;

// Rule AnnotationInstance
ruleAnnotationInstance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAnnotationInstanceAccess().getAnnotationAction_0(),
					$current);
			}
		)
		otherlv_1='@'
		{
			newLeafNode(otherlv_1, grammarAccess.getAnnotationInstanceAccess().getCommercialAtKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotationInstanceAccess().getNameQualifiedNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotationInstanceRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"uam.eagledata.dsl.annotations.AnnotationsDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getAnnotationInstanceAccess().getColonKeyword_3_0());
			}
			otherlv_4='@'
			{
				newLeafNode(otherlv_4, grammarAccess.getAnnotationInstanceAccess().getCommercialAtKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAnnotationInstanceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getAnnotationInstanceAccess().getDescriptorsAnnotationCrossReference_3_2_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getAnnotationInstanceAccess().getCommaKeyword_3_3_0());
				}
				otherlv_7='@'
				{
					newLeafNode(otherlv_7, grammarAccess.getAnnotationInstanceAccess().getCommercialAtKeyword_3_3_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAnnotationInstanceRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getAnnotationInstanceAccess().getDescriptorsAnnotationCrossReference_3_3_2_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
