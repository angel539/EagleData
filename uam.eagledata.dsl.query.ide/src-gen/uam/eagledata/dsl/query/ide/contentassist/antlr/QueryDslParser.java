/*
 * generated by Xtext 2.9.2
 */
package uam.eagledata.dsl.query.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import uam.eagledata.dsl.query.ide.contentassist.antlr.internal.InternalQueryDslParser;
import uam.eagledata.dsl.query.services.QueryDslGrammarAccess;

public class QueryDslParser extends AbstractContentAssistParser {

	@Inject
	private QueryDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalQueryDslParser createParser() {
		InternalQueryDslParser result = new InternalQueryDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSelectAccess().getAlternatives_5(), "rule__Select__Alternatives_5");
					put(grammarAccess.getSelectAccess().getAlternatives_6_1(), "rule__Select__Alternatives_6_1");
					put(grammarAccess.getFromAccess().getAlternatives(), "rule__From__Alternatives");
					put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
					put(grammarAccess.getPredicateAccess().getAlternatives(), "rule__Predicate__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getJoinTypeAccess().getAlternatives(), "rule__JoinType__Alternatives");
					put(grammarAccess.getComparisonTypeAccess().getAlternatives(), "rule__ComparisonType__Alternatives");
					put(grammarAccess.getConnectionTypeAccess().getAlternatives(), "rule__ConnectionType__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getQuerySetAccess().getGroup(), "rule__QuerySet__Group__0");
					put(grammarAccess.getQuerySetAccess().getGroup_4(), "rule__QuerySet__Group_4__0");
					put(grammarAccess.getQuerySetAccess().getGroup_4_2(), "rule__QuerySet__Group_4_2__0");
					put(grammarAccess.getQuerySetAccess().getGroup_5(), "rule__QuerySet__Group_5__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
					put(grammarAccess.getSelectAccess().getGroup_2(), "rule__Select__Group_2__0");
					put(grammarAccess.getSelectAccess().getGroup_2_2(), "rule__Select__Group_2_2__0");
					put(grammarAccess.getSelectAccess().getGroup_5_1(), "rule__Select__Group_5_1__0");
					put(grammarAccess.getSelectAccess().getGroup_5_1_1(), "rule__Select__Group_5_1_1__0");
					put(grammarAccess.getSelectAccess().getGroup_6(), "rule__Select__Group_6__0");
					put(grammarAccess.getSelectAccess().getGroup_6_1_0(), "rule__Select__Group_6_1_0__0");
					put(grammarAccess.getSelectAccess().getGroup_6_1_0_1(), "rule__Select__Group_6_1_0_1__0");
					put(grammarAccess.getSelectAccess().getGroup_6_1_1(), "rule__Select__Group_6_1_1__0");
					put(grammarAccess.getSelectAccess().getGroup_7(), "rule__Select__Group_7__0");
					put(grammarAccess.getQueryParamAccess().getGroup(), "rule__QueryParam__Group__0");
					put(grammarAccess.getSimpleFromAccess().getGroup(), "rule__SimpleFrom__Group__0");
					put(grammarAccess.getCompositeFromAccess().getGroup(), "rule__CompositeFrom__Group__0");
					put(grammarAccess.getSimpleConditionAccess().getGroup(), "rule__SimpleCondition__Group__0");
					put(grammarAccess.getPrimitiveValuePredicateAccess().getGroup(), "rule__PrimitiveValuePredicate__Group__0");
					put(grammarAccess.getModelValuePredicateAccess().getGroup(), "rule__ModelValuePredicate__Group__0");
					put(grammarAccess.getParamValuePredicateAccess().getGroup(), "rule__ParamValuePredicate__Group__0");
					put(grammarAccess.getCompositeConditionAccess().getGroup(), "rule__CompositeCondition__Group__0");
					put(grammarAccess.getQuerySetAccess().getNameAssignment_2(), "rule__QuerySet__NameAssignment_2");
					put(grammarAccess.getQuerySetAccess().getImportedNamespaceAssignment_4_1(), "rule__QuerySet__ImportedNamespaceAssignment_4_1");
					put(grammarAccess.getQuerySetAccess().getImportedNamespaceAssignment_4_2_1(), "rule__QuerySet__ImportedNamespaceAssignment_4_2_1");
					put(grammarAccess.getQuerySetAccess().getQueriesAssignment_5_0(), "rule__QuerySet__QueriesAssignment_5_0");
					put(grammarAccess.getQuerySetAccess().getQueriesAssignment_5_1(), "rule__QuerySet__QueriesAssignment_5_1");
					put(grammarAccess.getSelectAccess().getNameAssignment_1(), "rule__Select__NameAssignment_1");
					put(grammarAccess.getSelectAccess().getParamsAssignment_2_1(), "rule__Select__ParamsAssignment_2_1");
					put(grammarAccess.getSelectAccess().getParamsAssignment_2_2_1(), "rule__Select__ParamsAssignment_2_2_1");
					put(grammarAccess.getSelectAccess().getSelectAllAssignment_5_0(), "rule__Select__SelectAllAssignment_5_0");
					put(grammarAccess.getSelectAccess().getSelectionAssignment_5_1_0(), "rule__Select__SelectionAssignment_5_1_0");
					put(grammarAccess.getSelectAccess().getSelectionAssignment_5_1_1_1(), "rule__Select__SelectionAssignment_5_1_1_1");
					put(grammarAccess.getSelectAccess().getFromAssignment_6_1_0_0(), "rule__Select__FromAssignment_6_1_0_0");
					put(grammarAccess.getSelectAccess().getFromAssignment_6_1_0_1_1(), "rule__Select__FromAssignment_6_1_0_1_1");
					put(grammarAccess.getSelectAccess().getFromAssignment_6_1_1_0(), "rule__Select__FromAssignment_6_1_1_0");
					put(grammarAccess.getSelectAccess().getFromAssignment_6_1_1_1(), "rule__Select__FromAssignment_6_1_1_1");
					put(grammarAccess.getSelectAccess().getWhereAssignment_7_1(), "rule__Select__WhereAssignment_7_1");
					put(grammarAccess.getQueryParamAccess().getTypeAssignment_0(), "rule__QueryParam__TypeAssignment_0");
					put(grammarAccess.getQueryParamAccess().getNameAssignment_1(), "rule__QueryParam__NameAssignment_1");
					put(grammarAccess.getSimpleFromAccess().getSourceAssignment_1(), "rule__SimpleFrom__SourceAssignment_1");
					put(grammarAccess.getCompositeFromAccess().getJoinAssignment_1(), "rule__CompositeFrom__JoinAssignment_1");
					put(grammarAccess.getCompositeFromAccess().getSourceAssignment_2(), "rule__CompositeFrom__SourceAssignment_2");
					put(grammarAccess.getCompositeFromAccess().getOnAssignment_4(), "rule__CompositeFrom__OnAssignment_4");
					put(grammarAccess.getSimpleConditionAccess().getPredicateAssignment_1(), "rule__SimpleCondition__PredicateAssignment_1");
					put(grammarAccess.getPrimitiveValuePredicateAccess().getNotAssignment_1(), "rule__PrimitiveValuePredicate__NotAssignment_1");
					put(grammarAccess.getPrimitiveValuePredicateAccess().getLeftAssignment_2(), "rule__PrimitiveValuePredicate__LeftAssignment_2");
					put(grammarAccess.getPrimitiveValuePredicateAccess().getComparisonTypeAssignment_3(), "rule__PrimitiveValuePredicate__ComparisonTypeAssignment_3");
					put(grammarAccess.getPrimitiveValuePredicateAccess().getValueAssignment_4(), "rule__PrimitiveValuePredicate__ValueAssignment_4");
					put(grammarAccess.getModelValuePredicateAccess().getNotAssignment_1(), "rule__ModelValuePredicate__NotAssignment_1");
					put(grammarAccess.getModelValuePredicateAccess().getLeftAssignment_2(), "rule__ModelValuePredicate__LeftAssignment_2");
					put(grammarAccess.getModelValuePredicateAccess().getComparisonTypeAssignment_3(), "rule__ModelValuePredicate__ComparisonTypeAssignment_3");
					put(grammarAccess.getModelValuePredicateAccess().getRightAssignment_5(), "rule__ModelValuePredicate__RightAssignment_5");
					put(grammarAccess.getParamValuePredicateAccess().getNotAssignment_1(), "rule__ParamValuePredicate__NotAssignment_1");
					put(grammarAccess.getParamValuePredicateAccess().getLeftAssignment_2(), "rule__ParamValuePredicate__LeftAssignment_2");
					put(grammarAccess.getParamValuePredicateAccess().getComparisonTypeAssignment_3(), "rule__ParamValuePredicate__ComparisonTypeAssignment_3");
					put(grammarAccess.getParamValuePredicateAccess().getRightAssignment_5(), "rule__ParamValuePredicate__RightAssignment_5");
					put(grammarAccess.getCompositeConditionAccess().getPredicateAssignment_1(), "rule__CompositeCondition__PredicateAssignment_1");
					put(grammarAccess.getCompositeConditionAccess().getConnectionAssignment_2(), "rule__CompositeCondition__ConnectionAssignment_2");
					put(grammarAccess.getCompositeConditionAccess().getOnAssignment_3(), "rule__CompositeCondition__OnAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalQueryDslParser typedParser = (InternalQueryDslParser) parser;
			typedParser.entryRuleQuerySet();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public QueryDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(QueryDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
