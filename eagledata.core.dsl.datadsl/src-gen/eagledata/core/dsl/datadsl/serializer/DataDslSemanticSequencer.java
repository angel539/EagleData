/*
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.datadsl.serializer;

import com.google.inject.Inject;
import data.CompositeNode;
import data.DataFragment;
import data.DataModel;
import data.DataPackage;
import data.DataSource;
import data.DataType;
import data.FormatSpecification;
import data.LeafNode;
import data.Option;
import data.Reference;
import eagledata.core.dsl.datadsl.services.DataDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class DataDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DataDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DataPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DataPackage.COMPOSITE_NODE:
				sequence_CompositeNode(context, (CompositeNode) semanticObject); 
				return; 
			case DataPackage.DATA_FRAGMENT:
				sequence_DataFragment(context, (DataFragment) semanticObject); 
				return; 
			case DataPackage.DATA_MODEL:
				sequence_DataModel(context, (DataModel) semanticObject); 
				return; 
			case DataPackage.DATA_SOURCE:
				sequence_DataSource(context, (DataSource) semanticObject); 
				return; 
			case DataPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case DataPackage.FORMAT_SPECIFICATION:
				sequence_FormatSpecification(context, (FormatSpecification) semanticObject); 
				return; 
			case DataPackage.LEAF_NODE:
				sequence_LeafNode(context, (LeafNode) semanticObject); 
				return; 
			case DataPackage.OPTION:
				sequence_Option(context, (Option) semanticObject); 
				return; 
			case DataPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Node returns CompositeNode
	 *     CompositeNode returns CompositeNode
	 *
	 * Constraint:
	 *     (
	 *         environment?='>'? 
	 *         name=EString 
	 *         representedAs=EString? 
	 *         (extends+=[CompositeNode|EString] extends+=[CompositeNode|EString]*)? 
	 *         (subnodes+=Node subnodes+=Node*)?
	 *     )
	 */
	protected void sequence_CompositeNode(ISerializationContext context, CompositeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataDescription returns DataFragment
	 *     DataFragment returns DataFragment
	 *
	 * Constraint:
	 *     (name=EString (nodes+=Node nodes+=Node*)?)
	 */
	protected void sequence_DataFragment(ISerializationContext context, DataFragment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataModel returns DataModel
	 *
	 * Constraint:
	 *     ((importURI+=EString importURI+=EString*)? descriptions+=DataDescription descriptions+=DataDescription*)
	 */
	protected void sequence_DataModel(ISerializationContext context, DataModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataDescription returns DataSource
	 *     DataSource returns DataSource
	 *
	 * Constraint:
	 *     (
	 *         format=FormatSpecification 
	 *         name=EString 
	 *         (link+=EString link+=EString*)? 
	 *         (fragments+=[DataFragment|EString] fragments+=[DataFragment|EString]*)? 
	 *         (nodes+=Node nodes+=Node*)? 
	 *         (options+=Option options+=Option*)?
	 *     )
	 */
	protected void sequence_DataSource(ISerializationContext context, DataSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeSpecification returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     ((specialType=EString | type=TypeKind) (min=EInt max=EInt?)?)
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormatSpecification returns FormatSpecification
	 *
	 * Constraint:
	 *     (specialFormat=EString | format=FormatKind)
	 */
	protected void sequence_FormatSpecification(ISerializationContext context, FormatSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns LeafNode
	 *     LeafNode returns LeafNode
	 *
	 * Constraint:
	 *     (
	 *         key?='key'? 
	 *         unique?='unique'? 
	 *         type=TypeSpecification 
	 *         keyword?='#'? 
	 *         name=EString 
	 *         representedAs=EString?
	 *     )
	 */
	protected void sequence_LeafNode(ISerializationContext context, LeafNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Option
	 *
	 * Constraint:
	 *     (key=EString values+=EString values+=EString*)
	 */
	protected void sequence_Option(ISerializationContext context, Option semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeSpecification returns Reference
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (referenceType=[CompositeNode|EString] (min=EInt max=EInt?)?)
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
