/*
 * generated by Xtext 2.9.2
 */
package uam.eagledata.dsl.events.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import uam.eagledata.dsl.events.ide.contentassist.antlr.internal.InternalEventSetManagerDslParser;
import uam.eagledata.dsl.events.services.EventSetManagerDslGrammarAccess;

public class EventSetManagerDslParser extends AbstractContentAssistParser {

	@Inject
	private EventSetManagerDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalEventSetManagerDslParser createParser() {
		InternalEventSetManagerDslParser result = new InternalEventSetManagerDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
					put(grammarAccess.getConceptAccess().getAlternatives(), "rule__Concept__Alternatives");
					put(grammarAccess.getActionParamAccess().getAlternatives(), "rule__ActionParam__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getEventSetManagerAccess().getGroup(), "rule__EventSetManager__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getEventAccess().getGroup_1(), "rule__Event__Group_1__0");
					put(grammarAccess.getEventAccess().getGroup_1_2(), "rule__Event__Group_1_2__0");
					put(grammarAccess.getEventAccess().getGroup_8(), "rule__Event__Group_8__0");
					put(grammarAccess.getEventAccess().getGroup_9(), "rule__Event__Group_9__0");
					put(grammarAccess.getBinaryExpressionAccess().getGroup(), "rule__BinaryExpression__Group__0");
					put(grammarAccess.getKeyConceptAccess().getGroup(), "rule__KeyConcept__Group__0");
					put(grammarAccess.getRegexConceptAccess().getGroup(), "rule__RegexConcept__Group__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getActionAccess().getGroup_2(), "rule__Action__Group_2__0");
					put(grammarAccess.getActionAccess().getGroup_2_2(), "rule__Action__Group_2_2__0");
					put(grammarAccess.getConceptParamAccess().getGroup(), "rule__ConceptParam__Group__0");
					put(grammarAccess.getStringParamAccess().getGroup(), "rule__StringParam__Group__0");
					put(grammarAccess.getEventSetManagerAccess().getEventsAssignment_0(), "rule__EventSetManager__EventsAssignment_0");
					put(grammarAccess.getEventSetManagerAccess().getEventsAssignment_1(), "rule__EventSetManager__EventsAssignment_1");
					put(grammarAccess.getEventAccess().getDataconnectionAssignment_1_1(), "rule__Event__DataconnectionAssignment_1_1");
					put(grammarAccess.getEventAccess().getDataconnectionAssignment_1_2_1(), "rule__Event__DataconnectionAssignment_1_2_1");
					put(grammarAccess.getEventAccess().getNameAssignment_3(), "rule__Event__NameAssignment_3");
					put(grammarAccess.getEventAccess().getConceptsAssignment_5(), "rule__Event__ConceptsAssignment_5");
					put(grammarAccess.getEventAccess().getConceptsAssignment_6(), "rule__Event__ConceptsAssignment_6");
					put(grammarAccess.getEventAccess().getWhenAssignment_8_1(), "rule__Event__WhenAssignment_8_1");
					put(grammarAccess.getEventAccess().getTriggersAssignment_9_1(), "rule__Event__TriggersAssignment_9_1");
					put(grammarAccess.getEventAccess().getTriggersAssignment_9_2(), "rule__Event__TriggersAssignment_9_2");
					put(grammarAccess.getBinaryExpressionAccess().getLeftAssignment_0(), "rule__BinaryExpression__LeftAssignment_0");
					put(grammarAccess.getBinaryExpressionAccess().getRightAssignment_2(), "rule__BinaryExpression__RightAssignment_2");
					put(grammarAccess.getLiteralAccess().getValueAssignment(), "rule__Literal__ValueAssignment");
					put(grammarAccess.getBooleanExpressionAccess().getExpressionAssignment(), "rule__BooleanExpression__ExpressionAssignment");
					put(grammarAccess.getKeyConceptAccess().getTypeAssignment_1(), "rule__KeyConcept__TypeAssignment_1");
					put(grammarAccess.getKeyConceptAccess().getNameAssignment_2(), "rule__KeyConcept__NameAssignment_2");
					put(grammarAccess.getRegexConceptAccess().getTypeAssignment_1(), "rule__RegexConcept__TypeAssignment_1");
					put(grammarAccess.getRegexConceptAccess().getNameAssignment_2(), "rule__RegexConcept__NameAssignment_2");
					put(grammarAccess.getRegexConceptAccess().getRegexAssignment_4(), "rule__RegexConcept__RegexAssignment_4");
					put(grammarAccess.getActionAccess().getCallsAssignment_1(), "rule__Action__CallsAssignment_1");
					put(grammarAccess.getActionAccess().getParamsAssignment_2_1(), "rule__Action__ParamsAssignment_2_1");
					put(grammarAccess.getActionAccess().getParamsAssignment_2_2_1(), "rule__Action__ParamsAssignment_2_2_1");
					put(grammarAccess.getConceptParamAccess().getKeyAssignment_1(), "rule__ConceptParam__KeyAssignment_1");
					put(grammarAccess.getConceptParamAccess().getValueAssignment_3(), "rule__ConceptParam__ValueAssignment_3");
					put(grammarAccess.getStringParamAccess().getKeyAssignment_1(), "rule__StringParam__KeyAssignment_1");
					put(grammarAccess.getStringParamAccess().getValueAssignment_3(), "rule__StringParam__ValueAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalEventSetManagerDslParser typedParser = (InternalEventSetManagerDslParser) parser;
			typedParser.entryRuleEventSetManager();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EventSetManagerDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EventSetManagerDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
