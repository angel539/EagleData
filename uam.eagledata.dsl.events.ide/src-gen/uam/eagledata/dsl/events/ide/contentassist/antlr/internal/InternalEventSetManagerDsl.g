/*
 * generated by Xtext 2.9.2
 */
grammar InternalEventSetManagerDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uam.eagledata.dsl.events.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uam.eagledata.dsl.events.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uam.eagledata.dsl.events.services.EventSetManagerDslGrammarAccess;

}
@parser::members {
	private EventSetManagerDslGrammarAccess grammarAccess;

	public void setGrammarAccess(EventSetManagerDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleEventSetManager
entryRuleEventSetManager
:
{ before(grammarAccess.getEventSetManagerRule()); }
	 ruleEventSetManager
{ after(grammarAccess.getEventSetManagerRule()); } 
	 EOF 
;

// Rule EventSetManager
ruleEventSetManager 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventSetManagerAccess().getGroup()); }
		(rule__EventSetManager__Group__0)
		{ after(grammarAccess.getEventSetManagerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getGroup()); }
		(rule__Event__Group__0)
		{ after(grammarAccess.getEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getAlternatives()); }
		(rule__Condition__Alternatives)
		{ after(grammarAccess.getConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryExpression
entryRuleBinaryExpression
:
{ before(grammarAccess.getBinaryExpressionRule()); }
	 ruleBinaryExpression
{ after(grammarAccess.getBinaryExpressionRule()); } 
	 EOF 
;

// Rule BinaryExpression
ruleBinaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryExpressionAccess().getGroup()); }
		(rule__BinaryExpression__Group__0)
		{ after(grammarAccess.getBinaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getValueAssignment()); }
		(rule__Literal__ValueAssignment)
		{ after(grammarAccess.getLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getExpressionAssignment()); }
		(rule__BooleanExpression__ExpressionAssignment)
		{ after(grammarAccess.getBooleanExpressionAccess().getExpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcept
entryRuleConcept
:
{ before(grammarAccess.getConceptRule()); }
	 ruleConcept
{ after(grammarAccess.getConceptRule()); } 
	 EOF 
;

// Rule Concept
ruleConcept 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptAccess().getAlternatives()); }
		(rule__Concept__Alternatives)
		{ after(grammarAccess.getConceptAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKeyConcept
entryRuleKeyConcept
:
{ before(grammarAccess.getKeyConceptRule()); }
	 ruleKeyConcept
{ after(grammarAccess.getKeyConceptRule()); } 
	 EOF 
;

// Rule KeyConcept
ruleKeyConcept 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyConceptAccess().getGroup()); }
		(rule__KeyConcept__Group__0)
		{ after(grammarAccess.getKeyConceptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegexConcept
entryRuleRegexConcept
:
{ before(grammarAccess.getRegexConceptRule()); }
	 ruleRegexConcept
{ after(grammarAccess.getRegexConceptRule()); } 
	 EOF 
;

// Rule RegexConcept
ruleRegexConcept 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegexConceptAccess().getGroup()); }
		(rule__RegexConcept__Group__0)
		{ after(grammarAccess.getRegexConceptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionParam
entryRuleActionParam
:
{ before(grammarAccess.getActionParamRule()); }
	 ruleActionParam
{ after(grammarAccess.getActionParamRule()); } 
	 EOF 
;

// Rule ActionParam
ruleActionParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionParamAccess().getAlternatives()); }
		(rule__ActionParam__Alternatives)
		{ after(grammarAccess.getActionParamAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConceptParam
entryRuleConceptParam
:
{ before(grammarAccess.getConceptParamRule()); }
	 ruleConceptParam
{ after(grammarAccess.getConceptParamRule()); } 
	 EOF 
;

// Rule ConceptParam
ruleConceptParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptParamAccess().getGroup()); }
		(rule__ConceptParam__Group__0)
		{ after(grammarAccess.getConceptParamAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringParam
entryRuleStringParam
:
{ before(grammarAccess.getStringParamRule()); }
	 ruleStringParam
{ after(grammarAccess.getStringParamRule()); } 
	 EOF 
;

// Rule StringParam
ruleStringParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringParamAccess().getGroup()); }
		(rule__StringParam__Group__0)
		{ after(grammarAccess.getStringParamAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Type
ruleType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getBinaryExpressionParserRuleCall_0()); }
		ruleBinaryExpression
		{ after(grammarAccess.getConditionAccess().getBinaryExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getBooleanExpressionParserRuleCall_1()); }
		ruleBooleanExpression
		{ after(grammarAccess.getConditionAccess().getBooleanExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAccess().getKeyConceptParserRuleCall_0()); }
		ruleKeyConcept
		{ after(grammarAccess.getConceptAccess().getKeyConceptParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConceptAccess().getRegexConceptParserRuleCall_1()); }
		ruleRegexConcept
		{ after(grammarAccess.getConceptAccess().getRegexConceptParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionParam__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionParamAccess().getConceptParamParserRuleCall_0()); }
		ruleConceptParam
		{ after(grammarAccess.getActionParamAccess().getConceptParamParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionParamAccess().getStringParamParserRuleCall_1()); }
		ruleStringParam
		{ after(grammarAccess.getActionParamAccess().getStringParamParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_0()); }
		('String')
		{ after(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getIntEnumLiteralDeclaration_1()); }
		('Int')
		{ after(grammarAccess.getTypeAccess().getIntEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_2()); }
		('Boolean')
		{ after(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getFloatEnumLiteralDeclaration_3()); }
		('Float')
		{ after(grammarAccess.getTypeAccess().getFloatEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getDoubleEnumLiteralDeclaration_4()); }
		('Double')
		{ after(grammarAccess.getTypeAccess().getDoubleEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventSetManager__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventSetManager__Group__0__Impl
	rule__EventSetManager__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventSetManager__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventSetManagerAccess().getEventsAssignment_0()); }
	(rule__EventSetManager__EventsAssignment_0)
	{ after(grammarAccess.getEventSetManagerAccess().getEventsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventSetManager__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventSetManager__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventSetManager__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventSetManagerAccess().getEventsAssignment_1()); }
	(rule__EventSetManager__EventsAssignment_1)*
	{ after(grammarAccess.getEventSetManagerAccess().getEventsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getEventAction_0()); }
	()
	{ after(grammarAccess.getEventAccess().getEventAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_1()); }
	(rule__Event__Group_1__0)?
	{ after(grammarAccess.getEventAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__2__Impl
	rule__Event__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getPatternKeyword_2()); }
	'pattern'
	{ after(grammarAccess.getEventAccess().getPatternKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__3__Impl
	rule__Event__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getNameAssignment_3()); }
	(rule__Event__NameAssignment_3)
	{ after(grammarAccess.getEventAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__4__Impl
	rule__Event__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getEventAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__5__Impl
	rule__Event__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getConceptsAssignment_5()); }
	(rule__Event__ConceptsAssignment_5)
	{ after(grammarAccess.getEventAccess().getConceptsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__6__Impl
	rule__Event__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getConceptsAssignment_6()); }
	(rule__Event__ConceptsAssignment_6)*
	{ after(grammarAccess.getEventAccess().getConceptsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__7__Impl
	rule__Event__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getEventAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__8__Impl
	rule__Event__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_8()); }
	(rule__Event__Group_8__0)?
	{ after(grammarAccess.getEventAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_9()); }
	(rule__Event__Group_9__0)
	{ after(grammarAccess.getEventAccess().getGroup_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_1__0__Impl
	rule__Event__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getConnectionKeyword_1_0()); }
	'connection'
	{ after(grammarAccess.getEventAccess().getConnectionKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_1__1__Impl
	rule__Event__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getDataconnectionAssignment_1_1()); }
	(rule__Event__DataconnectionAssignment_1_1)
	{ after(grammarAccess.getEventAccess().getDataconnectionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_1_2()); }
	(rule__Event__Group_1_2__0)*
	{ after(grammarAccess.getEventAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_1_2__0__Impl
	rule__Event__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getAndKeyword_1_2_0()); }
	'and'
	{ after(grammarAccess.getEventAccess().getAndKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getDataconnectionAssignment_1_2_1()); }
	(rule__Event__DataconnectionAssignment_1_2_1)
	{ after(grammarAccess.getEventAccess().getDataconnectionAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_8__0__Impl
	rule__Event__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getIfKeyword_8_0()); }
	'if'
	{ after(grammarAccess.getEventAccess().getIfKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getWhenAssignment_8_1()); }
	(rule__Event__WhenAssignment_8_1)
	{ after(grammarAccess.getEventAccess().getWhenAssignment_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_9__0__Impl
	rule__Event__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getThenKeyword_9_0()); }
	'then'
	{ after(grammarAccess.getEventAccess().getThenKeyword_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_9__1__Impl
	rule__Event__Group_9__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getTriggersAssignment_9_1()); }
	(rule__Event__TriggersAssignment_9_1)
	{ after(grammarAccess.getEventAccess().getTriggersAssignment_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_9__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_9__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_9__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getTriggersAssignment_9_2()); }
	(rule__Event__TriggersAssignment_9_2)*
	{ after(grammarAccess.getEventAccess().getTriggersAssignment_9_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryExpression__Group__0__Impl
	rule__BinaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryExpressionAccess().getLeftAssignment_0()); }
	(rule__BinaryExpression__LeftAssignment_0)
	{ after(grammarAccess.getBinaryExpressionAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryExpression__Group__1__Impl
	rule__BinaryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryExpressionAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getBinaryExpressionAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryExpressionAccess().getRightAssignment_2()); }
	(rule__BinaryExpression__RightAssignment_2)
	{ after(grammarAccess.getBinaryExpressionAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__KeyConcept__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyConcept__Group__0__Impl
	rule__KeyConcept__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyConcept__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyConceptAccess().getKeyConceptAction_0()); }
	()
	{ after(grammarAccess.getKeyConceptAccess().getKeyConceptAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyConcept__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyConcept__Group__1__Impl
	rule__KeyConcept__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyConcept__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyConceptAccess().getTypeAssignment_1()); }
	(rule__KeyConcept__TypeAssignment_1)
	{ after(grammarAccess.getKeyConceptAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyConcept__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyConcept__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyConcept__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyConceptAccess().getNameAssignment_2()); }
	(rule__KeyConcept__NameAssignment_2)
	{ after(grammarAccess.getKeyConceptAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegexConcept__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegexConcept__Group__0__Impl
	rule__RegexConcept__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegexConceptAccess().getRegexConceptAction_0()); }
	()
	{ after(grammarAccess.getRegexConceptAccess().getRegexConceptAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegexConcept__Group__1__Impl
	rule__RegexConcept__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegexConceptAccess().getTypeAssignment_1()); }
	(rule__RegexConcept__TypeAssignment_1)
	{ after(grammarAccess.getRegexConceptAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegexConcept__Group__2__Impl
	rule__RegexConcept__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegexConceptAccess().getNameAssignment_2()); }
	(rule__RegexConcept__NameAssignment_2)
	{ after(grammarAccess.getRegexConceptAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegexConcept__Group__3__Impl
	rule__RegexConcept__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegexConceptAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getRegexConceptAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegexConcept__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegexConceptAccess().getRegexAssignment_4()); }
	(rule__RegexConcept__RegexAssignment_4)
	{ after(grammarAccess.getRegexConceptAccess().getRegexAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActionAction_0()); }
	()
	{ after(grammarAccess.getActionAccess().getActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getCallsAssignment_1()); }
	(rule__Action__CallsAssignment_1)
	{ after(grammarAccess.getActionAccess().getCallsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getGroup_2()); }
	(rule__Action__Group_2__0)?
	{ after(grammarAccess.getActionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_2__0__Impl
	rule__Action__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getActionAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_2__1__Impl
	rule__Action__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getParamsAssignment_2_1()); }
	(rule__Action__ParamsAssignment_2_1)
	{ after(grammarAccess.getActionAccess().getParamsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_2__2__Impl
	rule__Action__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getGroup_2_2()); }
	(rule__Action__Group_2_2__0)*
	{ after(grammarAccess.getActionAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getRightParenthesisKeyword_2_3()); }
	')'
	{ after(grammarAccess.getActionAccess().getRightParenthesisKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_2_2__0__Impl
	rule__Action__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getActionAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getParamsAssignment_2_2_1()); }
	(rule__Action__ParamsAssignment_2_2_1)
	{ after(grammarAccess.getActionAccess().getParamsAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConceptParam__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptParam__Group__0__Impl
	rule__ConceptParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptParam__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptParamAccess().getConceptParamAction_0()); }
	()
	{ after(grammarAccess.getConceptParamAccess().getConceptParamAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptParam__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptParam__Group__1__Impl
	rule__ConceptParam__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptParam__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptParamAccess().getKeyAssignment_1()); }
	(rule__ConceptParam__KeyAssignment_1)
	{ after(grammarAccess.getConceptParamAccess().getKeyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptParam__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptParam__Group__2__Impl
	rule__ConceptParam__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptParam__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptParamAccess().getLessThanSignEqualsSignKeyword_2()); }
	'<='
	{ after(grammarAccess.getConceptParamAccess().getLessThanSignEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptParam__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptParam__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptParam__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptParamAccess().getValueAssignment_3()); }
	(rule__ConceptParam__ValueAssignment_3)
	{ after(grammarAccess.getConceptParamAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringParam__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringParam__Group__0__Impl
	rule__StringParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringParam__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringParamAccess().getStringParamAction_0()); }
	()
	{ after(grammarAccess.getStringParamAccess().getStringParamAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringParam__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringParam__Group__1__Impl
	rule__StringParam__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringParam__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringParamAccess().getKeyAssignment_1()); }
	(rule__StringParam__KeyAssignment_1)
	{ after(grammarAccess.getStringParamAccess().getKeyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringParam__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringParam__Group__2__Impl
	rule__StringParam__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringParam__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringParamAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getStringParamAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringParam__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringParam__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringParam__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringParamAccess().getValueAssignment_3()); }
	(rule__StringParam__ValueAssignment_3)
	{ after(grammarAccess.getStringParamAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EventSetManager__EventsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventSetManagerAccess().getEventsEventParserRuleCall_0_0()); }
		ruleEvent
		{ after(grammarAccess.getEventSetManagerAccess().getEventsEventParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventSetManager__EventsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventSetManagerAccess().getEventsEventParserRuleCall_1_0()); }
		ruleEvent
		{ after(grammarAccess.getEventSetManagerAccess().getEventsEventParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__DataconnectionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getDataconnectionEStringParserRuleCall_1_1_0()); }
		ruleEString
		{ after(grammarAccess.getEventAccess().getDataconnectionEStringParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__DataconnectionAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getDataconnectionEStringParserRuleCall_1_2_1_0()); }
		ruleEString
		{ after(grammarAccess.getEventAccess().getDataconnectionEStringParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getNameEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getEventAccess().getNameEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ConceptsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getConceptsConceptParserRuleCall_5_0()); }
		ruleConcept
		{ after(grammarAccess.getEventAccess().getConceptsConceptParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ConceptsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getConceptsConceptParserRuleCall_6_0()); }
		ruleConcept
		{ after(grammarAccess.getEventAccess().getConceptsConceptParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__WhenAssignment_8_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getWhenConditionParserRuleCall_8_1_0()); }
		ruleCondition
		{ after(grammarAccess.getEventAccess().getWhenConditionParserRuleCall_8_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__TriggersAssignment_9_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getTriggersActionParserRuleCall_9_1_0()); }
		ruleAction
		{ after(grammarAccess.getEventAccess().getTriggersActionParserRuleCall_9_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__TriggersAssignment_9_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getTriggersActionParserRuleCall_9_2_0()); }
		ruleAction
		{ after(grammarAccess.getEventAccess().getTriggersActionParserRuleCall_9_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryExpressionAccess().getLeftConceptCrossReference_0_0()); }
		(
			{ before(grammarAccess.getBinaryExpressionAccess().getLeftConceptEStringParserRuleCall_0_0_1()); }
			ruleEString
			{ after(grammarAccess.getBinaryExpressionAccess().getLeftConceptEStringParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getBinaryExpressionAccess().getLeftConceptCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryExpressionAccess().getRightLiteralParserRuleCall_2_0()); }
		ruleLiteral
		{ after(grammarAccess.getBinaryExpressionAccess().getRightLiteralParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getValueEStringParserRuleCall_0()); }
		ruleEString
		{ after(grammarAccess.getLiteralAccess().getValueEStringParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ExpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getExpressionBOOLEANTerminalRuleCall_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getBooleanExpressionAccess().getExpressionBOOLEANTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyConcept__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyConceptAccess().getTypeTypeEnumRuleCall_1_0()); }
		ruleType
		{ after(grammarAccess.getKeyConceptAccess().getTypeTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyConcept__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyConceptAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getKeyConceptAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegexConceptAccess().getTypeTypeEnumRuleCall_1_0()); }
		ruleType
		{ after(grammarAccess.getRegexConceptAccess().getTypeTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegexConceptAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getRegexConceptAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexConcept__RegexAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegexConceptAccess().getRegexEStringParserRuleCall_4_0()); }
		ruleEString
		{ after(grammarAccess.getRegexConceptAccess().getRegexEStringParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__CallsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getCallsEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getActionAccess().getCallsEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ParamsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getParamsActionParamParserRuleCall_2_1_0()); }
		ruleActionParam
		{ after(grammarAccess.getActionAccess().getParamsActionParamParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ParamsAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getParamsActionParamParserRuleCall_2_2_1_0()); }
		ruleActionParam
		{ after(grammarAccess.getActionAccess().getParamsActionParamParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptParam__KeyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptParamAccess().getKeyEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getConceptParamAccess().getKeyEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptParam__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptParamAccess().getValueConceptCrossReference_3_0()); }
		(
			{ before(grammarAccess.getConceptParamAccess().getValueConceptIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConceptParamAccess().getValueConceptIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getConceptParamAccess().getValueConceptCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringParam__KeyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringParamAccess().getKeyEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getStringParamAccess().getKeyEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringParam__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringParamAccess().getValueEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getStringParamAccess().getValueEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
