/**
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.datadesc.ui.quickfix;

import com.google.common.base.Objects;
import eagledata.core.dsl.datadesc.dataDsl.BasicType;
import eagledata.core.dsl.datadesc.dataDsl.Option;
import eagledata.core.dsl.datadesc.dataDsl.PrimitiveNode;
import eagledata.core.dsl.datadesc.dataDsl.StringOption;
import eagledata.core.dsl.datadesc.dataDsl.StringOptionKey;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;

@SuppressWarnings("all")
public class SemanticModification implements ISemanticModification {
  @Override
  public void apply(final EObject element, final IModificationContext context) throws Exception {
    if ((element instanceof PrimitiveNode)) {
      final PrimitiveNode node = ((PrimitiveNode) element);
      BasicType _type = node.getType();
      boolean _notEquals = (!Objects.equal(_type, null));
      if (_notEquals) {
        final BasicType datatype = node.getType();
        List<Option> deletes = new ArrayList<Option>();
        String _literal = datatype.getLiteral();
        switch (_literal) {
          case "int":
            EList<Option> _options = node.getOptions();
            for (final Option option : _options) {
              if ((option instanceof StringOption)) {
                boolean _and = false;
                boolean _and_1 = false;
                StringOptionKey _key = ((StringOption)option).getKey();
                String _literal_1 = _key.getLiteral();
                boolean _equals = _literal_1.equals("null");
                boolean _not = (!_equals);
                if (!_not) {
                  _and_1 = false;
                } else {
                  StringOptionKey _key_1 = ((StringOption)option).getKey();
                  String _literal_2 = _key_1.getLiteral();
                  boolean _equals_1 = _literal_2.equals("separator");
                  boolean _not_1 = (!_equals_1);
                  _and_1 = _not_1;
                }
                if (!_and_1) {
                  _and = false;
                } else {
                  StringOptionKey _key_2 = ((StringOption)option).getKey();
                  String _literal_3 = _key_2.getLiteral();
                  boolean _equals_2 = _literal_3.equals("default");
                  boolean _not_2 = (!_equals_2);
                  _and = _not_2;
                }
                if (_and) {
                  deletes.add(((StringOption)option));
                }
              }
            }
            break;
          case "real":
            EList<Option> _options_1 = node.getOptions();
            for (final Option option_1 : _options_1) {
              if ((option_1 instanceof StringOption)) {
                boolean _and_2 = false;
                boolean _and_3 = false;
                boolean _and_4 = false;
                boolean _and_5 = false;
                boolean _and_6 = false;
                StringOptionKey _key_3 = ((StringOption)option_1).getKey();
                String _literal_4 = _key_3.getLiteral();
                boolean _equals_3 = _literal_4.equals("null");
                boolean _not_3 = (!_equals_3);
                if (!_not_3) {
                  _and_6 = false;
                } else {
                  StringOptionKey _key_4 = ((StringOption)option_1).getKey();
                  String _literal_5 = _key_4.getLiteral();
                  boolean _equals_4 = _literal_5.equals("separator");
                  boolean _not_4 = (!_equals_4);
                  _and_6 = _not_4;
                }
                if (!_and_6) {
                  _and_5 = false;
                } else {
                  StringOptionKey _key_5 = ((StringOption)option_1).getKey();
                  String _literal_6 = _key_5.getLiteral();
                  boolean _equals_5 = _literal_6.equals("default");
                  boolean _not_5 = (!_equals_5);
                  _and_5 = _not_5;
                }
                if (!_and_5) {
                  _and_4 = false;
                } else {
                  StringOptionKey _key_6 = ((StringOption)option_1).getKey();
                  String _literal_7 = _key_6.getLiteral();
                  boolean _equals_6 = _literal_7.equals("decimalchar");
                  boolean _not_6 = (!_equals_6);
                  _and_4 = _not_6;
                }
                if (!_and_4) {
                  _and_3 = false;
                } else {
                  StringOptionKey _key_7 = ((StringOption)option_1).getKey();
                  String _literal_8 = _key_7.getLiteral();
                  boolean _equals_7 = _literal_8.equals("groupchar");
                  boolean _not_7 = (!_equals_7);
                  _and_3 = _not_7;
                }
                if (!_and_3) {
                  _and_2 = false;
                } else {
                  StringOptionKey _key_8 = ((StringOption)option_1).getKey();
                  String _literal_9 = _key_8.getLiteral();
                  boolean _equals_8 = _literal_9.equals("pattern");
                  boolean _not_8 = (!_equals_8);
                  _and_2 = _not_8;
                }
                if (_and_2) {
                  deletes.add(((StringOption)option_1));
                }
              }
            }
            break;
          case "boolean":
            EList<Option> _options_2 = node.getOptions();
            for (final Option option_2 : _options_2) {
              if ((option_2 instanceof StringOption)) {
                boolean _and_7 = false;
                StringOptionKey _key_9 = ((StringOption)option_2).getKey();
                String _literal_10 = _key_9.getLiteral();
                boolean _equals_9 = _literal_10.equals("null");
                boolean _not_9 = (!_equals_9);
                if (!_not_9) {
                  _and_7 = false;
                } else {
                  StringOptionKey _key_10 = ((StringOption)option_2).getKey();
                  String _literal_11 = _key_10.getLiteral();
                  boolean _equals_10 = _literal_11.equals("format");
                  boolean _not_10 = (!_equals_10);
                  _and_7 = _not_10;
                }
                if (_and_7) {
                  deletes.add(((StringOption)option_2));
                }
              }
            }
            break;
          case "date":
            EList<Option> _options_3 = node.getOptions();
            for (final Option option_3 : _options_3) {
              if ((option_3 instanceof StringOption)) {
                boolean _and_8 = false;
                boolean _and_9 = false;
                StringOptionKey _key_11 = ((StringOption)option_3).getKey();
                String _literal_12 = _key_11.getLiteral();
                boolean _equals_11 = _literal_12.equals("null");
                boolean _not_11 = (!_equals_11);
                if (!_not_11) {
                  _and_9 = false;
                } else {
                  StringOptionKey _key_12 = ((StringOption)option_3).getKey();
                  String _literal_13 = _key_12.getLiteral();
                  boolean _equals_12 = _literal_13.equals("format");
                  boolean _not_12 = (!_equals_12);
                  _and_9 = _not_12;
                }
                if (!_and_9) {
                  _and_8 = false;
                } else {
                  StringOptionKey _key_13 = ((StringOption)option_3).getKey();
                  String _literal_14 = _key_13.getLiteral();
                  boolean _equals_13 = _literal_14.equals("separator");
                  boolean _not_13 = (!_equals_13);
                  _and_8 = _not_13;
                }
                if (_and_8) {
                  deletes.add(((StringOption)option_3));
                }
              }
            }
            break;
          case "time":
            EList<Option> _options_4 = node.getOptions();
            for (final Option option_4 : _options_4) {
              if ((option_4 instanceof StringOption)) {
                boolean _and_10 = false;
                boolean _and_11 = false;
                StringOptionKey _key_14 = ((StringOption)option_4).getKey();
                String _literal_15 = _key_14.getLiteral();
                boolean _equals_14 = _literal_15.equals("null");
                boolean _not_14 = (!_equals_14);
                if (!_not_14) {
                  _and_11 = false;
                } else {
                  StringOptionKey _key_15 = ((StringOption)option_4).getKey();
                  String _literal_16 = _key_15.getLiteral();
                  boolean _equals_15 = _literal_16.equals("format");
                  boolean _not_15 = (!_equals_15);
                  _and_11 = _not_15;
                }
                if (!_and_11) {
                  _and_10 = false;
                } else {
                  StringOptionKey _key_16 = ((StringOption)option_4).getKey();
                  String _literal_17 = _key_16.getLiteral();
                  boolean _equals_16 = _literal_17.equals("separator");
                  boolean _not_16 = (!_equals_16);
                  _and_10 = _not_16;
                }
                if (_and_10) {
                  deletes.add(((StringOption)option_4));
                }
              }
            }
            break;
          case "year":
            EList<Option> _options_5 = node.getOptions();
            for (final Option option_5 : _options_5) {
              if ((option_5 instanceof StringOption)) {
                boolean _and_12 = false;
                StringOptionKey _key_17 = ((StringOption)option_5).getKey();
                String _literal_18 = _key_17.getLiteral();
                boolean _equals_17 = _literal_18.equals("null");
                boolean _not_17 = (!_equals_17);
                if (!_not_17) {
                  _and_12 = false;
                } else {
                  StringOptionKey _key_18 = ((StringOption)option_5).getKey();
                  String _literal_19 = _key_18.getLiteral();
                  boolean _equals_18 = _literal_19.equals("format");
                  boolean _not_18 = (!_equals_18);
                  _and_12 = _not_18;
                }
                if (_and_12) {
                  deletes.add(((StringOption)option_5));
                }
              }
            }
            break;
          case "month":
            EList<Option> _options_6 = node.getOptions();
            for (final Option option_6 : _options_6) {
              if ((option_6 instanceof StringOption)) {
                boolean _and_13 = false;
                StringOptionKey _key_19 = ((StringOption)option_6).getKey();
                String _literal_20 = _key_19.getLiteral();
                boolean _equals_19 = _literal_20.equals("null");
                boolean _not_19 = (!_equals_19);
                if (!_not_19) {
                  _and_13 = false;
                } else {
                  StringOptionKey _key_20 = ((StringOption)option_6).getKey();
                  String _literal_21 = _key_20.getLiteral();
                  boolean _equals_20 = _literal_21.equals("format");
                  boolean _not_20 = (!_equals_20);
                  _and_13 = _not_20;
                }
                if (_and_13) {
                  deletes.add(((StringOption)option_6));
                }
              }
            }
            break;
          case "day":
            EList<Option> _options_7 = node.getOptions();
            for (final Option option_7 : _options_7) {
              if ((option_7 instanceof StringOption)) {
                boolean _and_14 = false;
                StringOptionKey _key_21 = ((StringOption)option_7).getKey();
                String _literal_22 = _key_21.getLiteral();
                boolean _equals_21 = _literal_22.equals("null");
                boolean _not_21 = (!_equals_21);
                if (!_not_21) {
                  _and_14 = false;
                } else {
                  StringOptionKey _key_22 = ((StringOption)option_7).getKey();
                  String _literal_23 = _key_22.getLiteral();
                  boolean _equals_22 = _literal_23.equals("format");
                  boolean _not_22 = (!_equals_22);
                  _and_14 = _not_22;
                }
                if (_and_14) {
                  deletes.add(((StringOption)option_7));
                }
              }
            }
            break;
          case "string":
            EList<Option> _options_8 = node.getOptions();
            for (final Option option_8 : _options_8) {
              if ((option_8 instanceof StringOption)) {
                boolean _and_15 = false;
                boolean _and_16 = false;
                StringOptionKey _key_23 = ((StringOption)option_8).getKey();
                String _literal_24 = _key_23.getLiteral();
                boolean _equals_23 = _literal_24.equals("null");
                boolean _not_23 = (!_equals_23);
                if (!_not_23) {
                  _and_16 = false;
                } else {
                  StringOptionKey _key_24 = ((StringOption)option_8).getKey();
                  String _literal_25 = _key_24.getLiteral();
                  boolean _equals_24 = _literal_25.equals("regex");
                  boolean _not_24 = (!_equals_24);
                  _and_16 = _not_24;
                }
                if (!_and_16) {
                  _and_15 = false;
                } else {
                  StringOptionKey _key_25 = ((StringOption)option_8).getKey();
                  String _literal_26 = _key_25.getLiteral();
                  boolean _equals_25 = _literal_26.equals("flags");
                  boolean _not_25 = (!_equals_25);
                  _and_15 = _not_25;
                }
                if (_and_15) {
                  deletes.add(((StringOption)option_8));
                }
              }
            }
            break;
          case "lat":
            EList<Option> _options_9 = node.getOptions();
            for (final Option option_9 : _options_9) {
              if ((option_9 instanceof StringOption)) {
                StringOptionKey _key_26 = ((StringOption)option_9).getKey();
                String _literal_27 = _key_26.getLiteral();
                boolean _equals_26 = _literal_27.equals("null");
                boolean _not_26 = (!_equals_26);
                if (_not_26) {
                  deletes.add(((StringOption)option_9));
                }
              }
            }
            break;
          case "long":
            EList<Option> _options_10 = node.getOptions();
            for (final Option option_10 : _options_10) {
              if ((option_10 instanceof StringOption)) {
                StringOptionKey _key_27 = ((StringOption)option_10).getKey();
                String _literal_28 = _key_27.getLiteral();
                boolean _equals_27 = _literal_28.equals("null");
                boolean _not_27 = (!_equals_27);
                if (_not_27) {
                  deletes.add(((StringOption)option_10));
                }
              }
            }
            break;
        }
        EList<Option> _options_11 = node.getOptions();
        _options_11.removeAll(deletes);
      }
    }
  }
}
