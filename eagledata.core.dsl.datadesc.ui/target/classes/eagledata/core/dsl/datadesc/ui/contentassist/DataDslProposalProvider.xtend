/*
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.datadesc.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.core.runtime.IExtensionRegistry
import org.eclipse.core.runtime.IConfigurationElement
import org.eclipse.core.runtime.Platform
import org.eclipse.xtext.RuleCall
import eagledata.core.dsl.datadesc.dataDsl.DataOption

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class DataDslProposalProvider extends AbstractDataDslProposalProvider {
	public static final String CONNECTION_EXTENSIONS_ID = "eagledata.core.extensions.assistant";
	  /*super.completeEvent_Code(model, assignment, context, acceptor);
	 
	  compute the plain proposal
	  String proposal = event.getName() + "ID";
	 
	  Create and register the completion proposal:
	  The proposal may be null as the createCompletionProposal(..) 
	  methods check for valid prefixes and terminal token conflicts.
	  The acceptor handles null-values gracefully.
	  
	  acceptor.accept(createCompletionProposal(proposal, context));*/
	  
	/*override complete_DataDescription(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_DataDescription(model, ruleCall, context, acceptor)
	}*/
	
	override completeDataDescription_Format(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		val IExtensionRegistry registry = Platform.getExtensionRegistry();
		val IConfigurationElement[] extensions = registry.getConfigurationElementsFor(CONNECTION_EXTENSIONS_ID);
		
		for (ext : extensions) {
			acceptor.accept(createCompletionProposal("\"" + ext.getAttribute("name") + "\"", ext.getAttribute("name"), null, context));
		}
	}
	
	override completeDataOption_Key(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		//super.completeDataOption_Key(model, assignment, context, acceptor)
		val IExtensionRegistry registry = Platform.getExtensionRegistry();
		val IConfigurationElement[] extensions = registry.getConfigurationElementsFor(CONNECTION_EXTENSIONS_ID);
		
		for (ext : extensions) {
			val IConfigurationElement[] children = ext.getChildren("option");
			for(child : children){
				acceptor.accept(createCompletionProposal("\"" + child.getAttribute("key") + "\"", child.getAttribute("key"), null, context));
			}
		}
	}
	
	override completeDataOption_Value(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(model instanceof DataOption){
			val IExtensionRegistry registry = Platform.getExtensionRegistry();
			val IConfigurationElement[] extensions = registry.getConfigurationElementsFor(CONNECTION_EXTENSIONS_ID);
			
			for (ext : extensions) {
				val IConfigurationElement[] children = ext.getChildren("option");
				for(child : children){
					if(child.getAttribute("key").equals(model.key)){
						val String[] values = child.getAttribute("values").split(":");
						for(value : values){
							acceptor.accept(createCompletionProposal("\"" + value + "\"", value, null, context));
						}		
					}
				}
			}
		}	
	}
	/*override completeData(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		val IExtensionRegistry registry = Platform.getExtensionRegistry();
		val IConfigurationElement[] extensions = registry.getConfigurationElementsFor(CONNECTION_EXTENSIONS_ID);
		
		for (ext : extensions) {
			acceptor.accept(createCompletionProposal("\"" + ext.getAttribute("name") + "\"", ext.getAttribute("name"), null, context));
		}
	}*/
}
