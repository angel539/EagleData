/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.ruledetection.ide.contentassist.antlr;

import com.google.inject.Inject;
import eagledata.core.dsl.ruledetection.ide.contentassist.antlr.internal.InternalRuleDetectionDslParser;
import eagledata.core.dsl.ruledetection.services.RuleDetectionDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class RuleDetectionDslParser extends AbstractContentAssistParser {

	@Inject
	private RuleDetectionDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRuleDetectionDslParser createParser() {
		InternalRuleDetectionDslParser result = new InternalRuleDetectionDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getAddingSelectAccess().getAlternatives_1(), "rule__AddingSelect__Alternatives_1");
					put(grammarAccess.getSelectAccess().getAlternatives(), "rule__Select__Alternatives");
					put(grammarAccess.getWhereAccess().getAlternatives_3(), "rule__Where__Alternatives_3");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getOperandAccess().getAlternatives(), "rule__Operand__Alternatives");
					put(grammarAccess.getPlainOperandAccess().getAlternatives(), "rule__PlainOperand__Alternatives");
					put(grammarAccess.getRuleModelAccess().getGroup(), "rule__RuleModel__Group__0");
					put(grammarAccess.getRuleModelAccess().getGroup_0(), "rule__RuleModel__Group_0__0");
					put(grammarAccess.getRuleModelAccess().getGroup_1(), "rule__RuleModel__Group_1__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleAccess().getGroup_5(), "rule__Rule__Group_5__0");
					put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
					put(grammarAccess.getAddingSelectAccess().getGroup(), "rule__AddingSelect__Group__0");
					put(grammarAccess.getSetSelectAccess().getGroup(), "rule__SetSelect__Group__0");
					put(grammarAccess.getSetSelectAccess().getGroup_2(), "rule__SetSelect__Group_2__0");
					put(grammarAccess.getSetSelectAccess().getGroup_2_1(), "rule__SetSelect__Group_2_1__0");
					put(grammarAccess.getSetSelectAccess().getGroup_3(), "rule__SetSelect__Group_3__0");
					put(grammarAccess.getWhereAccess().getGroup(), "rule__Where__Group__0");
					put(grammarAccess.getConcreteRecipientAccess().getGroup(), "rule__ConcreteRecipient__Group__0");
					put(grammarAccess.getWhenAccess().getGroup(), "rule__When__Group__0");
					put(grammarAccess.getComplexExpressionAccess().getGroup(), "rule__ComplexExpression__Group__0");
					put(grammarAccess.getComplexExpressionAccess().getGroup_2(), "rule__ComplexExpression__Group_2__0");
					put(grammarAccess.getComplexOperandAccess().getGroup(), "rule__ComplexOperand__Group__0");
					put(grammarAccess.getMessageAccess().getGroup(), "rule__Message__Group__0");
					put(grammarAccess.getRuleModelAccess().getImportsAssignment_0_0(), "rule__RuleModel__ImportsAssignment_0_0");
					put(grammarAccess.getRuleModelAccess().getImportsAssignment_0_1(), "rule__RuleModel__ImportsAssignment_0_1");
					put(grammarAccess.getRuleModelAccess().getElementsAssignment_1_0(), "rule__RuleModel__ElementsAssignment_1_0");
					put(grammarAccess.getRuleModelAccess().getElementsAssignment_1_1(), "rule__RuleModel__ElementsAssignment_1_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getRuleAccess().getNameAssignment_0(), "rule__Rule__NameAssignment_0");
					put(grammarAccess.getRuleAccess().getEventAssignment_3(), "rule__Rule__EventAssignment_3");
					put(grammarAccess.getRuleAccess().getActionsAssignment_5_0(), "rule__Rule__ActionsAssignment_5_0");
					put(grammarAccess.getRuleAccess().getActionsAssignment_5_1(), "rule__Rule__ActionsAssignment_5_1");
					put(grammarAccess.getQueryAccess().getNameAssignment_0(), "rule__Query__NameAssignment_0");
					put(grammarAccess.getQueryAccess().getSelectAssignment_2(), "rule__Query__SelectAssignment_2");
					put(grammarAccess.getQueryAccess().getWhereAssignment_3(), "rule__Query__WhereAssignment_3");
					put(grammarAccess.getAddingSelectAccess().getOperationAssignment_0(), "rule__AddingSelect__OperationAssignment_0");
					put(grammarAccess.getAddingSelectAccess().getElementAssignment_1_0(), "rule__AddingSelect__ElementAssignment_1_0");
					put(grammarAccess.getAddingSelectAccess().getAllAssignment_1_1(), "rule__AddingSelect__AllAssignment_1_1");
					put(grammarAccess.getSetSelectAccess().getSelectionAssignment_2_0(), "rule__SetSelect__SelectionAssignment_2_0");
					put(grammarAccess.getSetSelectAccess().getSelectionAssignment_2_1_1(), "rule__SetSelect__SelectionAssignment_2_1_1");
					put(grammarAccess.getSetSelectAccess().getOperatorAssignment_3_0(), "rule__SetSelect__OperatorAssignment_3_0");
					put(grammarAccess.getSetSelectAccess().getSelectAssignment_3_1(), "rule__SetSelect__SelectAssignment_3_1");
					put(grammarAccess.getWhereAccess().getLeftAssignment_1(), "rule__Where__LeftAssignment_1");
					put(grammarAccess.getWhereAccess().getLogicalOperatorAssignment_2(), "rule__Where__LogicalOperatorAssignment_2");
					put(grammarAccess.getWhereAccess().getRightVariableAssignment_3_0(), "rule__Where__RightVariableAssignment_3_0");
					put(grammarAccess.getWhereAccess().getRightAssignment_3_1(), "rule__Where__RightAssignment_3_1");
					put(grammarAccess.getConcreteRecipientAccess().getUserAssignment_1(), "rule__ConcreteRecipient__UserAssignment_1");
					put(grammarAccess.getWhenAccess().getLeftAssignment_1(), "rule__When__LeftAssignment_1");
					put(grammarAccess.getWhenAccess().getLogicalOperatorAssignment_2(), "rule__When__LogicalOperatorAssignment_2");
					put(grammarAccess.getWhenAccess().getRightAssignment_3(), "rule__When__RightAssignment_3");
					put(grammarAccess.getPlainExpressionAccess().getPlainOperandAssignment(), "rule__PlainExpression__PlainOperandAssignment");
					put(grammarAccess.getComplexExpressionAccess().getPlainOperandAssignment_1(), "rule__ComplexExpression__PlainOperandAssignment_1");
					put(grammarAccess.getComplexExpressionAccess().getComplexOperandsAssignment_2_0(), "rule__ComplexExpression__ComplexOperandsAssignment_2_0");
					put(grammarAccess.getComplexExpressionAccess().getComplexOperandsAssignment_2_1(), "rule__ComplexExpression__ComplexOperandsAssignment_2_1");
					put(grammarAccess.getNumeralAccess().getValueAssignment(), "rule__Numeral__ValueAssignment");
					put(grammarAccess.getQueryOperandAccess().getQueryAssignment(), "rule__QueryOperand__QueryAssignment");
					put(grammarAccess.getComplexOperandAccess().getOperatorAssignment_0(), "rule__ComplexOperand__OperatorAssignment_0");
					put(grammarAccess.getComplexOperandAccess().getExpressionAssignment_1(), "rule__ComplexOperand__ExpressionAssignment_1");
					put(grammarAccess.getMessageAccess().getNameAssignment_0(), "rule__Message__NameAssignment_0");
					put(grammarAccess.getMessageAccess().getMessageAssignment_3(), "rule__Message__MessageAssignment_3");
					put(grammarAccess.getMessageAccess().getRecipientAssignment_5(), "rule__Message__RecipientAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalRuleDetectionDslParser typedParser = (InternalRuleDetectionDslParser) parser;
			typedParser.entryRuleRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RuleDetectionDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RuleDetectionDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
