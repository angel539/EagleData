/*
 * generated by Xtext 2.9.2
 */
package uam.eagledata.dsl.semanticnodes.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class SemanticNodesDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RepositoryManagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.RepositoryManager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepositoryManagerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cImportKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cImportURIAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImportURIEStringParserRuleCall_1_1_0 = (RuleCall)cImportURIAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cImportKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cImportURIAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cImportURIEStringParserRuleCall_1_2_1_0 = (RuleCall)cImportURIAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRepositoriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRepositoriesRepositoryParserRuleCall_2_0_0 = (RuleCall)cRepositoriesAssignment_2_0.eContents().get(0);
		private final Assignment cRepositoriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRepositoriesRepositoryParserRuleCall_2_1_0 = (RuleCall)cRepositoriesAssignment_2_1.eContents().get(0);
		
		//RepositoryManager semanticmanager::RepositoryManager:
		//	{semanticmanager::RepositoryManager} ('import' importURI+=EString ('import' importURI+=EString)*)?
		//	(repositories+=Repository repositories+=Repository*)?
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::RepositoryManager} ('import' importURI+=EString ('import' importURI+=EString)*)?
		//(repositories+=Repository repositories+=Repository*)?
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::RepositoryManager}
		public Action getRepositoryManagerAction_0() { return cRepositoryManagerAction_0; }
		
		//('import' importURI+=EString ('import' importURI+=EString)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'import'
		public Keyword getImportKeyword_1_0() { return cImportKeyword_1_0; }
		
		//importURI+=EString
		public Assignment getImportURIAssignment_1_1() { return cImportURIAssignment_1_1; }
		
		//EString
		public RuleCall getImportURIEStringParserRuleCall_1_1_0() { return cImportURIEStringParserRuleCall_1_1_0; }
		
		//('import' importURI+=EString)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'import'
		public Keyword getImportKeyword_1_2_0() { return cImportKeyword_1_2_0; }
		
		//importURI+=EString
		public Assignment getImportURIAssignment_1_2_1() { return cImportURIAssignment_1_2_1; }
		
		//EString
		public RuleCall getImportURIEStringParserRuleCall_1_2_1_0() { return cImportURIEStringParserRuleCall_1_2_1_0; }
		
		//(repositories+=Repository repositories+=Repository*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//repositories+=Repository
		public Assignment getRepositoriesAssignment_2_0() { return cRepositoriesAssignment_2_0; }
		
		//Repository
		public RuleCall getRepositoriesRepositoryParserRuleCall_2_0_0() { return cRepositoriesRepositoryParserRuleCall_2_0_0; }
		
		//repositories+=Repository*
		public Assignment getRepositoriesAssignment_2_1() { return cRepositoriesAssignment_2_1; }
		
		//Repository
		public RuleCall getRepositoriesRepositoryParserRuleCall_2_1_0() { return cRepositoriesRepositoryParserRuleCall_2_1_0; }
	}
	public class RepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.Repository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepositoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRepositoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cResourcesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResourcesResourceParserRuleCall_4_0 = (RuleCall)cResourcesAssignment_4.eContents().get(0);
		private final Assignment cResourcesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResourcesResourceParserRuleCall_5_0 = (RuleCall)cResourcesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Repository semanticmanager::Repository:
		//	{semanticmanager::Repository}
		//	'repository' name=QualifiedName
		//	'{' resources+=Resource resources+=Resource* '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::Repository} 'repository' name=QualifiedName '{' resources+=Resource resources+=Resource* '}'
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::Repository}
		public Action getRepositoryAction_0() { return cRepositoryAction_0; }
		
		//'repository'
		public Keyword getRepositoryKeyword_1() { return cRepositoryKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//resources+=Resource
		public Assignment getResourcesAssignment_4() { return cResourcesAssignment_4; }
		
		//Resource
		public RuleCall getResourcesResourceParserRuleCall_4_0() { return cResourcesResourceParserRuleCall_4_0; }
		
		//resources+=Resource*
		public Assignment getResourcesAssignment_5() { return cResourcesAssignment_5; }
		
		//Resource
		public RuleCall getResourcesResourceParserRuleCall_5_0() { return cResourcesResourceParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAnnotationsAnnotationCrossReference_1_1_0 = (CrossReference)cAnnotationsAssignment_1_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationEStringParserRuleCall_1_1_0_1 = (RuleCall)cAnnotationsAnnotationCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommercialAtKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cAnnotationsAnnotationCrossReference_1_2_1_0 = (CrossReference)cAnnotationsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationEStringParserRuleCall_1_2_1_0_1 = (RuleCall)cAnnotationsAnnotationCrossReference_1_2_1_0.eContents().get(1);
		private final Assignment cAssistantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAssistantFormatAssistantCrossReference_2_0 = (CrossReference)cAssistantAssignment_2.eContents().get(0);
		private final RuleCall cAssistantFormatAssistantEStringParserRuleCall_2_0_1 = (RuleCall)cAssistantFormatAssistantCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cResourceElementsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cResourceElementsResourceElementParserRuleCall_5_0_0 = (RuleCall)cResourceElementsAssignment_5_0.eContents().get(0);
		private final Assignment cResourceElementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cResourceElementsResourceElementParserRuleCall_5_1_0 = (RuleCall)cResourceElementsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cMetaDataValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMetaDataValueMetaDataValueParserRuleCall_7_1_0 = (RuleCall)cMetaDataValueAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cMetaDataValueAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cMetaDataValueMetaDataValueParserRuleCall_7_2_1_0 = (RuleCall)cMetaDataValueAssignment_7_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Resource semanticmanager::Resource:
		//	{semanticmanager::Resource} ('@' annotations+=[semanticmanager::Annotation|EString] ('@'
		//	annotations+=[semanticmanager::Annotation|EString])*)?
		//	assistant=[semanticmanager::FormatAssistant|EString]? name=ID '{' (resourceElements+=ResourceElement
		//	resourceElements+=ResourceElement*)?
		//	'}' ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::Resource} ('@' annotations+=[semanticmanager::Annotation|EString] ('@'
		//annotations+=[semanticmanager::Annotation|EString])*)? assistant=[semanticmanager::FormatAssistant|EString]? name=ID
		//'{' (resourceElements+=ResourceElement resourceElements+=ResourceElement*)? '}' ('{' metaDataValue+=MetaDataValue (","
		//metaDataValue+=MetaDataValue)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::Resource}
		public Action getResourceAction_0() { return cResourceAction_0; }
		
		//('@' annotations+=[semanticmanager::Annotation|EString] ('@' annotations+=[semanticmanager::Annotation|EString])*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }
		
		//annotations+=[semanticmanager::Annotation|EString]
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }
		
		//[semanticmanager::Annotation|EString]
		public CrossReference getAnnotationsAnnotationCrossReference_1_1_0() { return cAnnotationsAnnotationCrossReference_1_1_0; }
		
		//EString
		public RuleCall getAnnotationsAnnotationEStringParserRuleCall_1_1_0_1() { return cAnnotationsAnnotationEStringParserRuleCall_1_1_0_1; }
		
		//('@' annotations+=[semanticmanager::Annotation|EString])*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_2_0() { return cCommercialAtKeyword_1_2_0; }
		
		//annotations+=[semanticmanager::Annotation|EString]
		public Assignment getAnnotationsAssignment_1_2_1() { return cAnnotationsAssignment_1_2_1; }
		
		//[semanticmanager::Annotation|EString]
		public CrossReference getAnnotationsAnnotationCrossReference_1_2_1_0() { return cAnnotationsAnnotationCrossReference_1_2_1_0; }
		
		//EString
		public RuleCall getAnnotationsAnnotationEStringParserRuleCall_1_2_1_0_1() { return cAnnotationsAnnotationEStringParserRuleCall_1_2_1_0_1; }
		
		//assistant=[semanticmanager::FormatAssistant|EString]?
		public Assignment getAssistantAssignment_2() { return cAssistantAssignment_2; }
		
		//[semanticmanager::FormatAssistant|EString]
		public CrossReference getAssistantFormatAssistantCrossReference_2_0() { return cAssistantFormatAssistantCrossReference_2_0; }
		
		//EString
		public RuleCall getAssistantFormatAssistantEStringParserRuleCall_2_0_1() { return cAssistantFormatAssistantEStringParserRuleCall_2_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(resourceElements+=ResourceElement resourceElements+=ResourceElement*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//resourceElements+=ResourceElement
		public Assignment getResourceElementsAssignment_5_0() { return cResourceElementsAssignment_5_0; }
		
		//ResourceElement
		public RuleCall getResourceElementsResourceElementParserRuleCall_5_0_0() { return cResourceElementsResourceElementParserRuleCall_5_0_0; }
		
		//resourceElements+=ResourceElement*
		public Assignment getResourceElementsAssignment_5_1() { return cResourceElementsAssignment_5_1; }
		
		//ResourceElement
		public RuleCall getResourceElementsResourceElementParserRuleCall_5_1_0() { return cResourceElementsResourceElementParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }
		
		//metaDataValue+=MetaDataValue
		public Assignment getMetaDataValueAssignment_7_1() { return cMetaDataValueAssignment_7_1; }
		
		//MetaDataValue
		public RuleCall getMetaDataValueMetaDataValueParserRuleCall_7_1_0() { return cMetaDataValueMetaDataValueParserRuleCall_7_1_0; }
		
		//("," metaDataValue+=MetaDataValue)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//metaDataValue+=MetaDataValue
		public Assignment getMetaDataValueAssignment_7_2_1() { return cMetaDataValueAssignment_7_2_1; }
		
		//MetaDataValue
		public RuleCall getMetaDataValueMetaDataValueParserRuleCall_7_2_1_0() { return cMetaDataValueMetaDataValueParserRuleCall_7_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class ResourceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.ResourceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSemanticNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ResourceElement semanticmanager::ResourceElement:
		//	Resource | SemanticNode | Enumeration
		@Override public ParserRule getRule() { return rule; }
		
		//Resource | SemanticNode | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Resource
		public RuleCall getResourceParserRuleCall_0() { return cResourceParserRuleCall_0; }
		
		//SemanticNode
		public RuleCall getSemanticNodeParserRuleCall_1() { return cSemanticNodeParserRuleCall_1; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_2() { return cEnumerationParserRuleCall_2; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLiteralsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLiteralsEnumerationLiteralParserRuleCall_4_0_0 = (RuleCall)cLiteralsAssignment_4_0.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLiteralsEnumerationLiteralParserRuleCall_4_1_0 = (RuleCall)cLiteralsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enumeration semanticmanager::Enumeration:
		//	{semanticmanager::Enumeration}
		//	'enum' name=ID
		//	'{' (literals+=EnumerationLiteral literals+=EnumerationLiteral*)?
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::Enumeration} 'enum' name=ID '{' (literals+=EnumerationLiteral literals+=EnumerationLiteral*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::Enumeration}
		public Action getEnumerationAction_0() { return cEnumerationAction_0; }
		
		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(literals+=EnumerationLiteral literals+=EnumerationLiteral*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//literals+=EnumerationLiteral
		public Assignment getLiteralsAssignment_4_0() { return cLiteralsAssignment_4_0; }
		
		//EnumerationLiteral
		public RuleCall getLiteralsEnumerationLiteralParserRuleCall_4_0_0() { return cLiteralsEnumerationLiteralParserRuleCall_4_0_0; }
		
		//literals+=EnumerationLiteral*
		public Assignment getLiteralsAssignment_4_1() { return cLiteralsAssignment_4_1; }
		
		//EnumerationLiteral
		public RuleCall getLiteralsEnumerationLiteralParserRuleCall_4_1_0() { return cLiteralsEnumerationLiteralParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.EnumerationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralEStringParserRuleCall_3_0 = (RuleCall)cLiteralAssignment_3.eContents().get(0);
		
		//EnumerationLiteral semanticmanager::EnumerationLiteral:
		//	{semanticmanager::EnumerationLiteral} value=EInt '->' literal=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::EnumerationLiteral} value=EInt '->' literal=EString
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::EnumerationLiteral}
		public Action getEnumerationLiteralAction_0() { return cEnumerationLiteralAction_0; }
		
		//value=EInt
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_1_0() { return cValueEIntParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//literal=EString
		public Assignment getLiteralAssignment_3() { return cLiteralAssignment_3; }
		
		//EString
		public RuleCall getLiteralEStringParserRuleCall_3_0() { return cLiteralEStringParserRuleCall_3_0; }
	}
	public class SemanticNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.SemanticNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSemanticNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cNodeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSupersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSupersSemanticNodeCrossReference_4_1_0 = (CrossReference)cSupersAssignment_4_1.eContents().get(0);
		private final RuleCall cSupersSemanticNodeEStringParserRuleCall_4_1_0_1 = (RuleCall)cSupersSemanticNodeCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSupersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cSupersSemanticNodeCrossReference_4_2_1_0 = (CrossReference)cSupersAssignment_4_2_1.eContents().get(0);
		private final RuleCall cSupersSemanticNodeEStringParserRuleCall_4_2_1_0_1 = (RuleCall)cSupersSemanticNodeCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cPropertiesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0_0 = (RuleCall)cPropertiesAssignment_6_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_1_0 = (RuleCall)cPropertiesAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cMetaDataValueAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cMetaDataValueMetaDataValueParserRuleCall_8_1_0 = (RuleCall)cMetaDataValueAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cMetaDataValueAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cMetaDataValueMetaDataValueParserRuleCall_8_2_1_0 = (RuleCall)cMetaDataValueAssignment_8_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//SemanticNode semanticmanager::SemanticNode:
		//	{semanticmanager::SemanticNode} abstract?='abstract'? 'node' name=ID ('<'
		//	supers+=[semanticmanager::SemanticNode|EString] ("," supers+=[semanticmanager::SemanticNode|EString])*)?
		//	'{' (properties+=Property properties+=Property*)?
		//	'}' ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::SemanticNode} abstract?='abstract'? 'node' name=ID ('<'
		//supers+=[semanticmanager::SemanticNode|EString] ("," supers+=[semanticmanager::SemanticNode|EString])*)? '{'
		//(properties+=Property properties+=Property*)? '}' ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::SemanticNode}
		public Action getSemanticNodeAction_0() { return cSemanticNodeAction_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'node'
		public Keyword getNodeKeyword_2() { return cNodeKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('<' supers+=[semanticmanager::SemanticNode|EString] ("," supers+=[semanticmanager::SemanticNode|EString])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }
		
		//supers+=[semanticmanager::SemanticNode|EString]
		public Assignment getSupersAssignment_4_1() { return cSupersAssignment_4_1; }
		
		//[semanticmanager::SemanticNode|EString]
		public CrossReference getSupersSemanticNodeCrossReference_4_1_0() { return cSupersSemanticNodeCrossReference_4_1_0; }
		
		//EString
		public RuleCall getSupersSemanticNodeEStringParserRuleCall_4_1_0_1() { return cSupersSemanticNodeEStringParserRuleCall_4_1_0_1; }
		
		//("," supers+=[semanticmanager::SemanticNode|EString])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//supers+=[semanticmanager::SemanticNode|EString]
		public Assignment getSupersAssignment_4_2_1() { return cSupersAssignment_4_2_1; }
		
		//[semanticmanager::SemanticNode|EString]
		public CrossReference getSupersSemanticNodeCrossReference_4_2_1_0() { return cSupersSemanticNodeCrossReference_4_2_1_0; }
		
		//EString
		public RuleCall getSupersSemanticNodeEStringParserRuleCall_4_2_1_0_1() { return cSupersSemanticNodeEStringParserRuleCall_4_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(properties+=Property properties+=Property*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_6_0() { return cPropertiesAssignment_6_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0_0() { return cPropertiesPropertyParserRuleCall_6_0_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_6_1() { return cPropertiesAssignment_6_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_1_0() { return cPropertiesPropertyParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0() { return cLeftCurlyBracketKeyword_8_0; }
		
		//metaDataValue+=MetaDataValue
		public Assignment getMetaDataValueAssignment_8_1() { return cMetaDataValueAssignment_8_1; }
		
		//MetaDataValue
		public RuleCall getMetaDataValueMetaDataValueParserRuleCall_8_1_0() { return cMetaDataValueMetaDataValueParserRuleCall_8_1_0; }
		
		//("," metaDataValue+=MetaDataValue)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//","
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//metaDataValue+=MetaDataValue
		public Assignment getMetaDataValueAssignment_8_2_1() { return cMetaDataValueAssignment_8_2_1; }
		
		//MetaDataValue
		public RuleCall getMetaDataValueMetaDataValueParserRuleCall_8_2_1_0() { return cMetaDataValueMetaDataValueParserRuleCall_8_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTypeDataPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationDataPropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Property semanticmanager::Property:
		//	ObjectProperty | PrimitiveTypeDataProperty | EnumerationDataProperty
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectProperty | PrimitiveTypeDataProperty | EnumerationDataProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObjectProperty
		public RuleCall getObjectPropertyParserRuleCall_0() { return cObjectPropertyParserRuleCall_0; }
		
		//PrimitiveTypeDataProperty
		public RuleCall getPrimitiveTypeDataPropertyParserRuleCall_1() { return cPrimitiveTypeDataPropertyParserRuleCall_1; }
		
		//EnumerationDataProperty
		public RuleCall getEnumerationDataPropertyParserRuleCall_2() { return cEnumerationDataPropertyParserRuleCall_2; }
	}
	public class ObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.ObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRangeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRangeSemanticNodeCrossReference_3_0 = (CrossReference)cRangeAssignment_3.eContents().get(0);
		private final RuleCall cRangeSemanticNodeEStringParserRuleCall_3_0_1 = (RuleCall)cRangeSemanticNodeCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLowerBoundAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLowerBoundEIntParserRuleCall_4_1_0 = (RuleCall)cLowerBoundAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cUpperBoundAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cUpperBoundEIntParserRuleCall_4_3_0 = (RuleCall)cUpperBoundAssignment_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMetaDataValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMetaDataValueMetaDataValueParserRuleCall_5_1_0 = (RuleCall)cMetaDataValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cMetaDataValueAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cMetaDataValueMetaDataValueParserRuleCall_5_2_1_0 = (RuleCall)cMetaDataValueAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//ObjectProperty semanticmanager::ObjectProperty:
		//	{semanticmanager::ObjectProperty} name=ID '->' range=[semanticmanager::SemanticNode|EString] ('[' lowerBound=EInt ','
		//	upperBound=EInt ']')? ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::ObjectProperty} name=ID '->' range=[semanticmanager::SemanticNode|EString] ('[' lowerBound=EInt ','
		//upperBound=EInt ']')? ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::ObjectProperty}
		public Action getObjectPropertyAction_0() { return cObjectPropertyAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//range=[semanticmanager::SemanticNode|EString]
		public Assignment getRangeAssignment_3() { return cRangeAssignment_3; }
		
		//[semanticmanager::SemanticNode|EString]
		public CrossReference getRangeSemanticNodeCrossReference_3_0() { return cRangeSemanticNodeCrossReference_3_0; }
		
		//EString
		public RuleCall getRangeSemanticNodeEStringParserRuleCall_3_0_1() { return cRangeSemanticNodeEStringParserRuleCall_3_0_1; }
		
		//('[' lowerBound=EInt ',' upperBound=EInt ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_4_1() { return cLowerBoundAssignment_4_1; }
		
		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_4_1_0() { return cLowerBoundEIntParserRuleCall_4_1_0; }
		
		//','
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }
		
		//upperBound=EInt
		public Assignment getUpperBoundAssignment_4_3() { return cUpperBoundAssignment_4_3; }
		
		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_4_3_0() { return cUpperBoundEIntParserRuleCall_4_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_4() { return cRightSquareBracketKeyword_4_4; }
		
		//('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//metaDataValue+=MetaDataValue
		public Assignment getMetaDataValueAssignment_5_1() { return cMetaDataValueAssignment_5_1; }
		
		//MetaDataValue
		public RuleCall getMetaDataValueMetaDataValueParserRuleCall_5_1_0() { return cMetaDataValueMetaDataValueParserRuleCall_5_1_0; }
		
		//("," metaDataValue+=MetaDataValue)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//metaDataValue+=MetaDataValue
		public Assignment getMetaDataValueAssignment_5_2_1() { return cMetaDataValueAssignment_5_2_1; }
		
		//MetaDataValue
		public RuleCall getMetaDataValueMetaDataValueParserRuleCall_5_2_1_0() { return cMetaDataValueMetaDataValueParserRuleCall_5_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class PrimitiveTypeDataPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.PrimitiveTypeDataProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveTypeDataPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLowerBoundAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLowerBoundEIntParserRuleCall_4_1_0 = (RuleCall)cLowerBoundAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cUpperBoundAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cUpperBoundEIntParserRuleCall_4_3_0 = (RuleCall)cUpperBoundAssignment_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMetaDataValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMetaDataValueMetaDataValueParserRuleCall_5_1_0 = (RuleCall)cMetaDataValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cMetaDataValueAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cMetaDataValueMetaDataValueParserRuleCall_5_2_1_0 = (RuleCall)cMetaDataValueAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//PrimitiveTypeDataProperty semanticmanager::PrimitiveTypeDataProperty:
		//	{semanticmanager::PrimitiveTypeDataProperty} name=ID ':' type=Type ('[' lowerBound=EInt ',' upperBound=EInt ']')? ('{'
		//	metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::PrimitiveTypeDataProperty} name=ID ':' type=Type ('[' lowerBound=EInt ',' upperBound=EInt ']')? ('{'
		//metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::PrimitiveTypeDataProperty}
		public Action getPrimitiveTypeDataPropertyAction_0() { return cPrimitiveTypeDataPropertyAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_3_0() { return cTypeTypeEnumRuleCall_3_0; }
		
		//('[' lowerBound=EInt ',' upperBound=EInt ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_4_1() { return cLowerBoundAssignment_4_1; }
		
		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_4_1_0() { return cLowerBoundEIntParserRuleCall_4_1_0; }
		
		//','
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }
		
		//upperBound=EInt
		public Assignment getUpperBoundAssignment_4_3() { return cUpperBoundAssignment_4_3; }
		
		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_4_3_0() { return cUpperBoundEIntParserRuleCall_4_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_4() { return cRightSquareBracketKeyword_4_4; }
		
		//('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//metaDataValue+=MetaDataValue
		public Assignment getMetaDataValueAssignment_5_1() { return cMetaDataValueAssignment_5_1; }
		
		//MetaDataValue
		public RuleCall getMetaDataValueMetaDataValueParserRuleCall_5_1_0() { return cMetaDataValueMetaDataValueParserRuleCall_5_1_0; }
		
		//("," metaDataValue+=MetaDataValue)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//metaDataValue+=MetaDataValue
		public Assignment getMetaDataValueAssignment_5_2_1() { return cMetaDataValueAssignment_5_2_1; }
		
		//MetaDataValue
		public RuleCall getMetaDataValueMetaDataValueParserRuleCall_5_2_1_0() { return cMetaDataValueMetaDataValueParserRuleCall_5_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class EnumerationDataPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.EnumerationDataProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumDataPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEnumerationCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEnumerationEStringParserRuleCall_3_0_1 = (RuleCall)cTypeEnumerationCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLowerBoundAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLowerBoundEIntParserRuleCall_4_1_0 = (RuleCall)cLowerBoundAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cUpperBoundAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cUpperBoundEIntParserRuleCall_4_3_0 = (RuleCall)cUpperBoundAssignment_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMetaDataValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMetaDataValueMetaDataValueParserRuleCall_5_1_0 = (RuleCall)cMetaDataValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cMetaDataValueAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cMetaDataValueMetaDataValueParserRuleCall_5_2_1_0 = (RuleCall)cMetaDataValueAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//EnumerationDataProperty semanticmanager::EnumDataProperty:
		//	{semanticmanager::EnumDataProperty} name=ID ':' type=[semanticmanager::Enumeration|EString] ('[' lowerBound=EInt ','
		//	upperBound=EInt ']')? ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::EnumDataProperty} name=ID ':' type=[semanticmanager::Enumeration|EString] ('[' lowerBound=EInt ','
		//upperBound=EInt ']')? ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::EnumDataProperty}
		public Action getEnumDataPropertyAction_0() { return cEnumDataPropertyAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[semanticmanager::Enumeration|EString]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[semanticmanager::Enumeration|EString]
		public CrossReference getTypeEnumerationCrossReference_3_0() { return cTypeEnumerationCrossReference_3_0; }
		
		//EString
		public RuleCall getTypeEnumerationEStringParserRuleCall_3_0_1() { return cTypeEnumerationEStringParserRuleCall_3_0_1; }
		
		//('[' lowerBound=EInt ',' upperBound=EInt ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_4_1() { return cLowerBoundAssignment_4_1; }
		
		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_4_1_0() { return cLowerBoundEIntParserRuleCall_4_1_0; }
		
		//','
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }
		
		//upperBound=EInt
		public Assignment getUpperBoundAssignment_4_3() { return cUpperBoundAssignment_4_3; }
		
		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_4_3_0() { return cUpperBoundEIntParserRuleCall_4_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_4() { return cRightSquareBracketKeyword_4_4; }
		
		//('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//metaDataValue+=MetaDataValue
		public Assignment getMetaDataValueAssignment_5_1() { return cMetaDataValueAssignment_5_1; }
		
		//MetaDataValue
		public RuleCall getMetaDataValueMetaDataValueParserRuleCall_5_1_0() { return cMetaDataValueMetaDataValueParserRuleCall_5_1_0; }
		
		//("," metaDataValue+=MetaDataValue)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//metaDataValue+=MetaDataValue
		public Assignment getMetaDataValueAssignment_5_2_1() { return cMetaDataValueAssignment_5_2_1; }
		
		//MetaDataValue
		public RuleCall getMetaDataValueMetaDataValueParserRuleCall_5_2_1_0() { return cMetaDataValueMetaDataValueParserRuleCall_5_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class MetaDataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.MetaDataValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMetaDataValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyMetaDataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cKeyMetaDataMetaDataCrossReference_1_0 = (CrossReference)cKeyMetaDataAssignment_1.eContents().get(0);
		private final RuleCall cKeyMetaDataMetaDataEStringParserRuleCall_1_0_1 = (RuleCall)cKeyMetaDataMetaDataCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//MetaDataValue semanticmanager::MetaDataValue:
		//	{semanticmanager::MetaDataValue} keyMetaData=[semanticmanager::MetaData|EString] '=' value=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{semanticmanager::MetaDataValue} keyMetaData=[semanticmanager::MetaData|EString] '=' value=EString
		public Group getGroup() { return cGroup; }
		
		//{semanticmanager::MetaDataValue}
		public Action getMetaDataValueAction_0() { return cMetaDataValueAction_0; }
		
		//keyMetaData=[semanticmanager::MetaData|EString]
		public Assignment getKeyMetaDataAssignment_1() { return cKeyMetaDataAssignment_1; }
		
		//[semanticmanager::MetaData|EString]
		public CrossReference getKeyMetaDataMetaDataCrossReference_1_0() { return cKeyMetaDataMetaDataCrossReference_1_0; }
		
		//EString
		public RuleCall getKeyMetaDataMetaDataEStringParserRuleCall_1_0_1() { return cKeyMetaDataMetaDataEStringParserRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=EString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_0() { return cValueEStringParserRuleCall_3_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.semanticnodes.SemanticNodesDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFloatFloatKeyword_3_0 = (Keyword)cFloatEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDoubleDoubleKeyword_4_0 = (Keyword)cDoubleEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Type returns semanticmanager::Type:
		//	String | Int | Boolean | Float | Double;
		public EnumRule getRule() { return rule; }
		
		//String | Int | Boolean | Float | Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//Int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }
		
		//'Int'
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
		
		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }
		
		//'Boolean'
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
		
		//Float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_3() { return cFloatEnumLiteralDeclaration_3; }
		
		//'Float'
		public Keyword getFloatFloatKeyword_3_0() { return cFloatFloatKeyword_3_0; }
		
		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_4() { return cDoubleEnumLiteralDeclaration_4; }
		
		//'Double'
		public Keyword getDoubleDoubleKeyword_4_0() { return cDoubleDoubleKeyword_4_0; }
	}
	
	private final RepositoryManagerElements pRepositoryManager;
	private final RepositoryElements pRepository;
	private final ResourceElements pResource;
	private final ResourceElementElements pResourceElement;
	private final EnumerationElements pEnumeration;
	private final EnumerationLiteralElements pEnumerationLiteral;
	private final SemanticNodeElements pSemanticNode;
	private final PropertyElements pProperty;
	private final ObjectPropertyElements pObjectProperty;
	private final PrimitiveTypeDataPropertyElements pPrimitiveTypeDataProperty;
	private final EnumerationDataPropertyElements pEnumerationDataProperty;
	private final TypeElements eType;
	private final MetaDataValueElements pMetaDataValue;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public SemanticNodesDslGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pRepositoryManager = new RepositoryManagerElements();
		this.pRepository = new RepositoryElements();
		this.pResource = new ResourceElements();
		this.pResourceElement = new ResourceElementElements();
		this.pEnumeration = new EnumerationElements();
		this.pEnumerationLiteral = new EnumerationLiteralElements();
		this.pSemanticNode = new SemanticNodeElements();
		this.pProperty = new PropertyElements();
		this.pObjectProperty = new ObjectPropertyElements();
		this.pPrimitiveTypeDataProperty = new PrimitiveTypeDataPropertyElements();
		this.pEnumerationDataProperty = new EnumerationDataPropertyElements();
		this.eType = new TypeElements();
		this.pMetaDataValue = new MetaDataValueElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uam.eagledata.dsl.semanticnodes.SemanticNodesDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//RepositoryManager semanticmanager::RepositoryManager:
	//	{semanticmanager::RepositoryManager} ('import' importURI+=EString ('import' importURI+=EString)*)?
	//	(repositories+=Repository repositories+=Repository*)?
	public RepositoryManagerElements getRepositoryManagerAccess() {
		return pRepositoryManager;
	}
	
	public ParserRule getRepositoryManagerRule() {
		return getRepositoryManagerAccess().getRule();
	}
	
	//Repository semanticmanager::Repository:
	//	{semanticmanager::Repository}
	//	'repository' name=QualifiedName
	//	'{' resources+=Resource resources+=Resource* '}'
	public RepositoryElements getRepositoryAccess() {
		return pRepository;
	}
	
	public ParserRule getRepositoryRule() {
		return getRepositoryAccess().getRule();
	}
	
	//Resource semanticmanager::Resource:
	//	{semanticmanager::Resource} ('@' annotations+=[semanticmanager::Annotation|EString] ('@'
	//	annotations+=[semanticmanager::Annotation|EString])*)?
	//	assistant=[semanticmanager::FormatAssistant|EString]? name=ID '{' (resourceElements+=ResourceElement
	//	resourceElements+=ResourceElement*)?
	//	'}' ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//ResourceElement semanticmanager::ResourceElement:
	//	Resource | SemanticNode | Enumeration
	public ResourceElementElements getResourceElementAccess() {
		return pResourceElement;
	}
	
	public ParserRule getResourceElementRule() {
		return getResourceElementAccess().getRule();
	}
	
	//Enumeration semanticmanager::Enumeration:
	//	{semanticmanager::Enumeration}
	//	'enum' name=ID
	//	'{' (literals+=EnumerationLiteral literals+=EnumerationLiteral*)?
	//	'}'
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//EnumerationLiteral semanticmanager::EnumerationLiteral:
	//	{semanticmanager::EnumerationLiteral} value=EInt '->' literal=EString
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return pEnumerationLiteral;
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}
	
	//SemanticNode semanticmanager::SemanticNode:
	//	{semanticmanager::SemanticNode} abstract?='abstract'? 'node' name=ID ('<'
	//	supers+=[semanticmanager::SemanticNode|EString] ("," supers+=[semanticmanager::SemanticNode|EString])*)?
	//	'{' (properties+=Property properties+=Property*)?
	//	'}' ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
	public SemanticNodeElements getSemanticNodeAccess() {
		return pSemanticNode;
	}
	
	public ParserRule getSemanticNodeRule() {
		return getSemanticNodeAccess().getRule();
	}
	
	//Property semanticmanager::Property:
	//	ObjectProperty | PrimitiveTypeDataProperty | EnumerationDataProperty
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//ObjectProperty semanticmanager::ObjectProperty:
	//	{semanticmanager::ObjectProperty} name=ID '->' range=[semanticmanager::SemanticNode|EString] ('[' lowerBound=EInt ','
	//	upperBound=EInt ']')? ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
	public ObjectPropertyElements getObjectPropertyAccess() {
		return pObjectProperty;
	}
	
	public ParserRule getObjectPropertyRule() {
		return getObjectPropertyAccess().getRule();
	}
	
	//PrimitiveTypeDataProperty semanticmanager::PrimitiveTypeDataProperty:
	//	{semanticmanager::PrimitiveTypeDataProperty} name=ID ':' type=Type ('[' lowerBound=EInt ',' upperBound=EInt ']')? ('{'
	//	metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
	public PrimitiveTypeDataPropertyElements getPrimitiveTypeDataPropertyAccess() {
		return pPrimitiveTypeDataProperty;
	}
	
	public ParserRule getPrimitiveTypeDataPropertyRule() {
		return getPrimitiveTypeDataPropertyAccess().getRule();
	}
	
	//EnumerationDataProperty semanticmanager::EnumDataProperty:
	//	{semanticmanager::EnumDataProperty} name=ID ':' type=[semanticmanager::Enumeration|EString] ('[' lowerBound=EInt ','
	//	upperBound=EInt ']')? ('{' metaDataValue+=MetaDataValue ("," metaDataValue+=MetaDataValue)* '}')?
	public EnumerationDataPropertyElements getEnumerationDataPropertyAccess() {
		return pEnumerationDataProperty;
	}
	
	public ParserRule getEnumerationDataPropertyRule() {
		return getEnumerationDataPropertyAccess().getRule();
	}
	
	//enum Type returns semanticmanager::Type:
	//	String | Int | Boolean | Float | Double;
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//MetaDataValue semanticmanager::MetaDataValue:
	//	{semanticmanager::MetaDataValue} keyMetaData=[semanticmanager::MetaData|EString] '=' value=EString
	public MetaDataValueElements getMetaDataValueAccess() {
		return pMetaDataValue;
	}
	
	public ParserRule getMetaDataValueRule() {
		return getMetaDataValueAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
