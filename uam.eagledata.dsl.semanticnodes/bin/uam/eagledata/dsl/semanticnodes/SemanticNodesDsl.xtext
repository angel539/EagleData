// automatically generated by Xtext
//grammar uam.eagledata.dsl.semanticnodes.SemanticNodesDsl with org.eclipse.xtext.common.Terminals
grammar uam.eagledata.dsl.semanticnodes.SemanticNodesDsl with org.eclipse.xtext.xbase.Xbase

import "http://www.core.extremo/SemanticManager" as semanticmanager
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RepositoryManager returns semanticmanager::RepositoryManager:
	{semanticmanager::RepositoryManager}
	('import' importURI+=EString ('import' importURI+=EString)*)?
	(repositories+=Repository (repositories+=Repository)*)?;

Repository returns semanticmanager::Repository:
	{semanticmanager::Repository}
	'repository' name = QualifiedName
		'{' resources+=Resource (resources+=Resource)* '}';

Resource returns semanticmanager::Resource:
	{semanticmanager::Resource}
	('@'annotations+=[semanticmanager::Annotation|EString] ('@'annotations+=[semanticmanager::Annotation|EString])*)?
	(assistant=[semanticmanager::FormatAssistant|EString])? name=ID '{'
		(resourceElements+=ResourceElement (resourceElements+=ResourceElement)*)?
	'}'
	('{' metaDataValue+=MetaDataValue ( "," metaDataValue+=MetaDataValue)* '}' )?;

ResourceElement returns semanticmanager::ResourceElement:
	Resource | SemanticNode | Enumeration;

Enumeration returns semanticmanager::Enumeration:
	{semanticmanager::Enumeration}
	'enum' name=ID
	'{'
		(literals+=EnumerationLiteral (literals+=EnumerationLiteral)*)?
	'}';

EnumerationLiteral returns semanticmanager::EnumerationLiteral:
	{semanticmanager::EnumerationLiteral}
	value=EInt '->' literal=EString;

SemanticNode returns semanticmanager::SemanticNode:
	{semanticmanager::SemanticNode}
	(abstract?='abstract')? 'node' name=ID ('<' supers+=[semanticmanager::SemanticNode|EString] ( "," supers+=[semanticmanager::SemanticNode|EString])*)?
	'{'
		(properties+=Property (properties+=Property)*)?
	'}'
	('{' metaDataValue+=MetaDataValue ( "," metaDataValue+=MetaDataValue)* '}')?;

Property returns semanticmanager::Property:
	ObjectProperty | PrimitiveTypeDataProperty | EnumerationDataProperty;

ObjectProperty returns semanticmanager::ObjectProperty:
	{semanticmanager::ObjectProperty}
	name=ID '->' range=[semanticmanager::SemanticNode|EString] ('[' lowerBound=EInt ',' upperBound=EInt ']')?
	('{' metaDataValue+=MetaDataValue ( "," metaDataValue+=MetaDataValue)* '}')?;

PrimitiveTypeDataProperty returns semanticmanager::PrimitiveTypeDataProperty:
	{semanticmanager::PrimitiveTypeDataProperty}
	name=ID ':' type=Type ('[' lowerBound=EInt ',' upperBound=EInt ']')?
	('{' metaDataValue+=MetaDataValue ( "," metaDataValue+=MetaDataValue)* '}' )?;
	
EnumerationDataProperty returns semanticmanager::EnumDataProperty:
	{semanticmanager::EnumDataProperty}
	name=ID ':' type=[semanticmanager::Enumeration|EString] ('[' lowerBound=EInt ',' upperBound=EInt ']')?
	('{' metaDataValue+=MetaDataValue ( "," metaDataValue+=MetaDataValue)* '}' )?;

enum Type returns semanticmanager::Type:
				String = 'String' | Int = 'Int' | Boolean = 'Boolean' | Float = 'Float' | Double = 'Double';

MetaDataValue returns semanticmanager::MetaDataValue:
	{semanticmanager::MetaDataValue}
	keyMetaData=[semanticmanager::MetaData|EString] '=' value=EString;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';
/*

RepositoryManager returns RepositoryManager:
	{RepositoryManager}
	'RepositoryManager'
	'{'
		('repositories' '{' repositories+=Repository ( "," repositories+=Repository)* '}' )?
		('configurations' '{' configurations+=SearchConfiguration ( "," configurations+=SearchConfiguration)* '}' )?
		('interpreters' '{' interpreters+=ConstraintInterpreter ( "," interpreters+=ConstraintInterpreter)* '}' )?
		('services' '{' services+=Service ( "," services+=Service)* '}' )?
	'}';

SearchConfiguration returns SearchConfiguration:
	CompositeSearchConfiguration | CustomSearch | PredicateBasedSearch;

NamedElement returns NamedElement:
	SemanticGroup | Resource | SemanticNode | ObjectProperty | DataProperty | Enumeration;

ResourceElement returns ResourceElement:
	Resource | SemanticNode;

Property returns Property:
	ObjectProperty | DataProperty;

SearchResult returns SearchResult:
	AtomicSearchResult | GroupedSearchResult;

SearchParam returns SearchParam:
	PrimitiveTypeParam | ModelTypeParam;

SearchParamValue returns SearchParamValue:
	ModelTypeParamValue | PrimitiveTypeParamValue;

Repository returns Repository:
	{Repository}
	'Repository'
	name=EString
	'{'
		('project' project=EString)?
		('description' description=EString)?
		('resources' '{' resources+=Resource ( "," resources+=Resource)* '}' )?
	'}';

ConstraintInterpreter returns ConstraintInterpreter:
	{ConstraintInterpreter}
	'ConstraintInterpreter'
	name=EString
	'{'
		('id' id=EString)?
		('type' type=EString)?
		('constraints' '(' constraints+=[Constraint|EString] ( "," constraints+=[Constraint|EString])* ')' )?
		('evals' '{' evals+=ConstraintResult ( "," evals+=ConstraintResult)* '}' )?
	'}';

Service returns Service:
	{Service}
	'Service'
	id=EString
	'{'
		('name' name=EString)?
		('filterBy' filterBy=Type)?
	'}';

Resource returns Resource:
	{Resource}
	(drawn?='drawn')?
	(active?='active')?
	'Resource'
	name=EString
	'{'
		('description' description=EString)?
		('weight' weight=EInt)?
		('trace' trace=JavaObject)?
		('alive' alive=EBoolean)?
		('assistant' assistant=EString)?
		('uri' uri=EString)?
		('descriptors' '(' descriptors+=[NamedElement|EString] ( "," descriptors+=[NamedElement|EString])* ')' )?
		('describes' '(' describes+=[NamedElement|EString] ( "," describes+=[NamedElement|EString])* ')' )?
		('supers' '(' supers+=[NamedElement|EString] ( "," supers+=[NamedElement|EString])* ')' )?
		('subs' '(' subs+=[NamedElement|EString] ( "," subs+=[NamedElement|EString])* ')' )?
		('defaultConstraintInterpreter' defaultConstraintInterpreter=[ConstraintInterpreter|EString])?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('metadata' '{' metadata+=MetaData ( "," metadata+=MetaData)* '}' )?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('resourceElements' '{' resourceElements+=ResourceElement ( "," resourceElements+=ResourceElement)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Constraint returns Constraint:
	{Constraint}
	'Constraint'
	name=EString
	'{'
		('type' type=EString)?
		('body' body=EString)?
		('evaluations' '(' evaluations+=[ConstraintResult|EString] ( "," evaluations+=[ConstraintResult|EString])* ')' )?
		('interpreter' interpreter=[ConstraintInterpreter|EString])?
	'}';

SemanticGroup returns SemanticGroup:
	{SemanticGroup}
	(drawn?='drawn')?
	'SemanticGroup'
	name=EString
	'{'
		('description' description=EString)?
		('weight' weight=EInt)?
		('trace' trace=JavaObject)?
		('descriptors' '(' descriptors+=[NamedElement|EString] ( "," descriptors+=[NamedElement|EString])* ')' )?
		('describes' '(' describes+=[NamedElement|EString] ( "," describes+=[NamedElement|EString])* ')' )?
		('supers' '(' supers+=[NamedElement|EString] ( "," supers+=[NamedElement|EString])* ')' )?
		('subs' '(' subs+=[NamedElement|EString] ( "," subs+=[NamedElement|EString])* ')' )?
		('elements' '(' elements+=[NamedElement|EString] ( "," elements+=[NamedElement|EString])* ')' )?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('metadata' '{' metadata+=MetaData ( "," metadata+=MetaData)* '}' )?
	'}';

SemanticNode returns SemanticNode:
	{SemanticNode}
	(drawn?='drawn')?
	(abstract?='abstract')?
	'SemanticNode'
	name=EString
	'{'
		('description' description=EString)?
		('weight' weight=EInt)?
		('trace' trace=JavaObject)?
		('descriptors' '(' descriptors+=[NamedElement|EString] ( "," descriptors+=[NamedElement|EString])* ')' )?
		('describes' '(' describes+=[NamedElement|EString] ( "," describes+=[NamedElement|EString])* ')' )?
		('supers' '(' supers+=[NamedElement|EString] ( "," supers+=[NamedElement|EString])* ')' )?
		('subs' '(' subs+=[NamedElement|EString] ( "," subs+=[NamedElement|EString])* ')' )?
		('domain' '(' domain+=[ObjectProperty|EString] ( "," domain+=[ObjectProperty|EString])* ')' )?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('metadata' '{' metadata+=MetaData ( "," metadata+=MetaData)* '}' )?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

ObjectProperty returns ObjectProperty:
	{ObjectProperty}
	(drawn?='drawn')?
	'ObjectProperty'
	name=EString
	'{'
		('description' description=EString)?
		('weight' weight=EInt)?
		('trace' trace=JavaObject)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('descriptors' '(' descriptors+=[NamedElement|EString] ( "," descriptors+=[NamedElement|EString])* ')' )?
		('describes' '(' describes+=[NamedElement|EString] ( "," describes+=[NamedElement|EString])* ')' )?
		('supers' '(' supers+=[NamedElement|EString] ( "," supers+=[NamedElement|EString])* ')' )?
		('subs' '(' subs+=[NamedElement|EString] ( "," subs+=[NamedElement|EString])* ')' )?
		('range' range=[SemanticNode|EString])?
		('inverseOf' inverseOf=[ObjectProperty|EString])?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('metadata' '{' metadata+=MetaData ( "," metadata+=MetaData)* '}' )?
	'}';

DataProperty returns DataProperty:
	{DataProperty}
	(drawn?='drawn')?
	'DataProperty'
	name=EString
	'{'
		('description' description=EString)?
		('weight' weight=EInt)?
		('trace' trace=JavaObject)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('type' type=Type)?
		('value' value=EString)?
		('descriptors' '(' descriptors+=[NamedElement|EString] ( "," descriptors+=[NamedElement|EString])* ')' )?
		('describes' '(' describes+=[NamedElement|EString] ( "," describes+=[NamedElement|EString])* ')' )?
		('supers' '(' supers+=[NamedElement|EString] ( "," supers+=[NamedElement|EString])* ')' )?
		('subs' '(' subs+=[NamedElement|EString] ( "," subs+=[NamedElement|EString])* ')' )?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('metadata' '{' metadata+=MetaData ( "," metadata+=MetaData)* '}' )?
	'}';

Enumeration returns Enumeration:
	{Enumeration}
	(drawn?='drawn')?
	'Enumeration'
	name=EString
	'{'
		('description' description=EString)?
		('weight' weight=EInt)?
		('trace' trace=JavaObject)?
		('descriptors' '(' descriptors+=[NamedElement|EString] ( "," descriptors+=[NamedElement|EString])* ')' )?
		('describes' '(' describes+=[NamedElement|EString] ( "," describes+=[NamedElement|EString])* ')' )?
		('supers' '(' supers+=[NamedElement|EString] ( "," supers+=[NamedElement|EString])* ')' )?
		('subs' '(' subs+=[NamedElement|EString] ( "," subs+=[NamedElement|EString])* ')' )?
		('constraints' '{' constraints+=Constraint ( "," constraints+=Constraint)* '}' )?
		('metadata' '{' metadata+=MetaData ( "," metadata+=MetaData)* '}' )?
		('literals' '{' literals+=EnumerationLiteral ( "," literals+=EnumerationLiteral)* '}' )?
	'}';

enum Type returns Type:
				String = 'String' | Int = 'Int' | Boolean = 'Boolean' | Float = 'Float' | Double = 'Double';

EnumerationLiteral returns EnumerationLiteral:
	{EnumerationLiteral}
	'EnumerationLiteral'
	'{'
		('value' value=EInt)?
		('literal' literal=EString)?
	'}';

ConstraintResult returns ConstraintResult:
	{ConstraintResult}
	'ConstraintResult'
	'{'
		('constraint' constraint=[Constraint|EString])?
		('context' context=[Resource|EString])?
		('unsat' '(' unsat+=[NamedElement|EString] ( "," unsat+=[NamedElement|EString])* ')' )?
	'}';

CompositeSearchConfiguration returns CompositeSearchConfiguration:
	{CompositeSearchConfiguration}
	'CompositeSearchConfiguration'
	id=EString
	'{'
		('name' name=EString)?
		('type' type=ConnectionType)?
		('inputSearchResults' '(' inputSearchResults+=[SearchResult|EString] ( "," inputSearchResults+=[SearchResult|EString])* ')' )?
		('results' '{' results+=SearchResult ( "," results+=SearchResult)* '}' )?
		('children' '{' children+=CompositeSearchConfiguration ( "," children+=CompositeSearchConfiguration)* '}' )?
	'}';

CustomSearch returns CustomSearch:
	{CustomSearch}
	(grouped?='grouped')?
	'CustomSearch'
	id=EString
	'{'
		('name' name=EString)?
		('description' description=EString)?
		('filterBy' filterBy=DataModelType)?
		('results' '{' results+=SearchResult ( "," results+=SearchResult)* '}' )?
		('options' '{' options+=SearchParam ( "," options+=SearchParam)* '}' )?
	'}';

PredicateBasedSearch returns PredicateBasedSearch:
	{PredicateBasedSearch}
	'PredicateBasedSearch'
	id=EString
	'{'
		('name' name=EString)?
		('description' description=EString)?
		('filterBy' filterBy=DataModelType)?
		('results' '{' results+=SearchResult ( "," results+=SearchResult)* '}' )?
		('options' '{' options+=SearchParam ( "," options+=SearchParam)* '}' )?
	'}';

AtomicSearchResult returns AtomicSearchResult:
	{AtomicSearchResult}
	'AtomicSearchResult'
	'{'
		('applyOnElements' '(' applyOnElements+=[NamedElement|EString] ( "," applyOnElements+=[NamedElement|EString])* ')' )?
		('elements' '(' elements+=[NamedElement|EString] ( "," elements+=[NamedElement|EString])* ')' )?
		('values' '{' values+=SearchParamValue ( "," values+=SearchParamValue)* '}' )?
	'}';

GroupedSearchResult returns GroupedSearchResult:
	{GroupedSearchResult}
	'GroupedSearchResult'
	'{'
		('applyOnElements' '(' applyOnElements+=[NamedElement|EString] ( "," applyOnElements+=[NamedElement|EString])* ')' )?
		('values' '{' values+=SearchParamValue ( "," values+=SearchParamValue)* '}' )?
		('groups' '{' groups+=SemanticGroup ( "," groups+=SemanticGroup)* '}' )?
	'}';

ModelTypeParamValue returns ModelTypeParamValue:
	{ModelTypeParamValue}
	'ModelTypeParamValue'
	'{'
		('option' option=[ModelTypeParam|EString])?
		('value' value=[NamedElement|EString])?
	'}';

PrimitiveTypeParamValue returns PrimitiveTypeParamValue:
	{PrimitiveTypeParamValue}
	'PrimitiveTypeParamValue'
	'{'
		('value' value=EString)?
		('option' option=[PrimitiveTypeParam|EString])?
		('calls' calls=[Service|EString])?
	'}';

ModelTypeParam returns ModelTypeParam:
	{ModelTypeParam}
	'ModelTypeParam'
	name=EString
	'{'
		('id' id=EString)?
		('type' type=DataModelType)?
	'}';

enum DataModelType returns DataModelType:
				Resource = 'Resource' | SemanticNode = 'SemanticNode' | DataProperty = 'DataProperty' | ObjectProperty = 'ObjectProperty';

PrimitiveTypeParam returns PrimitiveTypeParam:
	{PrimitiveTypeParam}
	'PrimitiveTypeParam'
	name=EString
	'{'
		('id' id=EString)?
		('type' type=Type)?
	'}';

enum ConnectionType returns ConnectionType:
				or = 'or' | and = 'and' | not = 'not';

*/