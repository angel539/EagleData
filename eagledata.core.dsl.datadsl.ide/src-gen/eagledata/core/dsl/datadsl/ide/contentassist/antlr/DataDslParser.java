/*
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.datadsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import eagledata.core.dsl.datadsl.ide.contentassist.antlr.internal.InternalDataDslParser;
import eagledata.core.dsl.datadsl.services.DataDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class DataDslParser extends AbstractContentAssistParser {

	@Inject
	private DataDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDataDslParser createParser() {
		InternalDataDslParser result = new InternalDataDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDataDescriptionAccess().getAlternatives(), "rule__DataDescription__Alternatives");
					put(grammarAccess.getFormatSpecificationAccess().getAlternatives(), "rule__FormatSpecification__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getTypeSpecificationAccess().getAlternatives(), "rule__TypeSpecification__Alternatives");
					put(grammarAccess.getDataTypeAccess().getAlternatives_1(), "rule__DataType__Alternatives_1");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getFormatKindAccess().getAlternatives(), "rule__FormatKind__Alternatives");
					put(grammarAccess.getTypeKindAccess().getAlternatives(), "rule__TypeKind__Alternatives");
					put(grammarAccess.getDataModelAccess().getGroup(), "rule__DataModel__Group__0");
					put(grammarAccess.getDataModelAccess().getGroup_1(), "rule__DataModel__Group_1__0");
					put(grammarAccess.getDataModelAccess().getGroup_1_2(), "rule__DataModel__Group_1_2__0");
					put(grammarAccess.getDataModelAccess().getGroup_4(), "rule__DataModel__Group_4__0");
					put(grammarAccess.getDataSourceAccess().getGroup(), "rule__DataSource__Group__0");
					put(grammarAccess.getDataSourceAccess().getGroup_3(), "rule__DataSource__Group_3__0");
					put(grammarAccess.getDataSourceAccess().getGroup_3_1(), "rule__DataSource__Group_3_1__0");
					put(grammarAccess.getDataSourceAccess().getGroup_4(), "rule__DataSource__Group_4__0");
					put(grammarAccess.getDataSourceAccess().getGroup_4_2(), "rule__DataSource__Group_4_2__0");
					put(grammarAccess.getDataSourceAccess().getGroup_7(), "rule__DataSource__Group_7__0");
					put(grammarAccess.getDataSourceAccess().getGroup_7_1(), "rule__DataSource__Group_7_1__0");
					put(grammarAccess.getDataSourceAccess().getGroup_9(), "rule__DataSource__Group_9__0");
					put(grammarAccess.getDataSourceAccess().getGroup_9_2(), "rule__DataSource__Group_9_2__0");
					put(grammarAccess.getDataFragmentAccess().getGroup(), "rule__DataFragment__Group__0");
					put(grammarAccess.getDataFragmentAccess().getGroup_4(), "rule__DataFragment__Group_4__0");
					put(grammarAccess.getDataFragmentAccess().getGroup_4_1(), "rule__DataFragment__Group_4_1__0");
					put(grammarAccess.getOptionAccess().getGroup(), "rule__Option__Group__0");
					put(grammarAccess.getOptionAccess().getGroup_5(), "rule__Option__Group_5__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup(), "rule__CompositeNode__Group__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_4(), "rule__CompositeNode__Group_4__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_4_2(), "rule__CompositeNode__Group_4_2__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_5(), "rule__CompositeNode__Group_5__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_5_2(), "rule__CompositeNode__Group_5_2__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_5_2_1(), "rule__CompositeNode__Group_5_2_1__0");
					put(grammarAccess.getLeafNodeAccess().getGroup(), "rule__LeafNode__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup_2(), "rule__DataType__Group_2__0");
					put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup_3(), "rule__Reference__Group_3__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getDataModelAccess().getImportURIAssignment_1_1(), "rule__DataModel__ImportURIAssignment_1_1");
					put(grammarAccess.getDataModelAccess().getImportURIAssignment_1_2_1(), "rule__DataModel__ImportURIAssignment_1_2_1");
					put(grammarAccess.getDataModelAccess().getDescriptionsAssignment_3(), "rule__DataModel__DescriptionsAssignment_3");
					put(grammarAccess.getDataModelAccess().getDescriptionsAssignment_4_1(), "rule__DataModel__DescriptionsAssignment_4_1");
					put(grammarAccess.getDataSourceAccess().getFormatAssignment_1(), "rule__DataSource__FormatAssignment_1");
					put(grammarAccess.getDataSourceAccess().getNameAssignment_2(), "rule__DataSource__NameAssignment_2");
					put(grammarAccess.getDataSourceAccess().getLinkAssignment_3_0(), "rule__DataSource__LinkAssignment_3_0");
					put(grammarAccess.getDataSourceAccess().getLinkAssignment_3_1_1(), "rule__DataSource__LinkAssignment_3_1_1");
					put(grammarAccess.getDataSourceAccess().getFragmentsAssignment_4_1(), "rule__DataSource__FragmentsAssignment_4_1");
					put(grammarAccess.getDataSourceAccess().getFragmentsAssignment_4_2_1(), "rule__DataSource__FragmentsAssignment_4_2_1");
					put(grammarAccess.getDataSourceAccess().getNodesAssignment_7_0(), "rule__DataSource__NodesAssignment_7_0");
					put(grammarAccess.getDataSourceAccess().getNodesAssignment_7_1_1(), "rule__DataSource__NodesAssignment_7_1_1");
					put(grammarAccess.getDataSourceAccess().getOptionsAssignment_9_1(), "rule__DataSource__OptionsAssignment_9_1");
					put(grammarAccess.getDataSourceAccess().getOptionsAssignment_9_2_1(), "rule__DataSource__OptionsAssignment_9_2_1");
					put(grammarAccess.getDataFragmentAccess().getNameAssignment_1(), "rule__DataFragment__NameAssignment_1");
					put(grammarAccess.getDataFragmentAccess().getNodesAssignment_4_0(), "rule__DataFragment__NodesAssignment_4_0");
					put(grammarAccess.getDataFragmentAccess().getNodesAssignment_4_1_1(), "rule__DataFragment__NodesAssignment_4_1_1");
					put(grammarAccess.getFormatSpecificationAccess().getSpecialFormatAssignment_0(), "rule__FormatSpecification__SpecialFormatAssignment_0");
					put(grammarAccess.getFormatSpecificationAccess().getFormatAssignment_1(), "rule__FormatSpecification__FormatAssignment_1");
					put(grammarAccess.getOptionAccess().getKeyAssignment_1(), "rule__Option__KeyAssignment_1");
					put(grammarAccess.getOptionAccess().getValuesAssignment_4(), "rule__Option__ValuesAssignment_4");
					put(grammarAccess.getOptionAccess().getValuesAssignment_5_1(), "rule__Option__ValuesAssignment_5_1");
					put(grammarAccess.getCompositeNodeAccess().getEnvironmentAssignment_1(), "rule__CompositeNode__EnvironmentAssignment_1");
					put(grammarAccess.getCompositeNodeAccess().getNameAssignment_2(), "rule__CompositeNode__NameAssignment_2");
					put(grammarAccess.getCompositeNodeAccess().getRepresentedAsAssignment_3(), "rule__CompositeNode__RepresentedAsAssignment_3");
					put(grammarAccess.getCompositeNodeAccess().getExtendsAssignment_4_1(), "rule__CompositeNode__ExtendsAssignment_4_1");
					put(grammarAccess.getCompositeNodeAccess().getExtendsAssignment_4_2_1(), "rule__CompositeNode__ExtendsAssignment_4_2_1");
					put(grammarAccess.getCompositeNodeAccess().getSubnodesAssignment_5_2_0(), "rule__CompositeNode__SubnodesAssignment_5_2_0");
					put(grammarAccess.getCompositeNodeAccess().getSubnodesAssignment_5_2_1_1(), "rule__CompositeNode__SubnodesAssignment_5_2_1_1");
					put(grammarAccess.getLeafNodeAccess().getKeyAssignment_1(), "rule__LeafNode__KeyAssignment_1");
					put(grammarAccess.getLeafNodeAccess().getUniqueAssignment_2(), "rule__LeafNode__UniqueAssignment_2");
					put(grammarAccess.getLeafNodeAccess().getTypeAssignment_3(), "rule__LeafNode__TypeAssignment_3");
					put(grammarAccess.getLeafNodeAccess().getKeywordAssignment_4(), "rule__LeafNode__KeywordAssignment_4");
					put(grammarAccess.getLeafNodeAccess().getNameAssignment_5(), "rule__LeafNode__NameAssignment_5");
					put(grammarAccess.getLeafNodeAccess().getRepresentedAsAssignment_6(), "rule__LeafNode__RepresentedAsAssignment_6");
					put(grammarAccess.getDataTypeAccess().getSpecialTypeAssignment_1_0(), "rule__DataType__SpecialTypeAssignment_1_0");
					put(grammarAccess.getDataTypeAccess().getTypeAssignment_1_1(), "rule__DataType__TypeAssignment_1_1");
					put(grammarAccess.getDataTypeAccess().getMinAssignment_2_1(), "rule__DataType__MinAssignment_2_1");
					put(grammarAccess.getDataTypeAccess().getMaxAssignment_2_3(), "rule__DataType__MaxAssignment_2_3");
					put(grammarAccess.getReferenceAccess().getReferenceTypeAssignment_2(), "rule__Reference__ReferenceTypeAssignment_2");
					put(grammarAccess.getReferenceAccess().getMinAssignment_3_1(), "rule__Reference__MinAssignment_3_1");
					put(grammarAccess.getReferenceAccess().getMaxAssignment_3_3(), "rule__Reference__MaxAssignment_3_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalDataDslParser typedParser = (InternalDataDslParser) parser;
			typedParser.entryRuleDataModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DataDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DataDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
