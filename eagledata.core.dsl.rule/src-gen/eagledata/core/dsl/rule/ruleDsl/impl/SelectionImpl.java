/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.rule.ruleDsl.impl;

import eagledata.core.dsl.pattern.streamingDsl.Concept;

import eagledata.core.dsl.rule.ruleDsl.RuleDslPackage;
import eagledata.core.dsl.rule.ruleDsl.Selection;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Selection</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eagledata.core.dsl.rule.ruleDsl.impl.SelectionImpl#getSelector <em>Selector</em>}</li>
 *   <li>{@link eagledata.core.dsl.rule.ruleDsl.impl.SelectionImpl#getRoot <em>Root</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectionImpl extends MinimalEObjectImpl.Container implements Selection
{
  /**
   * The cached value of the '{@link #getSelector() <em>Selector</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelector()
   * @generated
   * @ordered
   */
  protected Concept selector;

  /**
   * The cached value of the '{@link #getRoot() <em>Root</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoot()
   * @generated
   * @ordered
   */
  protected EList<Concept> root;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RuleDslPackage.Literals.SELECTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept getSelector()
  {
    if (selector != null && selector.eIsProxy())
    {
      InternalEObject oldSelector = (InternalEObject)selector;
      selector = (Concept)eResolveProxy(oldSelector);
      if (selector != oldSelector)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RuleDslPackage.SELECTION__SELECTOR, oldSelector, selector));
      }
    }
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept basicGetSelector()
  {
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSelector(Concept newSelector)
  {
    Concept oldSelector = selector;
    selector = newSelector;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDslPackage.SELECTION__SELECTOR, oldSelector, selector));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Concept> getRoot()
  {
    if (root == null)
    {
      root = new EObjectResolvingEList<Concept>(Concept.class, this, RuleDslPackage.SELECTION__ROOT);
    }
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RuleDslPackage.SELECTION__SELECTOR:
        if (resolve) return getSelector();
        return basicGetSelector();
      case RuleDslPackage.SELECTION__ROOT:
        return getRoot();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RuleDslPackage.SELECTION__SELECTOR:
        setSelector((Concept)newValue);
        return;
      case RuleDslPackage.SELECTION__ROOT:
        getRoot().clear();
        getRoot().addAll((Collection<? extends Concept>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RuleDslPackage.SELECTION__SELECTOR:
        setSelector((Concept)null);
        return;
      case RuleDslPackage.SELECTION__ROOT:
        getRoot().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RuleDslPackage.SELECTION__SELECTOR:
        return selector != null;
      case RuleDslPackage.SELECTION__ROOT:
        return root != null && !root.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SelectionImpl
