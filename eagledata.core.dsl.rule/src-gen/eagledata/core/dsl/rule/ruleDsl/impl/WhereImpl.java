/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.rule.ruleDsl.impl;

import eagledata.core.dsl.datadesc.dataDsl.PrimitiveNode;

import eagledata.core.dsl.pattern.streamingDsl.Feature;

import eagledata.core.dsl.rule.ruleDsl.RuleDslPackage;
import eagledata.core.dsl.rule.ruleDsl.Where;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Where</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eagledata.core.dsl.rule.ruleDsl.impl.WhereImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link eagledata.core.dsl.rule.ruleDsl.impl.WhereImpl#getLogicalOperator <em>Logical Operator</em>}</li>
 *   <li>{@link eagledata.core.dsl.rule.ruleDsl.impl.WhereImpl#getRight <em>Right</em>}</li>
 *   <li>{@link eagledata.core.dsl.rule.ruleDsl.impl.WhereImpl#getRightStreaming <em>Right Streaming</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WhereImpl extends MinimalEObjectImpl.Container implements Where
{
  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected PrimitiveNode left;

  /**
   * The default value of the '{@link #getLogicalOperator() <em>Logical Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicalOperator()
   * @generated
   * @ordered
   */
  protected static final String LOGICAL_OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLogicalOperator() <em>Logical Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicalOperator()
   * @generated
   * @ordered
   */
  protected String logicalOperator = LOGICAL_OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected PrimitiveNode right;

  /**
   * The cached value of the '{@link #getRightStreaming() <em>Right Streaming</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightStreaming()
   * @generated
   * @ordered
   */
  protected Feature rightStreaming;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WhereImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RuleDslPackage.Literals.WHERE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveNode getLeft()
  {
    if (left != null && left.eIsProxy())
    {
      InternalEObject oldLeft = (InternalEObject)left;
      left = (PrimitiveNode)eResolveProxy(oldLeft);
      if (left != oldLeft)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RuleDslPackage.WHERE__LEFT, oldLeft, left));
      }
    }
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveNode basicGetLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft(PrimitiveNode newLeft)
  {
    PrimitiveNode oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDslPackage.WHERE__LEFT, oldLeft, left));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLogicalOperator()
  {
    return logicalOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLogicalOperator(String newLogicalOperator)
  {
    String oldLogicalOperator = logicalOperator;
    logicalOperator = newLogicalOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDslPackage.WHERE__LOGICAL_OPERATOR, oldLogicalOperator, logicalOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveNode getRight()
  {
    if (right != null && right.eIsProxy())
    {
      InternalEObject oldRight = (InternalEObject)right;
      right = (PrimitiveNode)eResolveProxy(oldRight);
      if (right != oldRight)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RuleDslPackage.WHERE__RIGHT, oldRight, right));
      }
    }
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveNode basicGetRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight(PrimitiveNode newRight)
  {
    PrimitiveNode oldRight = right;
    right = newRight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDslPackage.WHERE__RIGHT, oldRight, right));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature getRightStreaming()
  {
    if (rightStreaming != null && rightStreaming.eIsProxy())
    {
      InternalEObject oldRightStreaming = (InternalEObject)rightStreaming;
      rightStreaming = (Feature)eResolveProxy(oldRightStreaming);
      if (rightStreaming != oldRightStreaming)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RuleDslPackage.WHERE__RIGHT_STREAMING, oldRightStreaming, rightStreaming));
      }
    }
    return rightStreaming;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature basicGetRightStreaming()
  {
    return rightStreaming;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRightStreaming(Feature newRightStreaming)
  {
    Feature oldRightStreaming = rightStreaming;
    rightStreaming = newRightStreaming;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDslPackage.WHERE__RIGHT_STREAMING, oldRightStreaming, rightStreaming));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RuleDslPackage.WHERE__LEFT:
        if (resolve) return getLeft();
        return basicGetLeft();
      case RuleDslPackage.WHERE__LOGICAL_OPERATOR:
        return getLogicalOperator();
      case RuleDslPackage.WHERE__RIGHT:
        if (resolve) return getRight();
        return basicGetRight();
      case RuleDslPackage.WHERE__RIGHT_STREAMING:
        if (resolve) return getRightStreaming();
        return basicGetRightStreaming();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RuleDslPackage.WHERE__LEFT:
        setLeft((PrimitiveNode)newValue);
        return;
      case RuleDslPackage.WHERE__LOGICAL_OPERATOR:
        setLogicalOperator((String)newValue);
        return;
      case RuleDslPackage.WHERE__RIGHT:
        setRight((PrimitiveNode)newValue);
        return;
      case RuleDslPackage.WHERE__RIGHT_STREAMING:
        setRightStreaming((Feature)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RuleDslPackage.WHERE__LEFT:
        setLeft((PrimitiveNode)null);
        return;
      case RuleDslPackage.WHERE__LOGICAL_OPERATOR:
        setLogicalOperator(LOGICAL_OPERATOR_EDEFAULT);
        return;
      case RuleDslPackage.WHERE__RIGHT:
        setRight((PrimitiveNode)null);
        return;
      case RuleDslPackage.WHERE__RIGHT_STREAMING:
        setRightStreaming((Feature)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RuleDslPackage.WHERE__LEFT:
        return left != null;
      case RuleDslPackage.WHERE__LOGICAL_OPERATOR:
        return LOGICAL_OPERATOR_EDEFAULT == null ? logicalOperator != null : !LOGICAL_OPERATOR_EDEFAULT.equals(logicalOperator);
      case RuleDslPackage.WHERE__RIGHT:
        return right != null;
      case RuleDslPackage.WHERE__RIGHT_STREAMING:
        return rightStreaming != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (logicalOperator: ");
    result.append(logicalOperator);
    result.append(')');
    return result.toString();
  }

} //WhereImpl
