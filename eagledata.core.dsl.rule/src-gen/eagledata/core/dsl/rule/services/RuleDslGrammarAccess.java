/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.rule.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class RuleDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RuleModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.RuleModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_0_0 = (RuleCall)cImportSectionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsRuleParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsRuleParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//RuleModel rule::RuleModel:
		//	importSection=XImportSection? (elements+=Rule elements+=Rule*)?
		@Override public ParserRule getRule() { return rule; }
		
		//importSection=XImportSection? (elements+=Rule elements+=Rule*)?
		public Group getGroup() { return cGroup; }
		
		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_0() { return cImportSectionAssignment_0; }
		
		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_0_0() { return cImportSectionXImportSectionParserRuleCall_0_0; }
		
		//(elements+=Rule elements+=Rule*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//elements+=Rule
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }
		
		//Rule
		public RuleCall getElementsRuleParserRuleCall_1_0_0() { return cElementsRuleParserRuleCall_1_0_0; }
		
		//elements+=Rule*
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//Rule
		public RuleCall getElementsRuleParserRuleCall_1_1_0() { return cElementsRuleParserRuleCall_1_1_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEventPhraseCrossReference_3_0 = (CrossReference)cEventAssignment_3.eContents().get(0);
		private final RuleCall cEventPhraseValidIDParserRuleCall_3_0_1 = (RuleCall)cEventPhraseCrossReference_3_0.eContents().get(1);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cActionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cActionsActionParserRuleCall_6_0_0 = (RuleCall)cActionsAssignment_6_0.eContents().get(0);
		private final Assignment cActionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_6_1_0 = (RuleCall)cActionsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		/// *Import returns rule::Import:
		//    'import' importedNamespace = QualifiedNameWithWildcard;
		//    
		//QualifiedNameWithWildcard:
		//    QualifiedName '.*'?;
		//    
		//QualifiedName:
		//    ID ('.' ID)*;* / / *RuleElement returns rule::RuleElement:
		//	Action
		//;* / Rule rule::Rule:
		//	name=ID '{'
		//	'on' event=[streaming::Phrase|ValidID]
		//	'do' '{' (actions+=Action actions+=Action*)
		//	'}'
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' 'on' event=[streaming::Phrase|ValidID] 'do' '{' (actions+=Action actions+=Action*) '}' '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//event=[streaming::Phrase|ValidID]
		public Assignment getEventAssignment_3() { return cEventAssignment_3; }
		
		//[streaming::Phrase|ValidID]
		public CrossReference getEventPhraseCrossReference_3_0() { return cEventPhraseCrossReference_3_0; }
		
		//ValidID
		public RuleCall getEventPhraseValidIDParserRuleCall_3_0_1() { return cEventPhraseValidIDParserRuleCall_3_0_1; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(actions+=Action actions+=Action*)
		public Group getGroup_6() { return cGroup_6; }
		
		//actions+=Action
		public Assignment getActionsAssignment_6_0() { return cActionsAssignment_6_0; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_6_0_0() { return cActionsActionParserRuleCall_6_0_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_6_1() { return cActionsAssignment_6_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_6_1_0() { return cActionsActionParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Action rule::Action:
		//	Query | Message
		@Override public ParserRule getRule() { return rule; }
		
		//Query | Message
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Query
		public RuleCall getQueryParserRuleCall_0() { return cQueryParserRuleCall_0; }
		
		//Message
		public RuleCall getMessageParserRuleCall_1() { return cMessageParserRuleCall_1; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectSelectParserRuleCall_2_0 = (RuleCall)cSelectAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cThenAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cThenMessageParserRuleCall_5_0_0 = (RuleCall)cThenAssignment_5_0.eContents().get(0);
		private final Assignment cThenAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cThenMessageParserRuleCall_5_1_0 = (RuleCall)cThenAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Query rule::Query:
		//	name=ID ':' select=Select 'then' '{' (then+=Message then+=Message*) '}'
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' select=Select 'then' '{' (then+=Message then+=Message*) '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//select=Select
		public Assignment getSelectAssignment_2() { return cSelectAssignment_2; }
		
		//Select
		public RuleCall getSelectSelectParserRuleCall_2_0() { return cSelectSelectParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(then+=Message then+=Message*)
		public Group getGroup_5() { return cGroup_5; }
		
		//then+=Message
		public Assignment getThenAssignment_5_0() { return cThenAssignment_5_0; }
		
		//Message
		public RuleCall getThenMessageParserRuleCall_5_0_0() { return cThenMessageParserRuleCall_5_0_0; }
		
		//then+=Message*
		public Assignment getThenAssignment_5_1() { return cThenAssignment_5_1; }
		
		//Message
		public RuleCall getThenMessageParserRuleCall_5_1_0() { return cThenMessageParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AddingSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.AddingSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationSELECTOPERATORTerminalRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cElementFeatureCrossReference_1_0_0 = (CrossReference)cElementAssignment_1_0.eContents().get(0);
		private final RuleCall cElementFeatureValidIDParserRuleCall_1_0_0_1 = (RuleCall)cElementFeatureCrossReference_1_0_0.eContents().get(1);
		private final Assignment cAllAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cAllAsteriskKeyword_1_1_0 = (Keyword)cAllAssignment_1_1.eContents().get(0);
		
		//AddingSelect rule::AddingSelect:
		//	operation=SELECTOPERATOR (element=[streaming::Feature|ValidID]? | all?='*')
		@Override public ParserRule getRule() { return rule; }
		
		//operation=SELECTOPERATOR (element=[streaming::Feature|ValidID]? | all?='*')
		public Group getGroup() { return cGroup; }
		
		//operation=SELECTOPERATOR
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//SELECTOPERATOR
		public RuleCall getOperationSELECTOPERATORTerminalRuleCall_0_0() { return cOperationSELECTOPERATORTerminalRuleCall_0_0; }
		
		//(element=[streaming::Feature|ValidID]? | all?='*')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//element=[streaming::Feature|ValidID]?
		public Assignment getElementAssignment_1_0() { return cElementAssignment_1_0; }
		
		//[streaming::Feature|ValidID]
		public CrossReference getElementFeatureCrossReference_1_0_0() { return cElementFeatureCrossReference_1_0_0; }
		
		//ValidID
		public RuleCall getElementFeatureValidIDParserRuleCall_1_0_0_1() { return cElementFeatureValidIDParserRuleCall_1_0_0_1; }
		
		//all?='*'
		public Assignment getAllAssignment_1_1() { return cAllAssignment_1_1; }
		
		//'*'
		public Keyword getAllAsteriskKeyword_1_1_0() { return cAllAsteriskKeyword_1_1_0; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.Select");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddingSelectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetSelectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Select rule::Select:
		//	AddingSelect | SetSelect
		@Override public ParserRule getRule() { return rule; }
		
		//AddingSelect | SetSelect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddingSelect
		public RuleCall getAddingSelectParserRuleCall_0() { return cAddingSelectParserRuleCall_0; }
		
		//SetSelect
		public RuleCall getSetSelectParserRuleCall_1() { return cSetSelectParserRuleCall_1; }
	}
	public class SetSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.SetSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSelectorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cSelectorPrimitiveNodeCrossReference_1_0_0 = (CrossReference)cSelectorAssignment_1_0.eContents().get(0);
		private final RuleCall cSelectorPrimitiveNodeValidIDParserRuleCall_1_0_0_1 = (RuleCall)cSelectorPrimitiveNodeCrossReference_1_0_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSelectorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cSelectorPrimitiveNodeCrossReference_1_1_1_0 = (CrossReference)cSelectorAssignment_1_1_1.eContents().get(0);
		private final RuleCall cSelectorPrimitiveNodeValidIDParserRuleCall_1_1_1_0_1 = (RuleCall)cSelectorPrimitiveNodeCrossReference_1_1_1_0.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cFromDataDescriptionCrossReference_3_0_0 = (CrossReference)cFromAssignment_3_0.eContents().get(0);
		private final RuleCall cFromDataDescriptionValidIDParserRuleCall_3_0_0_1 = (RuleCall)cFromDataDescriptionCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFromAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cFromDataDescriptionCrossReference_3_1_1_0 = (CrossReference)cFromAssignment_3_1_1.eContents().get(0);
		private final RuleCall cFromDataDescriptionValidIDParserRuleCall_3_1_1_0_1 = (RuleCall)cFromDataDescriptionCrossReference_3_1_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cWhereAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cWhereWhereParserRuleCall_4_1_0_0 = (RuleCall)cWhereAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cAndKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cWhereAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cWhereWhereParserRuleCall_4_1_1_1_0 = (RuleCall)cWhereAssignment_4_1_1_1.eContents().get(0);
		
		//SetSelect rule::SetSelect:
		//	'select' (selector+=[data::PrimitiveNode|ValidID] (',' selector+=[data::PrimitiveNode|ValidID])*)
		//	'from' (from+=[data::DataDescription|ValidID] (',' from+=[data::DataDescription|ValidID])*) ('where' (where+=Where
		//	('and' where+=Where)*))?
		@Override public ParserRule getRule() { return rule; }
		
		//'select' (selector+=[data::PrimitiveNode|ValidID] (',' selector+=[data::PrimitiveNode|ValidID])*) 'from'
		//(from+=[data::DataDescription|ValidID] (',' from+=[data::DataDescription|ValidID])*) ('where' (where+=Where ('and'
		//where+=Where)*))?
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//(selector+=[data::PrimitiveNode|ValidID] (',' selector+=[data::PrimitiveNode|ValidID])*)
		public Group getGroup_1() { return cGroup_1; }
		
		//selector+=[data::PrimitiveNode|ValidID]
		public Assignment getSelectorAssignment_1_0() { return cSelectorAssignment_1_0; }
		
		//[data::PrimitiveNode|ValidID]
		public CrossReference getSelectorPrimitiveNodeCrossReference_1_0_0() { return cSelectorPrimitiveNodeCrossReference_1_0_0; }
		
		//ValidID
		public RuleCall getSelectorPrimitiveNodeValidIDParserRuleCall_1_0_0_1() { return cSelectorPrimitiveNodeValidIDParserRuleCall_1_0_0_1; }
		
		//(',' selector+=[data::PrimitiveNode|ValidID])*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//selector+=[data::PrimitiveNode|ValidID]
		public Assignment getSelectorAssignment_1_1_1() { return cSelectorAssignment_1_1_1; }
		
		//[data::PrimitiveNode|ValidID]
		public CrossReference getSelectorPrimitiveNodeCrossReference_1_1_1_0() { return cSelectorPrimitiveNodeCrossReference_1_1_1_0; }
		
		//ValidID
		public RuleCall getSelectorPrimitiveNodeValidIDParserRuleCall_1_1_1_0_1() { return cSelectorPrimitiveNodeValidIDParserRuleCall_1_1_1_0_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//(from+=[data::DataDescription|ValidID] (',' from+=[data::DataDescription|ValidID])*)
		public Group getGroup_3() { return cGroup_3; }
		
		//from+=[data::DataDescription|ValidID]
		public Assignment getFromAssignment_3_0() { return cFromAssignment_3_0; }
		
		//[data::DataDescription|ValidID]
		public CrossReference getFromDataDescriptionCrossReference_3_0_0() { return cFromDataDescriptionCrossReference_3_0_0; }
		
		//ValidID
		public RuleCall getFromDataDescriptionValidIDParserRuleCall_3_0_0_1() { return cFromDataDescriptionValidIDParserRuleCall_3_0_0_1; }
		
		//(',' from+=[data::DataDescription|ValidID])*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//from+=[data::DataDescription|ValidID]
		public Assignment getFromAssignment_3_1_1() { return cFromAssignment_3_1_1; }
		
		//[data::DataDescription|ValidID]
		public CrossReference getFromDataDescriptionCrossReference_3_1_1_0() { return cFromDataDescriptionCrossReference_3_1_1_0; }
		
		//ValidID
		public RuleCall getFromDataDescriptionValidIDParserRuleCall_3_1_1_0_1() { return cFromDataDescriptionValidIDParserRuleCall_3_1_1_0_1; }
		
		//('where' (where+=Where ('and' where+=Where)*))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'where'
		public Keyword getWhereKeyword_4_0() { return cWhereKeyword_4_0; }
		
		//(where+=Where ('and' where+=Where)*)
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//where+=Where
		public Assignment getWhereAssignment_4_1_0() { return cWhereAssignment_4_1_0; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_4_1_0_0() { return cWhereWhereParserRuleCall_4_1_0_0; }
		
		//('and' where+=Where)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//'and'
		public Keyword getAndKeyword_4_1_1_0() { return cAndKeyword_4_1_1_0; }
		
		//where+=Where
		public Assignment getWhereAssignment_4_1_1_1() { return cWhereAssignment_4_1_1_1; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_4_1_1_1_0() { return cWhereWhereParserRuleCall_4_1_1_1_0; }
	}
	public class WhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.Where");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLeftPrimitiveNodeCrossReference_0_0 = (CrossReference)cLeftAssignment_0.eContents().get(0);
		private final RuleCall cLeftPrimitiveNodeValidIDParserRuleCall_0_0_1 = (RuleCall)cLeftPrimitiveNodeCrossReference_0_0.eContents().get(1);
		private final Assignment cLogicalOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogicalOperatorLOGICALOPERATORTerminalRuleCall_1_0 = (RuleCall)cLogicalOperatorAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cRightPrimitiveNodeCrossReference_2_0_0 = (CrossReference)cRightAssignment_2_0.eContents().get(0);
		private final RuleCall cRightPrimitiveNodeValidIDParserRuleCall_2_0_0_1 = (RuleCall)cRightPrimitiveNodeCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRightStreamingAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cRightStreamingFeatureCrossReference_2_1_1_0 = (CrossReference)cRightStreamingAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRightStreamingFeatureValidIDParserRuleCall_2_1_1_0_1 = (RuleCall)cRightStreamingFeatureCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		/// *SetOperatorPatternSelect returns rule::SetOperator:
		//	UnionPatternSelect | IntersectPatternSelect | ExceptPatternSelect;
		//
		//UnionPatternSelect returns rule::Union:
		//	'union' select=SetSelect;
		//
		//IntersectPatternSelect returns rule::Intersect:
		//	'intersect' select=SetSelect;
		//
		//ExceptPatternSelect returns rule::Except:
		//	'except' select=SetSelect;* / //Selection returns rule::Selection:
		////(selector=[streaming::Concept | ID] '.')? (root+=[streaming::Concept | ID] ('.'root+=[streaming::Concept | ID])*)
		////(selector=[streaming::Concept | ID] '.')? (root+=[streaming::Concept | ID] ('.'root+=[streaming::Concept | ID])*)
		////;
		/// *enum OperationAddingSelect returns rule::OperationAddingSelect:
		//	count = 'count' //| min = 'min' | max = 'max' | add = 'add' | avg = 'avg'
		//;* / Where rule::Where:
		//	left=[data::PrimitiveNode|ValidID] logicalOperator=LOGICALOPERATOR (right=[data::PrimitiveNode|ValidID] | '{'
		//	rightStreaming=[streaming::Feature|ValidID] '}')
		@Override public ParserRule getRule() { return rule; }
		
		//left=[data::PrimitiveNode|ValidID] logicalOperator=LOGICALOPERATOR (right=[data::PrimitiveNode|ValidID] | '{'
		//rightStreaming=[streaming::Feature|ValidID] '}')
		public Group getGroup() { return cGroup; }
		
		//left=[data::PrimitiveNode|ValidID]
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//[data::PrimitiveNode|ValidID]
		public CrossReference getLeftPrimitiveNodeCrossReference_0_0() { return cLeftPrimitiveNodeCrossReference_0_0; }
		
		//ValidID
		public RuleCall getLeftPrimitiveNodeValidIDParserRuleCall_0_0_1() { return cLeftPrimitiveNodeValidIDParserRuleCall_0_0_1; }
		
		//logicalOperator=LOGICALOPERATOR
		public Assignment getLogicalOperatorAssignment_1() { return cLogicalOperatorAssignment_1; }
		
		//LOGICALOPERATOR
		public RuleCall getLogicalOperatorLOGICALOPERATORTerminalRuleCall_1_0() { return cLogicalOperatorLOGICALOPERATORTerminalRuleCall_1_0; }
		
		//(right=[data::PrimitiveNode|ValidID] | '{' rightStreaming=[streaming::Feature|ValidID] '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//right=[data::PrimitiveNode|ValidID]
		public Assignment getRightAssignment_2_0() { return cRightAssignment_2_0; }
		
		//[data::PrimitiveNode|ValidID]
		public CrossReference getRightPrimitiveNodeCrossReference_2_0_0() { return cRightPrimitiveNodeCrossReference_2_0_0; }
		
		//ValidID
		public RuleCall getRightPrimitiveNodeValidIDParserRuleCall_2_0_0_1() { return cRightPrimitiveNodeValidIDParserRuleCall_2_0_0_1; }
		
		//'{' rightStreaming=[streaming::Feature|ValidID] '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//rightStreaming=[streaming::Feature|ValidID]
		public Assignment getRightStreamingAssignment_2_1_1() { return cRightStreamingAssignment_2_1_1; }
		
		//[streaming::Feature|ValidID]
		public CrossReference getRightStreamingFeatureCrossReference_2_1_1_0() { return cRightStreamingFeatureCrossReference_2_1_1_0; }
		
		//ValidID
		public RuleCall getRightStreamingFeatureValidIDParserRuleCall_2_1_1_0_1() { return cRightStreamingFeatureValidIDParserRuleCall_2_1_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cLogicalOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0 = (RuleCall)cLogicalOperatorAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		////===========================================================================================
		////When --> Expressions
		//When rule::When:
		//	'when' left=Expression logicalOperator=LOGICALOPERATOR right=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//'when' left=Expression logicalOperator=LOGICALOPERATOR right=Expression
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//logicalOperator=LOGICALOPERATOR
		public Assignment getLogicalOperatorAssignment_2() { return cLogicalOperatorAssignment_2; }
		
		//LOGICALOPERATOR
		public RuleCall getLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0() { return cLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlainExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression rule::Expression:
		//	PlainExpression | ComplexExpression
		@Override public ParserRule getRule() { return rule; }
		
		//PlainExpression | ComplexExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlainExpression
		public RuleCall getPlainExpressionParserRuleCall_0() { return cPlainExpressionParserRuleCall_0; }
		
		//ComplexExpression
		public RuleCall getComplexExpressionParserRuleCall_1() { return cComplexExpressionParserRuleCall_1; }
	}
	public class PlainExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.PlainExpression");
		private final Assignment cPlainOperandAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPlainOperandPlainOperandParserRuleCall_0 = (RuleCall)cPlainOperandAssignment.eContents().get(0);
		
		//PlainExpression rule::Expression:
		//	plainOperand=PlainOperand
		@Override public ParserRule getRule() { return rule; }
		
		//plainOperand=PlainOperand
		public Assignment getPlainOperandAssignment() { return cPlainOperandAssignment; }
		
		//PlainOperand
		public RuleCall getPlainOperandPlainOperandParserRuleCall_0() { return cPlainOperandPlainOperandParserRuleCall_0; }
	}
	public class ComplexExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.ComplexExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlainOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlainOperandPlainOperandParserRuleCall_1_0 = (RuleCall)cPlainOperandAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cComplexOperandsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cComplexOperandsComplexOperandParserRuleCall_2_0_0 = (RuleCall)cComplexOperandsAssignment_2_0.eContents().get(0);
		private final Assignment cComplexOperandsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComplexOperandsComplexOperandParserRuleCall_2_1_0 = (RuleCall)cComplexOperandsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComplexExpression rule::Expression:
		//	'(' plainOperand=PlainOperand (complexOperands+=ComplexOperand complexOperands+=ComplexOperand*)? ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'(' plainOperand=PlainOperand (complexOperands+=ComplexOperand complexOperands+=ComplexOperand*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//plainOperand=PlainOperand
		public Assignment getPlainOperandAssignment_1() { return cPlainOperandAssignment_1; }
		
		//PlainOperand
		public RuleCall getPlainOperandPlainOperandParserRuleCall_1_0() { return cPlainOperandPlainOperandParserRuleCall_1_0; }
		
		//(complexOperands+=ComplexOperand complexOperands+=ComplexOperand*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//complexOperands+=ComplexOperand
		public Assignment getComplexOperandsAssignment_2_0() { return cComplexOperandsAssignment_2_0; }
		
		//ComplexOperand
		public RuleCall getComplexOperandsComplexOperandParserRuleCall_2_0_0() { return cComplexOperandsComplexOperandParserRuleCall_2_0_0; }
		
		//complexOperands+=ComplexOperand*
		public Assignment getComplexOperandsAssignment_2_1() { return cComplexOperandsAssignment_2_1; }
		
		//ComplexOperand
		public RuleCall getComplexOperandsComplexOperandParserRuleCall_2_1_0() { return cComplexOperandsComplexOperandParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlainOperandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operand rule::Operand:
		//	PlainOperand | ComplexOperand
		@Override public ParserRule getRule() { return rule; }
		
		//PlainOperand | ComplexOperand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlainOperand
		public RuleCall getPlainOperandParserRuleCall_0() { return cPlainOperandParserRuleCall_0; }
		
		//ComplexOperand
		public RuleCall getComplexOperandParserRuleCall_1() { return cComplexOperandParserRuleCall_1; }
	}
	public class PlainOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.PlainOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumeralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PlainOperand rule::PlainOperand:
		//	Numeral | QueryOperand
		@Override public ParserRule getRule() { return rule; }
		
		//Numeral | QueryOperand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Numeral
		public RuleCall getNumeralParserRuleCall_0() { return cNumeralParserRuleCall_0; }
		
		//QueryOperand
		public RuleCall getQueryOperandParserRuleCall_1() { return cQueryOperandParserRuleCall_1; }
	}
	public class NumeralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.Numeral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Numeral rule::Numeral:
		//	value=DOUBLE
		@Override public ParserRule getRule() { return rule; }
		
		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}
	public class QueryOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.QueryOperand");
		private final Assignment cQueryAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cQueryQueryCrossReference_0 = (CrossReference)cQueryAssignment.eContents().get(0);
		private final RuleCall cQueryQueryIDTerminalRuleCall_0_1 = (RuleCall)cQueryQueryCrossReference_0.eContents().get(1);
		
		//QueryOperand rule::QueryOperand:
		//	query=[rule::Query]
		@Override public ParserRule getRule() { return rule; }
		
		//query=[rule::Query]
		public Assignment getQueryAssignment() { return cQueryAssignment; }
		
		//[rule::Query]
		public CrossReference getQueryQueryCrossReference_0() { return cQueryQueryCrossReference_0; }
		
		//ID
		public RuleCall getQueryQueryIDTerminalRuleCall_0_1() { return cQueryQueryIDTerminalRuleCall_0_1; }
	}
	public class ComplexOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.ComplexOperand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOPERATORTerminalRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ComplexOperand rule::ComplexOperand:
		//	operator=OPERATOR expression=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//operator=OPERATOR expression=Expression
		public Group getGroup() { return cGroup; }
		
		//operator=OPERATOR
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//OPERATOR
		public RuleCall getOperatorOPERATORTerminalRuleCall_0_0() { return cOperatorOPERATORTerminalRuleCall_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cComposeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMessageAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMessageMessageStringParserRuleCall_3_0_0 = (RuleCall)cMessageAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cMessageAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cMessageMessageStringParserRuleCall_3_1_1_0 = (RuleCall)cMessageAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRecipientAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRecipientReceiverParserRuleCall_4_1_0 = (RuleCall)cRecipientAssignment_4_1.eContents().get(0);
		
		/// *ArithmeticalOperator returns rule::ArithmeticalOperator:
		//	Addition | Subtraction | Multiplication | Division;
		//
		//
		//Addition returns rule::Addition: '+';
		//
		//Subtraction returns rule::Subtraction: '-';
		//
		//Multiplication returns rule::Multiplication: '*';
		//
		//Division returns rule::Division: '/';* / / *LogicalOperator returns rule::LogicalOperator:
		//	MoreThan | LessThan | MoreEqual | LessEqual | Equal;
		//
		//MoreThan returns expression::MoreThan:
		//	{expression::MoreThan} '>' ;
		//	
		//LessThan returns expression::LessThan:
		//	{expression::LessThan} '<' ;
		//
		//MoreEqual returns expression::MoreEqual:
		//	{expression::MoreEqual} '>=' ;
		//	
		//LessEqual returns expression::LessEqual:
		//	{expression::LessEqual} '<=' ;
		//	
		//Equal returns expression::Equal:
		//	{expression::Equal} '=' ;* / / *EString returns ecore::EString:
		//	STRING | ID;
		//
		//EBoolean returns ecore::EBoolean:
		//	'true' | 'false';
		//	
		//EInt returns ecore::EInt:
		//	'-'? INT;
		//	
		//EFloat returns ecore::EFloat:
		//	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;* / Message rule::Message:
		//	name=ID ':' 'compose' (message+=MessageString ('+' message+=MessageString)*) ('to' recipient=Receiver)?
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' 'compose' (message+=MessageString ('+' message+=MessageString)*) ('to' recipient=Receiver)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'compose'
		public Keyword getComposeKeyword_2() { return cComposeKeyword_2; }
		
		//(message+=MessageString ('+' message+=MessageString)*)
		public Group getGroup_3() { return cGroup_3; }
		
		//message+=MessageString
		public Assignment getMessageAssignment_3_0() { return cMessageAssignment_3_0; }
		
		//MessageString
		public RuleCall getMessageMessageStringParserRuleCall_3_0_0() { return cMessageMessageStringParserRuleCall_3_0_0; }
		
		//('+' message+=MessageString)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_1_0() { return cPlusSignKeyword_3_1_0; }
		
		//message+=MessageString
		public Assignment getMessageAssignment_3_1_1() { return cMessageAssignment_3_1_1; }
		
		//MessageString
		public RuleCall getMessageMessageStringParserRuleCall_3_1_1_0() { return cMessageMessageStringParserRuleCall_3_1_1_0; }
		
		//('to' recipient=Receiver)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'to'
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }
		
		//recipient=Receiver
		public Assignment getRecipientAssignment_4_1() { return cRecipientAssignment_4_1; }
		
		//Receiver
		public RuleCall getRecipientReceiverParserRuleCall_4_1_0() { return cRecipientReceiverParserRuleCall_4_1_0; }
	}
	public class MessageStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.MessageString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextMessageStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectMessageStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MessageString rule::MessageString:
		//	TextMessageString | SelectMessageString
		@Override public ParserRule getRule() { return rule; }
		
		//TextMessageString | SelectMessageString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TextMessageString
		public RuleCall getTextMessageStringParserRuleCall_0() { return cTextMessageStringParserRuleCall_0; }
		
		//SelectMessageString
		public RuleCall getSelectMessageStringParserRuleCall_1() { return cSelectMessageStringParserRuleCall_1; }
	}
	public class SelectMessageStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.SelectMessageString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cResponseAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cResponsePrimitiveNodeCrossReference_1_0_0 = (CrossReference)cResponseAssignment_1_0.eContents().get(0);
		private final RuleCall cResponsePrimitiveNodeQualifiedNameParserRuleCall_1_0_0_1 = (RuleCall)cResponsePrimitiveNodeCrossReference_1_0_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cResponseAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cResponsePrimitiveNodeCrossReference_1_1_1_0 = (CrossReference)cResponseAssignment_1_1_1.eContents().get(0);
		private final RuleCall cResponsePrimitiveNodeQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cResponsePrimitiveNodeCrossReference_1_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SelectMessageString rule::SelectMessageString:
		//	'{' (response+=[data::PrimitiveNode|QualifiedName] (',' response+=[data::PrimitiveNode|QualifiedName])*) '}'
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (response+=[data::PrimitiveNode|QualifiedName] (',' response+=[data::PrimitiveNode|QualifiedName])*) '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(response+=[data::PrimitiveNode|QualifiedName] (',' response+=[data::PrimitiveNode|QualifiedName])*)
		public Group getGroup_1() { return cGroup_1; }
		
		//response+=[data::PrimitiveNode|QualifiedName]
		public Assignment getResponseAssignment_1_0() { return cResponseAssignment_1_0; }
		
		//[data::PrimitiveNode|QualifiedName]
		public CrossReference getResponsePrimitiveNodeCrossReference_1_0_0() { return cResponsePrimitiveNodeCrossReference_1_0_0; }
		
		//QualifiedName
		public RuleCall getResponsePrimitiveNodeQualifiedNameParserRuleCall_1_0_0_1() { return cResponsePrimitiveNodeQualifiedNameParserRuleCall_1_0_0_1; }
		
		//(',' response+=[data::PrimitiveNode|QualifiedName])*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//response+=[data::PrimitiveNode|QualifiedName]
		public Assignment getResponseAssignment_1_1_1() { return cResponseAssignment_1_1_1; }
		
		//[data::PrimitiveNode|QualifiedName]
		public CrossReference getResponsePrimitiveNodeCrossReference_1_1_1_0() { return cResponsePrimitiveNodeCrossReference_1_1_1_0; }
		
		//QualifiedName
		public RuleCall getResponsePrimitiveNodeQualifiedNameParserRuleCall_1_1_1_0_1() { return cResponsePrimitiveNodeQualifiedNameParserRuleCall_1_1_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class TextMessageStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.TextMessageString");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		////OperationMessageString returns rule::OperationMessageString:
		////    '['body=XBlockExpression']'
		////;
		//TextMessageString rule::TextMessageString:
		//	text=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//text=STRING
		public Assignment getTextAssignment() { return cTextAssignment; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0() { return cTextSTRINGTerminalRuleCall_0; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.Receiver");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReceiverListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDistributionListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Receiver rule::Receiver:
		//	ReceiverList | DistributionList
		@Override public ParserRule getRule() { return rule; }
		
		//ReceiverList | DistributionList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReceiverList
		public RuleCall getReceiverListParserRuleCall_0() { return cReceiverListParserRuleCall_0; }
		
		//DistributionList
		public RuleCall getDistributionListParserRuleCall_1() { return cDistributionListParserRuleCall_1; }
	}
	public class ReceiverListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.ReceiverList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cReceiverAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cReceiverSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cReceiverAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cReceiverAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cReceiverSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cReceiverAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReceiverList rule::ReceiverList:
		//	'{' (receiver+=STRING (',' receiver+=STRING)*) '}'
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (receiver+=STRING (',' receiver+=STRING)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(receiver+=STRING (',' receiver+=STRING)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//receiver+=STRING
		public Assignment getReceiverAssignment_1_0() { return cReceiverAssignment_1_0; }
		
		//STRING
		public RuleCall getReceiverSTRINGTerminalRuleCall_1_0_0() { return cReceiverSTRINGTerminalRuleCall_1_0_0; }
		
		//(',' receiver+=STRING)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//receiver+=STRING
		public Assignment getReceiverAssignment_1_1_1() { return cReceiverAssignment_1_1_1; }
		
		//STRING
		public RuleCall getReceiverSTRINGTerminalRuleCall_1_1_1_0() { return cReceiverSTRINGTerminalRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class DistributionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.DistributionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileSTRINGTerminalRuleCall_1_0 = (RuleCall)cFileAssignment_1.eContents().get(0);
		
		//DistributionList rule::DistributionList:
		//	'@' file+=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//'@' file+=STRING
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//file+=STRING
		public Assignment getFileAssignment_1() { return cFileAssignment_1; }
		
		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_1_0() { return cFileSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final RuleModelElements pRuleModel;
	private final RuleElements pRule;
	private final ActionElements pAction;
	private final QueryElements pQuery;
	private final AddingSelectElements pAddingSelect;
	private final SelectElements pSelect;
	private final SetSelectElements pSetSelect;
	private final WhereElements pWhere;
	private final WhenElements pWhen;
	private final ExpressionElements pExpression;
	private final PlainExpressionElements pPlainExpression;
	private final ComplexExpressionElements pComplexExpression;
	private final OperandElements pOperand;
	private final PlainOperandElements pPlainOperand;
	private final NumeralElements pNumeral;
	private final QueryOperandElements pQueryOperand;
	private final ComplexOperandElements pComplexOperand;
	private final MessageElements pMessage;
	private final MessageStringElements pMessageString;
	private final SelectMessageStringElements pSelectMessageString;
	private final TextMessageStringElements pTextMessageString;
	private final ReceiverElements pReceiver;
	private final ReceiverListElements pReceiverList;
	private final DistributionListElements pDistributionList;
	private final TerminalRule tOPERATOR;
	private final TerminalRule tLOGICALOPERATOR;
	private final TerminalRule tCONDITIONALOPERATOR;
	private final TerminalRule tSELECTOPERATOR;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tSETOPERATOR;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public RuleDslGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pRuleModel = new RuleModelElements();
		this.pRule = new RuleElements();
		this.pAction = new ActionElements();
		this.pQuery = new QueryElements();
		this.pAddingSelect = new AddingSelectElements();
		this.pSelect = new SelectElements();
		this.pSetSelect = new SetSelectElements();
		this.pWhere = new WhereElements();
		this.pWhen = new WhenElements();
		this.pExpression = new ExpressionElements();
		this.pPlainExpression = new PlainExpressionElements();
		this.pComplexExpression = new ComplexExpressionElements();
		this.pOperand = new OperandElements();
		this.pPlainOperand = new PlainOperandElements();
		this.pNumeral = new NumeralElements();
		this.pQueryOperand = new QueryOperandElements();
		this.pComplexOperand = new ComplexOperandElements();
		this.pMessage = new MessageElements();
		this.pMessageString = new MessageStringElements();
		this.pSelectMessageString = new SelectMessageStringElements();
		this.pTextMessageString = new TextMessageStringElements();
		this.pReceiver = new ReceiverElements();
		this.pReceiverList = new ReceiverListElements();
		this.pDistributionList = new DistributionListElements();
		this.tOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.OPERATOR");
		this.tLOGICALOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.LOGICALOPERATOR");
		this.tCONDITIONALOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.CONDITIONALOPERATOR");
		this.tSELECTOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.SELECTOPERATOR");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.DOUBLE");
		this.tSETOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.rule.RuleDsl.SETOPERATOR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eagledata.core.dsl.rule.RuleDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//RuleModel rule::RuleModel:
	//	importSection=XImportSection? (elements+=Rule elements+=Rule*)?
	public RuleModelElements getRuleModelAccess() {
		return pRuleModel;
	}
	
	public ParserRule getRuleModelRule() {
		return getRuleModelAccess().getRule();
	}
	
	/// *Import returns rule::Import:
	//    'import' importedNamespace = QualifiedNameWithWildcard;
	//    
	//QualifiedNameWithWildcard:
	//    QualifiedName '.*'?;
	//    
	//QualifiedName:
	//    ID ('.' ID)*;* / / *RuleElement returns rule::RuleElement:
	//	Action
	//;* / Rule rule::Rule:
	//	name=ID '{'
	//	'on' event=[streaming::Phrase|ValidID]
	//	'do' '{' (actions+=Action actions+=Action*)
	//	'}'
	//	'}'
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Action rule::Action:
	//	Query | Message
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Query rule::Query:
	//	name=ID ':' select=Select 'then' '{' (then+=Message then+=Message*) '}'
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//AddingSelect rule::AddingSelect:
	//	operation=SELECTOPERATOR (element=[streaming::Feature|ValidID]? | all?='*')
	public AddingSelectElements getAddingSelectAccess() {
		return pAddingSelect;
	}
	
	public ParserRule getAddingSelectRule() {
		return getAddingSelectAccess().getRule();
	}
	
	//Select rule::Select:
	//	AddingSelect | SetSelect
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//SetSelect rule::SetSelect:
	//	'select' (selector+=[data::PrimitiveNode|ValidID] (',' selector+=[data::PrimitiveNode|ValidID])*)
	//	'from' (from+=[data::DataDescription|ValidID] (',' from+=[data::DataDescription|ValidID])*) ('where' (where+=Where
	//	('and' where+=Where)*))?
	public SetSelectElements getSetSelectAccess() {
		return pSetSelect;
	}
	
	public ParserRule getSetSelectRule() {
		return getSetSelectAccess().getRule();
	}
	
	/// *SetOperatorPatternSelect returns rule::SetOperator:
	//	UnionPatternSelect | IntersectPatternSelect | ExceptPatternSelect;
	//
	//UnionPatternSelect returns rule::Union:
	//	'union' select=SetSelect;
	//
	//IntersectPatternSelect returns rule::Intersect:
	//	'intersect' select=SetSelect;
	//
	//ExceptPatternSelect returns rule::Except:
	//	'except' select=SetSelect;* / //Selection returns rule::Selection:
	////(selector=[streaming::Concept | ID] '.')? (root+=[streaming::Concept | ID] ('.'root+=[streaming::Concept | ID])*)
	////(selector=[streaming::Concept | ID] '.')? (root+=[streaming::Concept | ID] ('.'root+=[streaming::Concept | ID])*)
	////;
	/// *enum OperationAddingSelect returns rule::OperationAddingSelect:
	//	count = 'count' //| min = 'min' | max = 'max' | add = 'add' | avg = 'avg'
	//;* / Where rule::Where:
	//	left=[data::PrimitiveNode|ValidID] logicalOperator=LOGICALOPERATOR (right=[data::PrimitiveNode|ValidID] | '{'
	//	rightStreaming=[streaming::Feature|ValidID] '}')
	public WhereElements getWhereAccess() {
		return pWhere;
	}
	
	public ParserRule getWhereRule() {
		return getWhereAccess().getRule();
	}
	
	////===========================================================================================
	////When --> Expressions
	//When rule::When:
	//	'when' left=Expression logicalOperator=LOGICALOPERATOR right=Expression
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//Expression rule::Expression:
	//	PlainExpression | ComplexExpression
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//PlainExpression rule::Expression:
	//	plainOperand=PlainOperand
	public PlainExpressionElements getPlainExpressionAccess() {
		return pPlainExpression;
	}
	
	public ParserRule getPlainExpressionRule() {
		return getPlainExpressionAccess().getRule();
	}
	
	//ComplexExpression rule::Expression:
	//	'(' plainOperand=PlainOperand (complexOperands+=ComplexOperand complexOperands+=ComplexOperand*)? ')'
	public ComplexExpressionElements getComplexExpressionAccess() {
		return pComplexExpression;
	}
	
	public ParserRule getComplexExpressionRule() {
		return getComplexExpressionAccess().getRule();
	}
	
	//Operand rule::Operand:
	//	PlainOperand | ComplexOperand
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//PlainOperand rule::PlainOperand:
	//	Numeral | QueryOperand
	public PlainOperandElements getPlainOperandAccess() {
		return pPlainOperand;
	}
	
	public ParserRule getPlainOperandRule() {
		return getPlainOperandAccess().getRule();
	}
	
	//Numeral rule::Numeral:
	//	value=DOUBLE
	public NumeralElements getNumeralAccess() {
		return pNumeral;
	}
	
	public ParserRule getNumeralRule() {
		return getNumeralAccess().getRule();
	}
	
	//QueryOperand rule::QueryOperand:
	//	query=[rule::Query]
	public QueryOperandElements getQueryOperandAccess() {
		return pQueryOperand;
	}
	
	public ParserRule getQueryOperandRule() {
		return getQueryOperandAccess().getRule();
	}
	
	//ComplexOperand rule::ComplexOperand:
	//	operator=OPERATOR expression=Expression
	public ComplexOperandElements getComplexOperandAccess() {
		return pComplexOperand;
	}
	
	public ParserRule getComplexOperandRule() {
		return getComplexOperandAccess().getRule();
	}
	
	/// *ArithmeticalOperator returns rule::ArithmeticalOperator:
	//	Addition | Subtraction | Multiplication | Division;
	//
	//
	//Addition returns rule::Addition: '+';
	//
	//Subtraction returns rule::Subtraction: '-';
	//
	//Multiplication returns rule::Multiplication: '*';
	//
	//Division returns rule::Division: '/';* / / *LogicalOperator returns rule::LogicalOperator:
	//	MoreThan | LessThan | MoreEqual | LessEqual | Equal;
	//
	//MoreThan returns expression::MoreThan:
	//	{expression::MoreThan} '>' ;
	//	
	//LessThan returns expression::LessThan:
	//	{expression::LessThan} '<' ;
	//
	//MoreEqual returns expression::MoreEqual:
	//	{expression::MoreEqual} '>=' ;
	//	
	//LessEqual returns expression::LessEqual:
	//	{expression::LessEqual} '<=' ;
	//	
	//Equal returns expression::Equal:
	//	{expression::Equal} '=' ;* / / *EString returns ecore::EString:
	//	STRING | ID;
	//
	//EBoolean returns ecore::EBoolean:
	//	'true' | 'false';
	//	
	//EInt returns ecore::EInt:
	//	'-'? INT;
	//	
	//EFloat returns ecore::EFloat:
	//	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;* / Message rule::Message:
	//	name=ID ':' 'compose' (message+=MessageString ('+' message+=MessageString)*) ('to' recipient=Receiver)?
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//MessageString rule::MessageString:
	//	TextMessageString | SelectMessageString
	public MessageStringElements getMessageStringAccess() {
		return pMessageString;
	}
	
	public ParserRule getMessageStringRule() {
		return getMessageStringAccess().getRule();
	}
	
	//SelectMessageString rule::SelectMessageString:
	//	'{' (response+=[data::PrimitiveNode|QualifiedName] (',' response+=[data::PrimitiveNode|QualifiedName])*) '}'
	public SelectMessageStringElements getSelectMessageStringAccess() {
		return pSelectMessageString;
	}
	
	public ParserRule getSelectMessageStringRule() {
		return getSelectMessageStringAccess().getRule();
	}
	
	////OperationMessageString returns rule::OperationMessageString:
	////    '['body=XBlockExpression']'
	////;
	//TextMessageString rule::TextMessageString:
	//	text=STRING
	public TextMessageStringElements getTextMessageStringAccess() {
		return pTextMessageString;
	}
	
	public ParserRule getTextMessageStringRule() {
		return getTextMessageStringAccess().getRule();
	}
	
	//Receiver rule::Receiver:
	//	ReceiverList | DistributionList
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	//ReceiverList rule::ReceiverList:
	//	'{' (receiver+=STRING (',' receiver+=STRING)*) '}'
	public ReceiverListElements getReceiverListAccess() {
		return pReceiverList;
	}
	
	public ParserRule getReceiverListRule() {
		return getReceiverListAccess().getRule();
	}
	
	//DistributionList rule::DistributionList:
	//	'@' file+=STRING
	public DistributionListElements getDistributionListAccess() {
		return pDistributionList;
	}
	
	public ParserRule getDistributionListRule() {
		return getDistributionListAccess().getRule();
	}
	
	//terminal OPERATOR:
	//	'+' | '-' | '*' | 'DIV';
	public TerminalRule getOPERATORRule() {
		return tOPERATOR;
	}
	
	//terminal LOGICALOPERATOR:
	//	'>' | '<' | '>=' | '<=' | '=';
	public TerminalRule getLOGICALOPERATORRule() {
		return tLOGICALOPERATOR;
	}
	
	//terminal CONDITIONALOPERATOR:
	//	'AND' | 'OR';
	public TerminalRule getCONDITIONALOPERATORRule() {
		return tCONDITIONALOPERATOR;
	}
	
	//terminal SELECTOPERATOR:
	//	'COUNT' | 'MIN' | 'MAX';
	public TerminalRule getSELECTOPERATORRule() {
		return tSELECTOPERATOR;
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal SETOPERATOR:
	//	'UNION' | 'EXCEPT' | 'INTERSECT';
	public TerminalRule getSETOPERATORRule() {
		return tSETOPERATOR;
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
