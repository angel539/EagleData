/**
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.rule.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import eagledata.core.dsl.datadesc.dataDsl.DataDescription;
import eagledata.core.dsl.datadesc.dataDsl.Fragment;
import eagledata.core.dsl.datadesc.dataDsl.PrimitiveNode;
import eagledata.core.dsl.rule.ruleDsl.Message;
import eagledata.core.dsl.rule.ruleDsl.Query;
import eagledata.core.dsl.rule.ruleDsl.RuleDslPackage;
import eagledata.core.dsl.rule.ruleDsl.Select;
import eagledata.core.dsl.rule.ruleDsl.SetSelect;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class RuleDslScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if ((context instanceof SetSelect)) {
      boolean _and = false;
      boolean _equals = Objects.equal(reference, RuleDslPackage.Literals.SET_SELECT__SELECTOR);
      if (!_equals) {
        _and = false;
      } else {
        EList<DataDescription> _from = ((SetSelect)context).getFrom();
        boolean _notEquals = (!Objects.equal(_from, null));
        _and = _notEquals;
      }
      if (_and) {
        List<PrimitiveNode> primitiveTypes = new ArrayList<PrimitiveNode>();
        EList<DataDescription> _from_1 = ((SetSelect)context).getFrom();
        for (final DataDescription f : _from_1) {
          {
            List<PrimitiveNode> _allContentsOfType = EcoreUtil2.<PrimitiveNode>getAllContentsOfType(f, PrimitiveNode.class);
            Iterables.<PrimitiveNode>addAll(primitiveTypes, _allContentsOfType);
            EList<Fragment> _fragments = f.getFragments();
            for (final Fragment fragment : _fragments) {
              List<PrimitiveNode> _allContentsOfType_1 = EcoreUtil2.<PrimitiveNode>getAllContentsOfType(fragment, PrimitiveNode.class);
              Iterables.<PrimitiveNode>addAll(primitiveTypes, _allContentsOfType_1);
            }
          }
        }
        return Scopes.scopeFor(primitiveTypes);
      }
    }
    if ((context instanceof Message)) {
      boolean _equals_1 = Objects.equal(reference, RuleDslPackage.Literals.MESSAGE__MESSAGE);
      if (_equals_1) {
        final Iterable<EObject> containers = EcoreUtil2.getAllContainers(context);
        List<PrimitiveNode> primitiveTypes_1 = new ArrayList<PrimitiveNode>();
        for (final EObject container : containers) {
          if ((container instanceof Query)) {
            final List<Select> selects = EcoreUtil2.<Select>getAllContentsOfType(container, Select.class);
            for (final Select select : selects) {
              if ((select instanceof SetSelect)) {
                EList<DataDescription> _from_2 = ((SetSelect)select).getFrom();
                for (final DataDescription f_1 : _from_2) {
                  {
                    List<PrimitiveNode> _allContentsOfType = EcoreUtil2.<PrimitiveNode>getAllContentsOfType(f_1, PrimitiveNode.class);
                    Iterables.<PrimitiveNode>addAll(primitiveTypes_1, _allContentsOfType);
                    EList<Fragment> _fragments = f_1.getFragments();
                    for (final Fragment fragment : _fragments) {
                      List<PrimitiveNode> _allContentsOfType_1 = EcoreUtil2.<PrimitiveNode>getAllContentsOfType(fragment, PrimitiveNode.class);
                      Iterables.<PrimitiveNode>addAll(primitiveTypes_1, _allContentsOfType_1);
                    }
                  }
                }
              }
            }
          }
        }
        return Scopes.scopeFor(primitiveTypes_1);
      }
    }
    return super.getScope(context, reference);
  }
}
