/*
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.rule.scoping

import com.google.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.scoping.IScope
import eagledata.core.dsl.rule.ruleDsl.SetSelect
import org.eclipse.emf.ecore.EReference
import java.util.List
import org.eclipse.xtext.resource.IEObjectDescription
import java.util.ArrayList
import eagledata.core.dsl.rule.ruleDsl.Select
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.resource.EObjectDescription
import eagledata.core.dsl.rule.ruleDsl.RuleModel
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider
import org.eclipse.emf.ecore.EObject
import eagledata.core.dsl.rule.ruleDsl.RuleDslPackage
import eagledata.core.dsl.datadesc.dataDsl.DataDescription
import eagledata.core.dsl.datadesc.dataDsl.PrimitiveNode
import org.eclipse.xtext.scoping.Scopes
import eagledata.core.dsl.rule.ruleDsl.Message
import eagledata.core.dsl.rule.ruleDsl.Query

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class RuleDslScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
	override getScope(EObject context, EReference reference) {
		if(context instanceof SetSelect){
			if (reference == RuleDslPackage.Literals.SET_SELECT__SELECTOR && context.from != null) { 
				var List<PrimitiveNode> primitiveTypes = new ArrayList
				
				for(f : context.from){
					primitiveTypes += EcoreUtil2.getAllContentsOfType(f, PrimitiveNode)
					for(fragment : f.fragments){
						primitiveTypes += EcoreUtil2.getAllContentsOfType(fragment, PrimitiveNode)	
					}
				}
				return Scopes.scopeFor(primitiveTypes)
			}
		}
		
		if(context instanceof Message){
			if (reference == RuleDslPackage.Literals.MESSAGE__MESSAGE) {
				val containers = EcoreUtil2.getAllContainers(context)
				var List<PrimitiveNode> primitiveTypes = new ArrayList
				
				for(container : containers){
					if(container instanceof Query){
						val selects = EcoreUtil2.getAllContentsOfType(container, Select)
						
						for(select : selects){
							if(select instanceof SetSelect){
								for(f : select.from){
									primitiveTypes += EcoreUtil2.getAllContentsOfType(f, PrimitiveNode)
									for(fragment : f.fragments){
										primitiveTypes += EcoreUtil2.getAllContentsOfType(fragment, PrimitiveNode)
									}
								}
							}
						}
					}
				}
				
				return Scopes.scopeFor(primitiveTypes)
			}
		}
		
		return super.getScope(context, reference);
	}
	
	/* @Inject
	IQualifiedNameProvider nameProvider;

	def IScope scope_Select_ref(SetSelect setSelect, EReference reference) {
		//val modelAssociations = (type.eResource as XtextResource).resourceServiceProvider.get(IJvmModelAssociations)
		
		val sourceElem = modelAssociations.getPrimarySourceElement(ref.type)
		
		val List<IEObjectDescription> objects = new ArrayList<IEObjectDescription>();
		
		val RuleModel ruleModel = EcoreUtil2.getContainerOfType(setSelect, RuleModel)
		
		for(importedPackages : ruleModel.imports){
			objects.add(EObjectDescription.create(nameProvider.getFullyQualifiedName(importedPackages), importedPackages));
			
			for(description : importedPackages.)
			
			for()
		}
		
		
		for(ref : setSelect.selector){
			objects.add(EObjectDescription.create(nameProvider.getFullyQualifiedName(ref), ref));
			
			for(ref.)
		}
		
		for (s : m.getSignals()) {
			objects.add(EObjectDescription.create(nameProvider.getQualifiedName(s), s));
			for (Attribute a : s.getType().getAttributes()) {
				objects.add(EObjectDescription.create(nameProvider.getQualifiedName(s) + "." + a.getId(), a));
			}
		}
		return new SimpleScope(IScope.NULLSCOPE, objects);
	}*
	
	/*
	@Inject
	IQualifiedNameProvider nameProvider;

	public IScope scope_Usage_ref(Usage u, EReference r) {
		List<IEObjectDescription> objects = new ArrayList<IEObjectDescription>();
		Model m = EcoreUtil2.getContainerOfType(u, Model.class);
		for (Signal s : m.getSignals()) {
			objects.add(EObjectDescription.create(nameProvider.getQualifiedName(s), s));
			for (Attribute a : s.getType().getAttributes()) {
				objects.add(EObjectDescription.create(nameProvider.getQualifiedName(s) + "." + a.getId(), a));
			}
		}
		return new SimpleScope(IScope.NULLSCOPE, objects);
	}
	 */
	
}
