grammar eagledata.core.dsl.rule.RuleDsl with org.eclipse.xtext.common.Terminals

generate ruleDsl "http://www.core.eagledata/dsl/rule/RuleDsl" as rule
import "http://www.core.eagledata/dsl/streamingdata/StreamingDsl" as streaming

RuleModel returns rule::RuleModel:
	(elements+=RuleElement (elements+=RuleElement)*)? 
;

//=======================================
//Tipos de sentencias que se pueden hacer

RuleElement returns rule::RuleElement:
	Query | Rule
;

Rule returns rule::Rule:
	'rule' name=ID '=' '('
		'on' event = [streaming::Phrase|ID] //event
		('{'(condition=When)?'}')?
		'do'  (actions+=Query ("," actions+=Query)*)
	')'
;	

//=========================================
//Sentencia 1: Queries

Query returns rule::Query:
	select=Select ('{'where=Where'}')? 'as' name=ID
;
	
Select returns rule::Select:
	AddingSelect | SetSelect
;

SetSelect returns rule::SetSelect:
	{rule::SetSelect}
	'select' ((selection+=Selection ( "," selection+=Selection)*)?|(all?='*'))
	(operator=SETOPERATOR select=SetSelect)?
	//(operator=SetOperatorPatternSelect)?
;

		/*SetOperatorPatternSelect returns rule::SetOperator:
			UnionPatternSelect | IntersectPatternSelect | ExceptPatternSelect;
		
		UnionPatternSelect returns rule::Union:
			'union' select=SetSelect;
		
		IntersectPatternSelect returns rule::Intersect:
			'intersect' select=SetSelect;
		
		ExceptPatternSelect returns rule::Except:
			'except' select=SetSelect;*/

Selection returns rule::Selection:
	(selector=[streaming::Concept | ID] '.')? (root+=[streaming::Concept | ID] ('.'root+=[streaming::Concept | ID])*)
;

AddingSelect returns rule::AddingSelect:
	operation=SELECTOPERATOR ((element=[streaming::Concept|ID])?|(all?='*'))
;

/*enum OperationAddingSelect returns rule::OperationAddingSelect:
	count = 'count' //| min = 'min' | max = 'max' | add = 'add' | avg = 'avg'
;*/
		
Where returns rule::Where:
	'where' left=[streaming::Concept|ID] logicalOperator=LOGICALOPERATOR (rightVariable=[streaming::Concept|ID]|right=INT);

/*
Recipient returns Recipient:	
	QueryResponseRecipient | ConcreteRecipient;

QueryResponseRecipient returns QueryResponseRecipient:
	query=[TwitterQuery|EString]
;

ConcreteRecipient returns ConcreteRecipient:
	'@' user=EString;
*/

//===========================================================================================
//When --> Expressions

When returns rule::When:
	'when' left=Expression logicalOperator=LOGICALOPERATOR right=Expression;

Expression returns rule::Expression:
	PlainExpression | ComplexExpression;

PlainExpression returns rule::Expression:
	plainOperand=PlainOperand
;

ComplexExpression returns rule::Expression:
	'(' plainOperand=PlainOperand (complexOperands+=ComplexOperand (complexOperands+=ComplexOperand)*)? ')'
;

Operand returns rule::Operand:
PlainOperand | ComplexOperand;

PlainOperand returns rule::PlainOperand:
	Numeral | QueryOperand;

Numeral returns rule::Numeral:
	value=DOUBLE;

QueryOperand returns rule::QueryOperand:
	query=[rule::Query|ID];

ComplexOperand returns rule::ComplexOperand:
	operator=OPERATOR expression=Expression;

/*ArithmeticalOperator returns rule::ArithmeticalOperator:
	Addition | Subtraction | Multiplication | Division;


Addition returns rule::Addition: '+';

Subtraction returns rule::Subtraction: '-';

Multiplication returns rule::Multiplication: '*';

Division returns rule::Division: '/';*/

/*LogicalOperator returns rule::LogicalOperator:
	MoreThan | LessThan | MoreEqual | LessEqual | Equal;

MoreThan returns expression::MoreThan:
	{expression::MoreThan} '>' ;
	
LessThan returns expression::LessThan:
	{expression::LessThan} '<' ;

MoreEqual returns expression::MoreEqual:
	{expression::MoreEqual} '>=' ;
	
LessEqual returns expression::LessEqual:
	{expression::LessEqual} '<=' ;
	
Equal returns expression::Equal:
	{expression::Equal} '=' ;*/

/*EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
EInt returns ecore::EInt:
	'-'? INT;
	
EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;*/
	
terminal OPERATOR : '+' | '-' | '*' | 'DIV';
terminal LOGICALOPERATOR : '>' | '<' | '>=' | '<=' | '=';
/*enum OperationAddingSelect returns rule::OperationAddingSelect:
	count = 'count' //| min = 'min' | max = 'max' | add = 'add' | avg = 'avg'
;*/
terminal SELECTOPERATOR : 'COUNT' | 'MIN' | 'MAX';
terminal DOUBLE : INT '.' INT;
terminal SETOPERATOR : 'UNION' | 'EXCEPT' | 'INTERSECT';
