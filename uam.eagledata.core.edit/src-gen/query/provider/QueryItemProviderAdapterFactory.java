/**
 */
package query.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import query.util.QueryAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QueryItemProviderAdapterFactory extends QueryAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public QueryItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link query.QuerySet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuerySetItemProvider querySetItemProvider;

	/**
	 * This creates an adapter for a {@link query.QuerySet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuerySetAdapter() {
		if (querySetItemProvider == null) {
			querySetItemProvider = new QuerySetItemProvider(this);
		}

		return querySetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link query.Select} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectItemProvider selectItemProvider;

	/**
	 * This creates an adapter for a {@link query.Select}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectAdapter() {
		if (selectItemProvider == null) {
			selectItemProvider = new SelectItemProvider(this);
		}

		return selectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link query.SimpleFrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleFromItemProvider simpleFromItemProvider;

	/**
	 * This creates an adapter for a {@link query.SimpleFrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleFromAdapter() {
		if (simpleFromItemProvider == null) {
			simpleFromItemProvider = new SimpleFromItemProvider(this);
		}

		return simpleFromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link query.CompositeFrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeFromItemProvider compositeFromItemProvider;

	/**
	 * This creates an adapter for a {@link query.CompositeFrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeFromAdapter() {
		if (compositeFromItemProvider == null) {
			compositeFromItemProvider = new CompositeFromItemProvider(this);
		}

		return compositeFromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link query.SimpleCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleConditionItemProvider simpleConditionItemProvider;

	/**
	 * This creates an adapter for a {@link query.SimpleCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleConditionAdapter() {
		if (simpleConditionItemProvider == null) {
			simpleConditionItemProvider = new SimpleConditionItemProvider(this);
		}

		return simpleConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link query.CompositeCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeConditionItemProvider compositeConditionItemProvider;

	/**
	 * This creates an adapter for a {@link query.CompositeCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeConditionAdapter() {
		if (compositeConditionItemProvider == null) {
			compositeConditionItemProvider = new CompositeConditionItemProvider(this);
		}

		return compositeConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link query.ModelValueComparisonPredicate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelValueComparisonPredicateItemProvider modelValueComparisonPredicateItemProvider;

	/**
	 * This creates an adapter for a {@link query.ModelValueComparisonPredicate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelValueComparisonPredicateAdapter() {
		if (modelValueComparisonPredicateItemProvider == null) {
			modelValueComparisonPredicateItemProvider = new ModelValueComparisonPredicateItemProvider(this);
		}

		return modelValueComparisonPredicateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link query.PrimitiveValueComparisonPredicate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveValueComparisonPredicateItemProvider primitiveValueComparisonPredicateItemProvider;

	/**
	 * This creates an adapter for a {@link query.PrimitiveValueComparisonPredicate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveValueComparisonPredicateAdapter() {
		if (primitiveValueComparisonPredicateItemProvider == null) {
			primitiveValueComparisonPredicateItemProvider = new PrimitiveValueComparisonPredicateItemProvider(this);
		}

		return primitiveValueComparisonPredicateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link query.QueryParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryParamItemProvider queryParamItemProvider;

	/**
	 * This creates an adapter for a {@link query.QueryParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryParamAdapter() {
		if (queryParamItemProvider == null) {
			queryParamItemProvider = new QueryParamItemProvider(this);
		}

		return queryParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link query.ParamValueComparisonPredicate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamValueComparisonPredicateItemProvider paramValueComparisonPredicateItemProvider;

	/**
	 * This creates an adapter for a {@link query.ParamValueComparisonPredicate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamValueComparisonPredicateAdapter() {
		if (paramValueComparisonPredicateItemProvider == null) {
			paramValueComparisonPredicateItemProvider = new ParamValueComparisonPredicateItemProvider(this);
		}

		return paramValueComparisonPredicateItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (querySetItemProvider != null) querySetItemProvider.dispose();
		if (selectItemProvider != null) selectItemProvider.dispose();
		if (simpleFromItemProvider != null) simpleFromItemProvider.dispose();
		if (compositeFromItemProvider != null) compositeFromItemProvider.dispose();
		if (simpleConditionItemProvider != null) simpleConditionItemProvider.dispose();
		if (compositeConditionItemProvider != null) compositeConditionItemProvider.dispose();
		if (modelValueComparisonPredicateItemProvider != null) modelValueComparisonPredicateItemProvider.dispose();
		if (primitiveValueComparisonPredicateItemProvider != null) primitiveValueComparisonPredicateItemProvider.dispose();
		if (queryParamItemProvider != null) queryParamItemProvider.dispose();
		if (paramValueComparisonPredicateItemProvider != null) paramValueComparisonPredicateItemProvider.dispose();
	}

}
