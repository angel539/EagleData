// automatically generated by Xtext
grammar uam.eagledata.dsl.query.QueryDsl with org.eclipse.xtext.common.Terminals

import "http://www.core.extremo/SemanticManager" as semanticmanager
import "http://www.core.eagledata/Query" as query
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

QuerySet returns query::QuerySet:
	{query::QuerySet}
	'query-set' name = QualifiedName '{'
		('import' importedNamespace+=QualifiedNameWithWildcard ('import' importedNamespace+=QualifiedNameWithWildcard)*)?
		(queries+=Select (queries+=Select)*)?
	'}'
;

QualifiedNameWithWildcard:
    QualifiedName '.*'?;

QualifiedName:
    ID ('.' ID)*;

/* Select */
Select returns query::Select:
	{query::Select}
	name=ID ('('params+=QueryParam ("," params+=QueryParam)*')')? ':' 'select' (selectAll?='*' | (selection+=[semanticmanager::DataProperty] ("," selection+=[semanticmanager::DataProperty])*))
	('from' ((from+=SimpleFrom (',' from+=SimpleFrom)*) | (from+=SimpleFrom (from+=CompositeFrom)+)))?
	('where' where=Condition)?
;

QueryParam returns query::QueryParam:
	type=Type name=ID
;

/* From */
From returns query::From:
	SimpleFrom | CompositeFrom
;

SimpleFrom returns query::SimpleFrom:
	{query::SimpleFrom}
	source=[semanticmanager::SemanticNode | QualifiedName]
;

CompositeFrom returns query::CompositeFrom:
	{query::CompositeFrom}
	join=JoinType source=[semanticmanager::SemanticNode | QualifiedName] 'on' on=Condition
;

/* Condition */
Condition returns query::Condition:
	SimpleCondition | CompositeCondition
;

SimpleCondition returns query::SimpleCondition:
	{query::SimpleCondition}
	predicate=Predicate
;

Predicate returns query::ComparisonPredicate:
	PrimitiveValuePredicate | ModelValuePredicate | ParamValuePredicate
;

PrimitiveValuePredicate returns query::PrimitiveValueComparisonPredicate:
	{query::PrimitiveValueComparisonPredicate}
	(not?='not')? left=[semanticmanager::DataProperty | QualifiedName] comparisonType=ComparisonType value=EString
;

ModelValuePredicate returns query::ModelValueComparisonPredicate:
	{query::ModelValueComparisonPredicate}
	(not?='not')? left=[semanticmanager::DataProperty | QualifiedName] comparisonType=ComparisonType '{'right=[semanticmanager::DataProperty | QualifiedName]'}'
;

ParamValuePredicate returns query::ParamValueComparisonPredicate:
	{query::ParamValueComparisonPredicate}
	(not?='not')? left=[semanticmanager::DataProperty | QualifiedName] comparisonType=ComparisonType '['right=[query::QueryParam | ID]']'
;

CompositeCondition returns query::CompositeCondition:
	{query::CompositeCondition}
	predicate=Predicate connection=ConnectionType on=Condition
;

enum JoinType returns query::JoinType:
	inner = 'join' | left = 'left-join' | right = 'right-join' | outer = 'outer-join' | leftouter = 'left-outer-join' | rightouter = 'right-outer-join';

enum ComparisonType returns query::ComparisonType:
	equal = '=' | notequal = '!=' | lessthan = '<' | lessthanorequal = '<=' | greaterthan = '>' | greaterthanorequal = '>=';

enum ConnectionType returns query::ConnectionType:
	and = 'and' | or = 'or';

EString returns ecore::EString:
	STRING | ID;

enum Type returns semanticmanager::Type:
				String = 'String' | Int = 'Int' | Boolean = 'Boolean' | Float = 'Float' | Double = 'Double';