/*
 * generated by Xtext 2.9.2
 */
package uam.eagledata.dsl.query.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import query.CompositeCondition;
import query.CompositeFrom;
import query.ModelValueComparisonPredicate;
import query.ParamValueComparisonPredicate;
import query.PrimitiveValueComparisonPredicate;
import query.QueryPackage;
import query.QueryParam;
import query.QuerySet;
import query.Select;
import query.SimpleCondition;
import query.SimpleFrom;
import uam.eagledata.dsl.query.services.QueryDslGrammarAccess;

@SuppressWarnings("all")
public class QueryDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QueryDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QueryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QueryPackage.COMPOSITE_CONDITION:
				sequence_CompositeCondition(context, (CompositeCondition) semanticObject); 
				return; 
			case QueryPackage.COMPOSITE_FROM:
				sequence_CompositeFrom(context, (CompositeFrom) semanticObject); 
				return; 
			case QueryPackage.MODEL_VALUE_COMPARISON_PREDICATE:
				sequence_ModelValuePredicate(context, (ModelValueComparisonPredicate) semanticObject); 
				return; 
			case QueryPackage.PARAM_VALUE_COMPARISON_PREDICATE:
				sequence_ParamValuePredicate(context, (ParamValueComparisonPredicate) semanticObject); 
				return; 
			case QueryPackage.PRIMITIVE_VALUE_COMPARISON_PREDICATE:
				sequence_PrimitiveValuePredicate(context, (PrimitiveValueComparisonPredicate) semanticObject); 
				return; 
			case QueryPackage.QUERY_PARAM:
				sequence_QueryParam(context, (QueryParam) semanticObject); 
				return; 
			case QueryPackage.QUERY_SET:
				sequence_QuerySet(context, (QuerySet) semanticObject); 
				return; 
			case QueryPackage.SELECT:
				sequence_Select(context, (Select) semanticObject); 
				return; 
			case QueryPackage.SIMPLE_CONDITION:
				sequence_SimpleCondition(context, (SimpleCondition) semanticObject); 
				return; 
			case QueryPackage.SIMPLE_FROM:
				sequence_SimpleFrom(context, (SimpleFrom) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Condition returns CompositeCondition
	 *     CompositeCondition returns CompositeCondition
	 *
	 * Constraint:
	 *     (predicate=Predicate connection=ConnectionType on=Condition)
	 */
	protected void sequence_CompositeCondition(ISerializationContext context, CompositeCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, QueryPackage.Literals.CONDITION__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, QueryPackage.Literals.CONDITION__PREDICATE));
			if (transientValues.isValueTransient((EObject) semanticObject, QueryPackage.Literals.COMPOSITE_CONDITION__CONNECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, QueryPackage.Literals.COMPOSITE_CONDITION__CONNECTION));
			if (transientValues.isValueTransient((EObject) semanticObject, QueryPackage.Literals.COMPOSITE_CONDITION__ON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, QueryPackage.Literals.COMPOSITE_CONDITION__ON));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getCompositeConditionAccess().getPredicatePredicateParserRuleCall_1_0(), semanticObject.getPredicate());
		feeder.accept(grammarAccess.getCompositeConditionAccess().getConnectionConnectionTypeEnumRuleCall_2_0(), semanticObject.getConnection());
		feeder.accept(grammarAccess.getCompositeConditionAccess().getOnConditionParserRuleCall_3_0(), semanticObject.getOn());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     From returns CompositeFrom
	 *     CompositeFrom returns CompositeFrom
	 *
	 * Constraint:
	 *     (join=JoinType source=[SemanticNode|QualifiedName] on=Condition)
	 */
	protected void sequence_CompositeFrom(ISerializationContext context, CompositeFrom semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, QueryPackage.Literals.COMPOSITE_FROM__JOIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, QueryPackage.Literals.COMPOSITE_FROM__JOIN));
			if (transientValues.isValueTransient((EObject) semanticObject, QueryPackage.Literals.FROM__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, QueryPackage.Literals.FROM__SOURCE));
			if (transientValues.isValueTransient((EObject) semanticObject, QueryPackage.Literals.COMPOSITE_FROM__ON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, QueryPackage.Literals.COMPOSITE_FROM__ON));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getCompositeFromAccess().getJoinJoinTypeEnumRuleCall_1_0(), semanticObject.getJoin());
		feeder.accept(grammarAccess.getCompositeFromAccess().getSourceSemanticNodeQualifiedNameParserRuleCall_2_0_1(), semanticObject.getSource());
		feeder.accept(grammarAccess.getCompositeFromAccess().getOnConditionParserRuleCall_4_0(), semanticObject.getOn());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns ModelValueComparisonPredicate
	 *     ModelValuePredicate returns ModelValueComparisonPredicate
	 *
	 * Constraint:
	 *     (not?='not'? left=[DataProperty|QualifiedName] comparisonType=ComparisonType right=[DataProperty|QualifiedName])
	 */
	protected void sequence_ModelValuePredicate(ISerializationContext context, ModelValueComparisonPredicate semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns ParamValueComparisonPredicate
	 *     ParamValuePredicate returns ParamValueComparisonPredicate
	 *
	 * Constraint:
	 *     (not?='not'? left=[DataProperty|QualifiedName] comparisonType=ComparisonType right=[QueryParam|ID])
	 */
	protected void sequence_ParamValuePredicate(ISerializationContext context, ParamValueComparisonPredicate semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns PrimitiveValueComparisonPredicate
	 *     PrimitiveValuePredicate returns PrimitiveValueComparisonPredicate
	 *
	 * Constraint:
	 *     (not?='not'? left=[DataProperty|QualifiedName] comparisonType=ComparisonType value=EString)
	 */
	protected void sequence_PrimitiveValuePredicate(ISerializationContext context, PrimitiveValueComparisonPredicate semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryParam returns QueryParam
	 *
	 * Constraint:
	 *     (type=Type name=ID)
	 */
	protected void sequence_QueryParam(ISerializationContext context, QueryParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, QueryPackage.Literals.QUERY_PARAM__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, QueryPackage.Literals.QUERY_PARAM__TYPE));
			if (transientValues.isValueTransient((EObject) semanticObject, QueryPackage.Literals.QUERY_PARAM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, QueryPackage.Literals.QUERY_PARAM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getQueryParamAccess().getTypeTypeEnumRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getQueryParamAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QuerySet returns QuerySet
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         (importedNamespace+=QualifiedNameWithWildcard importedNamespace+=QualifiedNameWithWildcard*)? 
	 *         (queries+=Select queries+=Select*)?
	 *     )
	 */
	protected void sequence_QuerySet(ISerializationContext context, QuerySet semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Select returns Select
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (params+=QueryParam params+=QueryParam*)? 
	 *         (selectAll?='*' | (selection+=[DataProperty|ID] selection+=[DataProperty|ID]*)) 
	 *         ((from+=SimpleFrom from+=SimpleFrom*) | (from+=SimpleFrom from+=CompositeFrom+))? 
	 *         where=Condition?
	 *     )
	 */
	protected void sequence_Select(ISerializationContext context, Select semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns SimpleCondition
	 *     SimpleCondition returns SimpleCondition
	 *
	 * Constraint:
	 *     predicate=Predicate
	 */
	protected void sequence_SimpleCondition(ISerializationContext context, SimpleCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, QueryPackage.Literals.CONDITION__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, QueryPackage.Literals.CONDITION__PREDICATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getSimpleConditionAccess().getPredicatePredicateParserRuleCall_1_0(), semanticObject.getPredicate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     From returns SimpleFrom
	 *     SimpleFrom returns SimpleFrom
	 *
	 * Constraint:
	 *     source=[SemanticNode|QualifiedName]
	 */
	protected void sequence_SimpleFrom(ISerializationContext context, SimpleFrom semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, QueryPackage.Literals.FROM__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, QueryPackage.Literals.FROM__SOURCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getSimpleFromAccess().getSourceSemanticNodeQualifiedNameParserRuleCall_1_0_1(), semanticObject.getSource());
		feeder.finish();
	}
	
	
}
