/*
 * generated by Xtext 2.9.2
 */
package uam.eagledata.dsl.query.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QueryDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class QuerySetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.QuerySet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuerySetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuerySetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImportKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_4_1_0 = (RuleCall)cImportedNamespaceAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cImportKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_4_2_1_0 = (RuleCall)cImportedNamespaceAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cQueriesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cQueriesSelectParserRuleCall_5_0_0 = (RuleCall)cQueriesAssignment_5_0.eContents().get(0);
		private final Assignment cQueriesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cQueriesSelectParserRuleCall_5_1_0 = (RuleCall)cQueriesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//QuerySet query::QuerySet:
		//	{query::QuerySet}
		//	'query-set' name=QualifiedName '{' ('import' importedNamespace+=QualifiedNameWithWildcard ('import'
		//	importedNamespace+=QualifiedNameWithWildcard)*)? (queries+=Select queries+=Select*)?
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{query::QuerySet} 'query-set' name=QualifiedName '{' ('import' importedNamespace+=QualifiedNameWithWildcard ('import'
		//importedNamespace+=QualifiedNameWithWildcard)*)? (queries+=Select queries+=Select*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{query::QuerySet}
		public Action getQuerySetAction_0() { return cQuerySetAction_0; }
		
		//'query-set'
		public Keyword getQuerySetKeyword_1() { return cQuerySetKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('import' importedNamespace+=QualifiedNameWithWildcard ('import' importedNamespace+=QualifiedNameWithWildcard)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'import'
		public Keyword getImportKeyword_4_0() { return cImportKeyword_4_0; }
		
		//importedNamespace+=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_4_1() { return cImportedNamespaceAssignment_4_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_4_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_4_1_0; }
		
		//('import' importedNamespace+=QualifiedNameWithWildcard)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'import'
		public Keyword getImportKeyword_4_2_0() { return cImportKeyword_4_2_0; }
		
		//importedNamespace+=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_4_2_1() { return cImportedNamespaceAssignment_4_2_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_4_2_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_4_2_1_0; }
		
		//(queries+=Select queries+=Select*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//queries+=Select
		public Assignment getQueriesAssignment_5_0() { return cQueriesAssignment_5_0; }
		
		//Select
		public RuleCall getQueriesSelectParserRuleCall_5_0_0() { return cQueriesSelectParserRuleCall_5_0_0; }
		
		//queries+=Select*
		public Assignment getQueriesAssignment_5_1() { return cQueriesAssignment_5_1; }
		
		//Select
		public RuleCall getQueriesSelectParserRuleCall_5_1_0() { return cQueriesSelectParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsQueryParamParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsQueryParamParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSelectKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cSelectAllAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final Keyword cSelectAllAsteriskKeyword_5_0_0 = (Keyword)cSelectAllAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cSelectionAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final CrossReference cSelectionDataPropertyCrossReference_5_1_0_0 = (CrossReference)cSelectionAssignment_5_1_0.eContents().get(0);
		private final RuleCall cSelectionDataPropertyIDTerminalRuleCall_5_1_0_0_1 = (RuleCall)cSelectionDataPropertyCrossReference_5_1_0_0.eContents().get(1);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cSelectionAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final CrossReference cSelectionDataPropertyCrossReference_5_1_1_1_0 = (CrossReference)cSelectionAssignment_5_1_1_1.eContents().get(0);
		private final RuleCall cSelectionDataPropertyIDTerminalRuleCall_5_1_1_1_0_1 = (RuleCall)cSelectionDataPropertyCrossReference_5_1_1_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFromKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cAlternatives_6_1.eContents().get(0);
		private final Assignment cFromAssignment_6_1_0_0 = (Assignment)cGroup_6_1_0.eContents().get(0);
		private final RuleCall cFromSimpleFromParserRuleCall_6_1_0_0_0 = (RuleCall)cFromAssignment_6_1_0_0.eContents().get(0);
		private final Group cGroup_6_1_0_1 = (Group)cGroup_6_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0_1_0 = (Keyword)cGroup_6_1_0_1.eContents().get(0);
		private final Assignment cFromAssignment_6_1_0_1_1 = (Assignment)cGroup_6_1_0_1.eContents().get(1);
		private final RuleCall cFromSimpleFromParserRuleCall_6_1_0_1_1_0 = (RuleCall)cFromAssignment_6_1_0_1_1.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cAlternatives_6_1.eContents().get(1);
		private final Assignment cFromAssignment_6_1_1_0 = (Assignment)cGroup_6_1_1.eContents().get(0);
		private final RuleCall cFromSimpleFromParserRuleCall_6_1_1_0_0 = (RuleCall)cFromAssignment_6_1_1_0.eContents().get(0);
		private final Assignment cFromAssignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final RuleCall cFromCompositeFromParserRuleCall_6_1_1_1_0 = (RuleCall)cFromAssignment_6_1_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWhereKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cWhereAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cWhereConditionParserRuleCall_7_1_0 = (RuleCall)cWhereAssignment_7_1.eContents().get(0);
		
		/// * Select * / Select query::Select:
		//	{query::Select} name=ID ('(' params+=QueryParam ("," params+=QueryParam)* ')')? ':' 'select' (selectAll?='*' |
		//	selection+=[semanticmanager::DataProperty] ("," selection+=[semanticmanager::DataProperty])*) ('from'
		//	(from+=SimpleFrom (',' from+=SimpleFrom)* | from+=SimpleFrom from+=CompositeFrom+))? ('where' where=Condition)?
		@Override public ParserRule getRule() { return rule; }
		
		//{query::Select} name=ID ('(' params+=QueryParam ("," params+=QueryParam)* ')')? ':' 'select' (selectAll?='*' |
		//selection+=[semanticmanager::DataProperty] ("," selection+=[semanticmanager::DataProperty])*) ('from' (from+=SimpleFrom
		//(',' from+=SimpleFrom)* | from+=SimpleFrom from+=CompositeFrom+))? ('where' where=Condition)?
		public Group getGroup() { return cGroup; }
		
		//{query::Select}
		public Action getSelectAction_0() { return cSelectAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' params+=QueryParam ("," params+=QueryParam)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//params+=QueryParam
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }
		
		//QueryParam
		public RuleCall getParamsQueryParamParserRuleCall_2_1_0() { return cParamsQueryParamParserRuleCall_2_1_0; }
		
		//("," params+=QueryParam)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//params+=QueryParam
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }
		
		//QueryParam
		public RuleCall getParamsQueryParamParserRuleCall_2_2_1_0() { return cParamsQueryParamParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'select'
		public Keyword getSelectKeyword_4() { return cSelectKeyword_4; }
		
		//(selectAll?='*' | selection+=[semanticmanager::DataProperty] ("," selection+=[semanticmanager::DataProperty])*)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//selectAll?='*'
		public Assignment getSelectAllAssignment_5_0() { return cSelectAllAssignment_5_0; }
		
		//'*'
		public Keyword getSelectAllAsteriskKeyword_5_0_0() { return cSelectAllAsteriskKeyword_5_0_0; }
		
		//selection+=[semanticmanager::DataProperty] ("," selection+=[semanticmanager::DataProperty])*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//selection+=[semanticmanager::DataProperty]
		public Assignment getSelectionAssignment_5_1_0() { return cSelectionAssignment_5_1_0; }
		
		//[semanticmanager::DataProperty]
		public CrossReference getSelectionDataPropertyCrossReference_5_1_0_0() { return cSelectionDataPropertyCrossReference_5_1_0_0; }
		
		//ID
		public RuleCall getSelectionDataPropertyIDTerminalRuleCall_5_1_0_0_1() { return cSelectionDataPropertyIDTerminalRuleCall_5_1_0_0_1; }
		
		//("," selection+=[semanticmanager::DataProperty])*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_1_0() { return cCommaKeyword_5_1_1_0; }
		
		//selection+=[semanticmanager::DataProperty]
		public Assignment getSelectionAssignment_5_1_1_1() { return cSelectionAssignment_5_1_1_1; }
		
		//[semanticmanager::DataProperty]
		public CrossReference getSelectionDataPropertyCrossReference_5_1_1_1_0() { return cSelectionDataPropertyCrossReference_5_1_1_1_0; }
		
		//ID
		public RuleCall getSelectionDataPropertyIDTerminalRuleCall_5_1_1_1_0_1() { return cSelectionDataPropertyIDTerminalRuleCall_5_1_1_1_0_1; }
		
		//('from' (from+=SimpleFrom (',' from+=SimpleFrom)* | from+=SimpleFrom from+=CompositeFrom+))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'from'
		public Keyword getFromKeyword_6_0() { return cFromKeyword_6_0; }
		
		//(from+=SimpleFrom (',' from+=SimpleFrom)* | from+=SimpleFrom from+=CompositeFrom+)
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//from+=SimpleFrom (',' from+=SimpleFrom)*
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }
		
		//from+=SimpleFrom
		public Assignment getFromAssignment_6_1_0_0() { return cFromAssignment_6_1_0_0; }
		
		//SimpleFrom
		public RuleCall getFromSimpleFromParserRuleCall_6_1_0_0_0() { return cFromSimpleFromParserRuleCall_6_1_0_0_0; }
		
		//(',' from+=SimpleFrom)*
		public Group getGroup_6_1_0_1() { return cGroup_6_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0_1_0() { return cCommaKeyword_6_1_0_1_0; }
		
		//from+=SimpleFrom
		public Assignment getFromAssignment_6_1_0_1_1() { return cFromAssignment_6_1_0_1_1; }
		
		//SimpleFrom
		public RuleCall getFromSimpleFromParserRuleCall_6_1_0_1_1_0() { return cFromSimpleFromParserRuleCall_6_1_0_1_1_0; }
		
		//from+=SimpleFrom from+=CompositeFrom+
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }
		
		//from+=SimpleFrom
		public Assignment getFromAssignment_6_1_1_0() { return cFromAssignment_6_1_1_0; }
		
		//SimpleFrom
		public RuleCall getFromSimpleFromParserRuleCall_6_1_1_0_0() { return cFromSimpleFromParserRuleCall_6_1_1_0_0; }
		
		//from+=CompositeFrom+
		public Assignment getFromAssignment_6_1_1_1() { return cFromAssignment_6_1_1_1; }
		
		//CompositeFrom
		public RuleCall getFromCompositeFromParserRuleCall_6_1_1_1_0() { return cFromCompositeFromParserRuleCall_6_1_1_1_0; }
		
		//('where' where=Condition)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'where'
		public Keyword getWhereKeyword_7_0() { return cWhereKeyword_7_0; }
		
		//where=Condition
		public Assignment getWhereAssignment_7_1() { return cWhereAssignment_7_1; }
		
		//Condition
		public RuleCall getWhereConditionParserRuleCall_7_1_0() { return cWhereConditionParserRuleCall_7_1_0; }
	}
	public class QueryParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.QueryParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//QueryParam query::QueryParam:
		//	type=Type name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_0_0() { return cTypeTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.From");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleFromParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeFromParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * From * / From query::From:
		//	SimpleFrom | CompositeFrom
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleFrom | CompositeFrom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleFrom
		public RuleCall getSimpleFromParserRuleCall_0() { return cSimpleFromParserRuleCall_0; }
		
		//CompositeFrom
		public RuleCall getCompositeFromParserRuleCall_1() { return cCompositeFromParserRuleCall_1; }
	}
	public class SimpleFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.SimpleFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleFromAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceSemanticNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceSemanticNodeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cSourceSemanticNodeCrossReference_1_0.eContents().get(1);
		
		//SimpleFrom query::SimpleFrom:
		//	{query::SimpleFrom} source=[semanticmanager::SemanticNode|QualifiedName]
		@Override public ParserRule getRule() { return rule; }
		
		//{query::SimpleFrom} source=[semanticmanager::SemanticNode|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//{query::SimpleFrom}
		public Action getSimpleFromAction_0() { return cSimpleFromAction_0; }
		
		//source=[semanticmanager::SemanticNode|QualifiedName]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[semanticmanager::SemanticNode|QualifiedName]
		public CrossReference getSourceSemanticNodeCrossReference_1_0() { return cSourceSemanticNodeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getSourceSemanticNodeQualifiedNameParserRuleCall_1_0_1() { return cSourceSemanticNodeQualifiedNameParserRuleCall_1_0_1; }
	}
	public class CompositeFromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.CompositeFrom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeFromAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cJoinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJoinJoinTypeEnumRuleCall_1_0 = (RuleCall)cJoinAssignment_1.eContents().get(0);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceSemanticNodeCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceSemanticNodeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSourceSemanticNodeCrossReference_2_0.eContents().get(1);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOnConditionParserRuleCall_4_0 = (RuleCall)cOnAssignment_4.eContents().get(0);
		
		//CompositeFrom query::CompositeFrom:
		//	{query::CompositeFrom} join=JoinType source=[semanticmanager::SemanticNode|QualifiedName] 'on' on=Condition
		@Override public ParserRule getRule() { return rule; }
		
		//{query::CompositeFrom} join=JoinType source=[semanticmanager::SemanticNode|QualifiedName] 'on' on=Condition
		public Group getGroup() { return cGroup; }
		
		//{query::CompositeFrom}
		public Action getCompositeFromAction_0() { return cCompositeFromAction_0; }
		
		//join=JoinType
		public Assignment getJoinAssignment_1() { return cJoinAssignment_1; }
		
		//JoinType
		public RuleCall getJoinJoinTypeEnumRuleCall_1_0() { return cJoinJoinTypeEnumRuleCall_1_0; }
		
		//source=[semanticmanager::SemanticNode|QualifiedName]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[semanticmanager::SemanticNode|QualifiedName]
		public CrossReference getSourceSemanticNodeCrossReference_2_0() { return cSourceSemanticNodeCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getSourceSemanticNodeQualifiedNameParserRuleCall_2_0_1() { return cSourceSemanticNodeQualifiedNameParserRuleCall_2_0_1; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//on=Condition
		public Assignment getOnAssignment_4() { return cOnAssignment_4; }
		
		//Condition
		public RuleCall getOnConditionParserRuleCall_4_0() { return cOnConditionParserRuleCall_4_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * Condition * / Condition query::Condition:
		//	SimpleCondition | CompositeCondition
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleCondition | CompositeCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleCondition
		public RuleCall getSimpleConditionParserRuleCall_0() { return cSimpleConditionParserRuleCall_0; }
		
		//CompositeCondition
		public RuleCall getCompositeConditionParserRuleCall_1() { return cCompositeConditionParserRuleCall_1; }
	}
	public class SimpleConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.SimpleCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		
		//SimpleCondition query::SimpleCondition:
		//	{query::SimpleCondition} predicate=Predicate
		@Override public ParserRule getRule() { return rule; }
		
		//{query::SimpleCondition} predicate=Predicate
		public Group getGroup() { return cGroup; }
		
		//{query::SimpleCondition}
		public Action getSimpleConditionAction_0() { return cSimpleConditionAction_0; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_1_0() { return cPredicatePredicateParserRuleCall_1_0; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.Predicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveValuePredicateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelValuePredicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParamValuePredicateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Predicate query::ComparisonPredicate:
		//	PrimitiveValuePredicate | ModelValuePredicate | ParamValuePredicate
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveValuePredicate | ModelValuePredicate | ParamValuePredicate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveValuePredicate
		public RuleCall getPrimitiveValuePredicateParserRuleCall_0() { return cPrimitiveValuePredicateParserRuleCall_0; }
		
		//ModelValuePredicate
		public RuleCall getModelValuePredicateParserRuleCall_1() { return cModelValuePredicateParserRuleCall_1; }
		
		//ParamValuePredicate
		public RuleCall getParamValuePredicateParserRuleCall_2() { return cParamValuePredicateParserRuleCall_2; }
	}
	public class PrimitiveValuePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.PrimitiveValuePredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveValueComparisonPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNotKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftDataPropertyCrossReference_2_0 = (CrossReference)cLeftAssignment_2.eContents().get(0);
		private final RuleCall cLeftDataPropertyQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cLeftDataPropertyCrossReference_2_0.eContents().get(1);
		private final Assignment cComparisonTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComparisonTypeComparisonTypeEnumRuleCall_3_0 = (RuleCall)cComparisonTypeAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueEStringParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//PrimitiveValuePredicate query::PrimitiveValueComparisonPredicate:
		//	{query::PrimitiveValueComparisonPredicate} not?='not'? left=[semanticmanager::DataProperty|QualifiedName]
		//	comparisonType=ComparisonType value=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{query::PrimitiveValueComparisonPredicate} not?='not'? left=[semanticmanager::DataProperty|QualifiedName]
		//comparisonType=ComparisonType value=EString
		public Group getGroup() { return cGroup; }
		
		//{query::PrimitiveValueComparisonPredicate}
		public Action getPrimitiveValueComparisonPredicateAction_0() { return cPrimitiveValueComparisonPredicateAction_0; }
		
		//not?='not'?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }
		
		//'not'
		public Keyword getNotNotKeyword_1_0() { return cNotNotKeyword_1_0; }
		
		//left=[semanticmanager::DataProperty|QualifiedName]
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//[semanticmanager::DataProperty|QualifiedName]
		public CrossReference getLeftDataPropertyCrossReference_2_0() { return cLeftDataPropertyCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getLeftDataPropertyQualifiedNameParserRuleCall_2_0_1() { return cLeftDataPropertyQualifiedNameParserRuleCall_2_0_1; }
		
		//comparisonType=ComparisonType
		public Assignment getComparisonTypeAssignment_3() { return cComparisonTypeAssignment_3; }
		
		//ComparisonType
		public RuleCall getComparisonTypeComparisonTypeEnumRuleCall_3_0() { return cComparisonTypeComparisonTypeEnumRuleCall_3_0; }
		
		//value=EString
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_4_0() { return cValueEStringParserRuleCall_4_0; }
	}
	public class ModelValuePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.ModelValuePredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelValueComparisonPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNotKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftDataPropertyCrossReference_2_0 = (CrossReference)cLeftAssignment_2.eContents().get(0);
		private final RuleCall cLeftDataPropertyQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cLeftDataPropertyCrossReference_2_0.eContents().get(1);
		private final Assignment cComparisonTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComparisonTypeComparisonTypeEnumRuleCall_3_0 = (RuleCall)cComparisonTypeAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRightDataPropertyCrossReference_5_0 = (CrossReference)cRightAssignment_5.eContents().get(0);
		private final RuleCall cRightDataPropertyQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cRightDataPropertyCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ModelValuePredicate query::ModelValueComparisonPredicate:
		//	{query::ModelValueComparisonPredicate} not?='not'? left=[semanticmanager::DataProperty|QualifiedName]
		//	comparisonType=ComparisonType '{' right=[semanticmanager::DataProperty|QualifiedName] '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{query::ModelValueComparisonPredicate} not?='not'? left=[semanticmanager::DataProperty|QualifiedName]
		//comparisonType=ComparisonType '{' right=[semanticmanager::DataProperty|QualifiedName] '}'
		public Group getGroup() { return cGroup; }
		
		//{query::ModelValueComparisonPredicate}
		public Action getModelValueComparisonPredicateAction_0() { return cModelValueComparisonPredicateAction_0; }
		
		//not?='not'?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }
		
		//'not'
		public Keyword getNotNotKeyword_1_0() { return cNotNotKeyword_1_0; }
		
		//left=[semanticmanager::DataProperty|QualifiedName]
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//[semanticmanager::DataProperty|QualifiedName]
		public CrossReference getLeftDataPropertyCrossReference_2_0() { return cLeftDataPropertyCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getLeftDataPropertyQualifiedNameParserRuleCall_2_0_1() { return cLeftDataPropertyQualifiedNameParserRuleCall_2_0_1; }
		
		//comparisonType=ComparisonType
		public Assignment getComparisonTypeAssignment_3() { return cComparisonTypeAssignment_3; }
		
		//ComparisonType
		public RuleCall getComparisonTypeComparisonTypeEnumRuleCall_3_0() { return cComparisonTypeComparisonTypeEnumRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//right=[semanticmanager::DataProperty|QualifiedName]
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//[semanticmanager::DataProperty|QualifiedName]
		public CrossReference getRightDataPropertyCrossReference_5_0() { return cRightDataPropertyCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getRightDataPropertyQualifiedNameParserRuleCall_5_0_1() { return cRightDataPropertyQualifiedNameParserRuleCall_5_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ParamValuePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.ParamValuePredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParamValueComparisonPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotNotKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftDataPropertyCrossReference_2_0 = (CrossReference)cLeftAssignment_2.eContents().get(0);
		private final RuleCall cLeftDataPropertyQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cLeftDataPropertyCrossReference_2_0.eContents().get(1);
		private final Assignment cComparisonTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComparisonTypeComparisonTypeEnumRuleCall_3_0 = (RuleCall)cComparisonTypeAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRightQueryParamCrossReference_5_0 = (CrossReference)cRightAssignment_5.eContents().get(0);
		private final RuleCall cRightQueryParamIDTerminalRuleCall_5_0_1 = (RuleCall)cRightQueryParamCrossReference_5_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ParamValuePredicate query::ParamValueComparisonPredicate:
		//	{query::ParamValueComparisonPredicate} not?='not'? left=[semanticmanager::DataProperty|QualifiedName]
		//	comparisonType=ComparisonType '[' right=[query::QueryParam] ']'
		@Override public ParserRule getRule() { return rule; }
		
		//{query::ParamValueComparisonPredicate} not?='not'? left=[semanticmanager::DataProperty|QualifiedName]
		//comparisonType=ComparisonType '[' right=[query::QueryParam] ']'
		public Group getGroup() { return cGroup; }
		
		//{query::ParamValueComparisonPredicate}
		public Action getParamValueComparisonPredicateAction_0() { return cParamValueComparisonPredicateAction_0; }
		
		//not?='not'?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }
		
		//'not'
		public Keyword getNotNotKeyword_1_0() { return cNotNotKeyword_1_0; }
		
		//left=[semanticmanager::DataProperty|QualifiedName]
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//[semanticmanager::DataProperty|QualifiedName]
		public CrossReference getLeftDataPropertyCrossReference_2_0() { return cLeftDataPropertyCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getLeftDataPropertyQualifiedNameParserRuleCall_2_0_1() { return cLeftDataPropertyQualifiedNameParserRuleCall_2_0_1; }
		
		//comparisonType=ComparisonType
		public Assignment getComparisonTypeAssignment_3() { return cComparisonTypeAssignment_3; }
		
		//ComparisonType
		public RuleCall getComparisonTypeComparisonTypeEnumRuleCall_3_0() { return cComparisonTypeComparisonTypeEnumRuleCall_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//right=[query::QueryParam]
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//[query::QueryParam]
		public CrossReference getRightQueryParamCrossReference_5_0() { return cRightQueryParamCrossReference_5_0; }
		
		//ID
		public RuleCall getRightQueryParamIDTerminalRuleCall_5_0_1() { return cRightQueryParamIDTerminalRuleCall_5_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class CompositeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.CompositeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		private final Assignment cConnectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConnectionConnectionTypeEnumRuleCall_2_0 = (RuleCall)cConnectionAssignment_2.eContents().get(0);
		private final Assignment cOnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOnConditionParserRuleCall_3_0 = (RuleCall)cOnAssignment_3.eContents().get(0);
		
		//CompositeCondition query::CompositeCondition:
		//	{query::CompositeCondition} predicate=Predicate connection=ConnectionType on=Condition
		@Override public ParserRule getRule() { return rule; }
		
		//{query::CompositeCondition} predicate=Predicate connection=ConnectionType on=Condition
		public Group getGroup() { return cGroup; }
		
		//{query::CompositeCondition}
		public Action getCompositeConditionAction_0() { return cCompositeConditionAction_0; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_1_0() { return cPredicatePredicateParserRuleCall_1_0; }
		
		//connection=ConnectionType
		public Assignment getConnectionAssignment_2() { return cConnectionAssignment_2; }
		
		//ConnectionType
		public RuleCall getConnectionConnectionTypeEnumRuleCall_2_0() { return cConnectionConnectionTypeEnumRuleCall_2_0; }
		
		//on=Condition
		public Assignment getOnAssignment_3() { return cOnAssignment_3; }
		
		//Condition
		public RuleCall getOnConditionParserRuleCall_3_0() { return cOnConditionParserRuleCall_3_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class JoinTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.JoinType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInnerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInnerJoinKeyword_0_0 = (Keyword)cInnerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLeftLeftJoinKeyword_1_0 = (Keyword)cLeftEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRightRightJoinKeyword_2_0 = (Keyword)cRightEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOuterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOuterOuterJoinKeyword_3_0 = (Keyword)cOuterEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLeftouterEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLeftouterLeftOuterJoinKeyword_4_0 = (Keyword)cLeftouterEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRightouterEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRightouterRightOuterJoinKeyword_5_0 = (Keyword)cRightouterEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum JoinType returns query::JoinType:
		//	inner='join' | left='left-join' | right='right-join' | outer='outer-join' | leftouter='left-outer-join' |
		//	rightouter='right-outer-join';
		public EnumRule getRule() { return rule; }
		
		//inner='join' | left='left-join' | right='right-join' | outer='outer-join' | leftouter='left-outer-join' |
		//rightouter='right-outer-join'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//inner='join'
		public EnumLiteralDeclaration getInnerEnumLiteralDeclaration_0() { return cInnerEnumLiteralDeclaration_0; }
		
		//'join'
		public Keyword getInnerJoinKeyword_0_0() { return cInnerJoinKeyword_0_0; }
		
		//left='left-join'
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_1() { return cLeftEnumLiteralDeclaration_1; }
		
		//'left-join'
		public Keyword getLeftLeftJoinKeyword_1_0() { return cLeftLeftJoinKeyword_1_0; }
		
		//right='right-join'
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_2() { return cRightEnumLiteralDeclaration_2; }
		
		//'right-join'
		public Keyword getRightRightJoinKeyword_2_0() { return cRightRightJoinKeyword_2_0; }
		
		//outer='outer-join'
		public EnumLiteralDeclaration getOuterEnumLiteralDeclaration_3() { return cOuterEnumLiteralDeclaration_3; }
		
		//'outer-join'
		public Keyword getOuterOuterJoinKeyword_3_0() { return cOuterOuterJoinKeyword_3_0; }
		
		//leftouter='left-outer-join'
		public EnumLiteralDeclaration getLeftouterEnumLiteralDeclaration_4() { return cLeftouterEnumLiteralDeclaration_4; }
		
		//'left-outer-join'
		public Keyword getLeftouterLeftOuterJoinKeyword_4_0() { return cLeftouterLeftOuterJoinKeyword_4_0; }
		
		//rightouter='right-outer-join'
		public EnumLiteralDeclaration getRightouterEnumLiteralDeclaration_5() { return cRightouterEnumLiteralDeclaration_5; }
		
		//'right-outer-join'
		public Keyword getRightouterRightOuterJoinKeyword_5_0() { return cRightouterRightOuterJoinKeyword_5_0; }
	}
	public class ComparisonTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.ComparisonType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotequalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotequalExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNotequalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessthanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessthanLessThanSignKeyword_2_0 = (Keyword)cLessthanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLessthanorequalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLessthanorequalLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLessthanorequalEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterthanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterthanGreaterThanSignKeyword_4_0 = (Keyword)cGreaterthanEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterthanorequalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGreaterthanorequalGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGreaterthanorequalEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ComparisonType returns query::ComparisonType:
		//	equal='=' | notequal='!=' | lessthan='<' | lessthanorequal='<=' | greaterthan='>' | greaterthanorequal='>=';
		public EnumRule getRule() { return rule; }
		
		//equal='=' | notequal='!=' | lessthan='<' | lessthanorequal='<=' | greaterthan='>' | greaterthanorequal='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equal='='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_0_0() { return cEqualEqualsSignKeyword_0_0; }
		
		//notequal='!='
		public EnumLiteralDeclaration getNotequalEnumLiteralDeclaration_1() { return cNotequalEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNotequalExclamationMarkEqualsSignKeyword_1_0() { return cNotequalExclamationMarkEqualsSignKeyword_1_0; }
		
		//lessthan='<'
		public EnumLiteralDeclaration getLessthanEnumLiteralDeclaration_2() { return cLessthanEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLessthanLessThanSignKeyword_2_0() { return cLessthanLessThanSignKeyword_2_0; }
		
		//lessthanorequal='<='
		public EnumLiteralDeclaration getLessthanorequalEnumLiteralDeclaration_3() { return cLessthanorequalEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLessthanorequalLessThanSignEqualsSignKeyword_3_0() { return cLessthanorequalLessThanSignEqualsSignKeyword_3_0; }
		
		//greaterthan='>'
		public EnumLiteralDeclaration getGreaterthanEnumLiteralDeclaration_4() { return cGreaterthanEnumLiteralDeclaration_4; }
		
		//'>'
		public Keyword getGreaterthanGreaterThanSignKeyword_4_0() { return cGreaterthanGreaterThanSignKeyword_4_0; }
		
		//greaterthanorequal='>='
		public EnumLiteralDeclaration getGreaterthanorequalEnumLiteralDeclaration_5() { return cGreaterthanorequalEnumLiteralDeclaration_5; }
		
		//'>='
		public Keyword getGreaterthanorequalGreaterThanSignEqualsSignKeyword_5_0() { return cGreaterthanorequalGreaterThanSignEqualsSignKeyword_5_0; }
	}
	public class ConnectionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.ConnectionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConnectionType returns query::ConnectionType:
		//	and | or;
		public EnumRule getRule() { return rule; }
		
		//and | or
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }
		
		//'and'
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }
		
		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }
		
		//'or'
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }
	}
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uam.eagledata.dsl.query.QueryDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFloatFloatKeyword_3_0 = (Keyword)cFloatEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDoubleDoubleKeyword_4_0 = (Keyword)cDoubleEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Type returns semanticmanager::Type:
		//	String | Int | Boolean | Float | Double;
		public EnumRule getRule() { return rule; }
		
		//String | Int | Boolean | Float | Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//Int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }
		
		//'Int'
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
		
		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }
		
		//'Boolean'
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
		
		//Float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_3() { return cFloatEnumLiteralDeclaration_3; }
		
		//'Float'
		public Keyword getFloatFloatKeyword_3_0() { return cFloatFloatKeyword_3_0; }
		
		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_4() { return cDoubleEnumLiteralDeclaration_4; }
		
		//'Double'
		public Keyword getDoubleDoubleKeyword_4_0() { return cDoubleDoubleKeyword_4_0; }
	}
	
	private final QuerySetElements pQuerySet;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final SelectElements pSelect;
	private final QueryParamElements pQueryParam;
	private final FromElements pFrom;
	private final SimpleFromElements pSimpleFrom;
	private final CompositeFromElements pCompositeFrom;
	private final ConditionElements pCondition;
	private final SimpleConditionElements pSimpleCondition;
	private final PredicateElements pPredicate;
	private final PrimitiveValuePredicateElements pPrimitiveValuePredicate;
	private final ModelValuePredicateElements pModelValuePredicate;
	private final ParamValuePredicateElements pParamValuePredicate;
	private final CompositeConditionElements pCompositeCondition;
	private final JoinTypeElements eJoinType;
	private final ComparisonTypeElements eComparisonType;
	private final ConnectionTypeElements eConnectionType;
	private final EStringElements pEString;
	private final TypeElements eType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QueryDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQuerySet = new QuerySetElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pSelect = new SelectElements();
		this.pQueryParam = new QueryParamElements();
		this.pFrom = new FromElements();
		this.pSimpleFrom = new SimpleFromElements();
		this.pCompositeFrom = new CompositeFromElements();
		this.pCondition = new ConditionElements();
		this.pSimpleCondition = new SimpleConditionElements();
		this.pPredicate = new PredicateElements();
		this.pPrimitiveValuePredicate = new PrimitiveValuePredicateElements();
		this.pModelValuePredicate = new ModelValuePredicateElements();
		this.pParamValuePredicate = new ParamValuePredicateElements();
		this.pCompositeCondition = new CompositeConditionElements();
		this.eJoinType = new JoinTypeElements();
		this.eComparisonType = new ComparisonTypeElements();
		this.eConnectionType = new ConnectionTypeElements();
		this.pEString = new EStringElements();
		this.eType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uam.eagledata.dsl.query.QueryDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//QuerySet query::QuerySet:
	//	{query::QuerySet}
	//	'query-set' name=QualifiedName '{' ('import' importedNamespace+=QualifiedNameWithWildcard ('import'
	//	importedNamespace+=QualifiedNameWithWildcard)*)? (queries+=Select queries+=Select*)?
	//	'}'
	public QuerySetElements getQuerySetAccess() {
		return pQuerySet;
	}
	
	public ParserRule getQuerySetRule() {
		return getQuerySetAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	/// * Select * / Select query::Select:
	//	{query::Select} name=ID ('(' params+=QueryParam ("," params+=QueryParam)* ')')? ':' 'select' (selectAll?='*' |
	//	selection+=[semanticmanager::DataProperty] ("," selection+=[semanticmanager::DataProperty])*) ('from'
	//	(from+=SimpleFrom (',' from+=SimpleFrom)* | from+=SimpleFrom from+=CompositeFrom+))? ('where' where=Condition)?
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//QueryParam query::QueryParam:
	//	type=Type name=ID
	public QueryParamElements getQueryParamAccess() {
		return pQueryParam;
	}
	
	public ParserRule getQueryParamRule() {
		return getQueryParamAccess().getRule();
	}
	
	/// * From * / From query::From:
	//	SimpleFrom | CompositeFrom
	public FromElements getFromAccess() {
		return pFrom;
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}
	
	//SimpleFrom query::SimpleFrom:
	//	{query::SimpleFrom} source=[semanticmanager::SemanticNode|QualifiedName]
	public SimpleFromElements getSimpleFromAccess() {
		return pSimpleFrom;
	}
	
	public ParserRule getSimpleFromRule() {
		return getSimpleFromAccess().getRule();
	}
	
	//CompositeFrom query::CompositeFrom:
	//	{query::CompositeFrom} join=JoinType source=[semanticmanager::SemanticNode|QualifiedName] 'on' on=Condition
	public CompositeFromElements getCompositeFromAccess() {
		return pCompositeFrom;
	}
	
	public ParserRule getCompositeFromRule() {
		return getCompositeFromAccess().getRule();
	}
	
	/// * Condition * / Condition query::Condition:
	//	SimpleCondition | CompositeCondition
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//SimpleCondition query::SimpleCondition:
	//	{query::SimpleCondition} predicate=Predicate
	public SimpleConditionElements getSimpleConditionAccess() {
		return pSimpleCondition;
	}
	
	public ParserRule getSimpleConditionRule() {
		return getSimpleConditionAccess().getRule();
	}
	
	//Predicate query::ComparisonPredicate:
	//	PrimitiveValuePredicate | ModelValuePredicate | ParamValuePredicate
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//PrimitiveValuePredicate query::PrimitiveValueComparisonPredicate:
	//	{query::PrimitiveValueComparisonPredicate} not?='not'? left=[semanticmanager::DataProperty|QualifiedName]
	//	comparisonType=ComparisonType value=EString
	public PrimitiveValuePredicateElements getPrimitiveValuePredicateAccess() {
		return pPrimitiveValuePredicate;
	}
	
	public ParserRule getPrimitiveValuePredicateRule() {
		return getPrimitiveValuePredicateAccess().getRule();
	}
	
	//ModelValuePredicate query::ModelValueComparisonPredicate:
	//	{query::ModelValueComparisonPredicate} not?='not'? left=[semanticmanager::DataProperty|QualifiedName]
	//	comparisonType=ComparisonType '{' right=[semanticmanager::DataProperty|QualifiedName] '}'
	public ModelValuePredicateElements getModelValuePredicateAccess() {
		return pModelValuePredicate;
	}
	
	public ParserRule getModelValuePredicateRule() {
		return getModelValuePredicateAccess().getRule();
	}
	
	//ParamValuePredicate query::ParamValueComparisonPredicate:
	//	{query::ParamValueComparisonPredicate} not?='not'? left=[semanticmanager::DataProperty|QualifiedName]
	//	comparisonType=ComparisonType '[' right=[query::QueryParam] ']'
	public ParamValuePredicateElements getParamValuePredicateAccess() {
		return pParamValuePredicate;
	}
	
	public ParserRule getParamValuePredicateRule() {
		return getParamValuePredicateAccess().getRule();
	}
	
	//CompositeCondition query::CompositeCondition:
	//	{query::CompositeCondition} predicate=Predicate connection=ConnectionType on=Condition
	public CompositeConditionElements getCompositeConditionAccess() {
		return pCompositeCondition;
	}
	
	public ParserRule getCompositeConditionRule() {
		return getCompositeConditionAccess().getRule();
	}
	
	//enum JoinType returns query::JoinType:
	//	inner='join' | left='left-join' | right='right-join' | outer='outer-join' | leftouter='left-outer-join' |
	//	rightouter='right-outer-join';
	public JoinTypeElements getJoinTypeAccess() {
		return eJoinType;
	}
	
	public EnumRule getJoinTypeRule() {
		return getJoinTypeAccess().getRule();
	}
	
	//enum ComparisonType returns query::ComparisonType:
	//	equal='=' | notequal='!=' | lessthan='<' | lessthanorequal='<=' | greaterthan='>' | greaterthanorequal='>=';
	public ComparisonTypeElements getComparisonTypeAccess() {
		return eComparisonType;
	}
	
	public EnumRule getComparisonTypeRule() {
		return getComparisonTypeAccess().getRule();
	}
	
	//enum ConnectionType returns query::ConnectionType:
	//	and | or;
	public ConnectionTypeElements getConnectionTypeAccess() {
		return eConnectionType;
	}
	
	public EnumRule getConnectionTypeRule() {
		return getConnectionTypeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum Type returns semanticmanager::Type:
	//	String | Int | Boolean | Float | Double;
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
