/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.datadesc.formatting2;

import com.google.inject.Inject;
import eagledata.core.dsl.datadesc.dataDsl.AbstractDescription;
import eagledata.core.dsl.datadesc.dataDsl.DataModel;
import eagledata.core.dsl.datadesc.dataDsl.DataModelElement;
import eagledata.core.dsl.datadesc.dataDsl.Enumeration;
import eagledata.core.dsl.datadesc.dataDsl.Node;
import eagledata.core.dsl.datadesc.dataDsl.SpecificationElement;
import eagledata.core.dsl.datadesc.dataDsl.Tag;
import eagledata.core.dsl.datadesc.services.DataDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class DataDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DataDslGrammarAccess _dataDslGrammarAccess;
  
  protected void _format(final DataModel dataModel, @Extension final IFormattableDocument document) {
    EList<DataModelElement> _elements = dataModel.getElements();
    for (final DataModelElement elements : _elements) {
      document.<DataModelElement>format(elements);
    }
  }
  
  protected void _format(final eagledata.core.dsl.datadesc.dataDsl.Package _package, @Extension final IFormattableDocument document) {
    EList<Tag> _tags = _package.getTags();
    for (final Tag tags : _tags) {
      document.<Tag>format(tags);
    }
    EList<SpecificationElement> _elements = _package.getElements();
    for (final SpecificationElement elements : _elements) {
      document.<SpecificationElement>format(elements);
    }
  }
  
  protected void _format(final AbstractDescription description, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<AbstractDescription>interior(description, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(description);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_prepend, _function_2);
    EList<Node> _nodes = description.getNodes();
    for (final Node node : _nodes) {
      document.<Node>format(node);
    }
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(description);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_1, _function_3);
  }
  
  protected void _format(final Enumeration enumeration, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Enumeration>append(enumeration, _function);
  }
  
  protected void _format(final Node node, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Node>append(node, _function);
  }
  
  public void format(final Object enumeration, final IFormattableDocument document) {
    if (enumeration instanceof Enumeration) {
      _format((Enumeration)enumeration, document);
      return;
    } else if (enumeration instanceof AbstractDescription) {
      _format((AbstractDescription)enumeration, document);
      return;
    } else if (enumeration instanceof XtextResource) {
      _format((XtextResource)enumeration, document);
      return;
    } else if (enumeration instanceof eagledata.core.dsl.datadesc.dataDsl.Package) {
      _format((eagledata.core.dsl.datadesc.dataDsl.Package)enumeration, document);
      return;
    } else if (enumeration instanceof DataModel) {
      _format((DataModel)enumeration, document);
      return;
    } else if (enumeration instanceof Node) {
      _format((Node)enumeration, document);
      return;
    } else if (enumeration instanceof EObject) {
      _format((EObject)enumeration, document);
      return;
    } else if (enumeration == null) {
      _format((Void)null, document);
      return;
    } else if (enumeration != null) {
      _format(enumeration, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(enumeration, document).toString());
    }
  }
}
