/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.datadesc.formatting2;

import com.google.inject.Inject;
import eagledata.core.dsl.datadesc.dataDsl.DataDescription;
import eagledata.core.dsl.datadesc.dataDsl.DataModel;
import eagledata.core.dsl.datadesc.dataDsl.DataModelElement;
import eagledata.core.dsl.datadesc.dataDsl.Enumeration;
import eagledata.core.dsl.datadesc.dataDsl.SpecificationElement;
import eagledata.core.dsl.datadesc.dataDsl.Tag;
import eagledata.core.dsl.datadesc.services.DataDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class DataDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DataDslGrammarAccess _dataDslGrammarAccess;
  
  protected void _format(final DataModel dataModel, @Extension final IFormattableDocument document) {
    EList<DataModelElement> _elements = dataModel.getElements();
    for (final DataModelElement elements : _elements) {
      document.<DataModelElement>format(elements);
    }
  }
  
  protected void _format(final eagledata.core.dsl.datadesc.dataDsl.Package _package, @Extension final IFormattableDocument document) {
    EList<Tag> _tags = _package.getTags();
    for (final Tag tags : _tags) {
      document.<Tag>format(tags);
    }
    EList<SpecificationElement> _elements = _package.getElements();
    for (final SpecificationElement elements : _elements) {
      document.<SpecificationElement>format(elements);
    }
  }
  
  protected void _format(final DataDescription description, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<DataDescription>interior(description, _function);
  }
  
  protected void _format(final Enumeration enumeration, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Enumeration>append(enumeration, _function);
  }
  
  public void format(final Object description, final IFormattableDocument document) {
    if (description instanceof DataDescription) {
      _format((DataDescription)description, document);
      return;
    } else if (description instanceof Enumeration) {
      _format((Enumeration)description, document);
      return;
    } else if (description instanceof XtextResource) {
      _format((XtextResource)description, document);
      return;
    } else if (description instanceof eagledata.core.dsl.datadesc.dataDsl.Package) {
      _format((eagledata.core.dsl.datadesc.dataDsl.Package)description, document);
      return;
    } else if (description instanceof DataModel) {
      _format((DataModel)description, document);
      return;
    } else if (description instanceof EObject) {
      _format((EObject)description, document);
      return;
    } else if (description == null) {
      _format((Void)null, document);
      return;
    } else if (description != null) {
      _format(description, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(description, document).toString());
    }
  }
}
