/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.datadesc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DataDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionsDataModelElementParserRuleCall_0_0 = (RuleCall)cDescriptionsAssignment_0.eContents().get(0);
		private final Assignment cDescriptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionsDataModelElementParserRuleCall_1_0 = (RuleCall)cDescriptionsAssignment_1.eContents().get(0);
		
		//DataModel data::DataModel:
		//	descriptions+=DataModelElement descriptions+=DataModelElement*
		@Override public ParserRule getRule() { return rule; }
		
		//descriptions+=DataModelElement descriptions+=DataModelElement*
		public Group getGroup() { return cGroup; }
		
		//descriptions+=DataModelElement
		public Assignment getDescriptionsAssignment_0() { return cDescriptionsAssignment_0; }
		
		//DataModelElement
		public RuleCall getDescriptionsDataModelElementParserRuleCall_0_0() { return cDescriptionsDataModelElementParserRuleCall_0_0; }
		
		//descriptions+=DataModelElement*
		public Assignment getDescriptionsAssignment_1() { return cDescriptionsAssignment_1; }
		
		//DataModelElement
		public RuleCall getDescriptionsDataModelElementParserRuleCall_1_0() { return cDescriptionsDataModelElementParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		/// ******************** * / Import data::Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class DataModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataPackableDescriptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataSourceDescriptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// ******************** * / DataModelElement data::DataModelElement:
		//	Import | PackageDeclaration | DataPackableDescription | DataSourceDescription
		@Override public ParserRule getRule() { return rule; }
		
		//Import | PackageDeclaration | DataPackableDescription | DataSourceDescription
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }
		
		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_1() { return cPackageDeclarationParserRuleCall_1; }
		
		//DataPackableDescription
		public RuleCall getDataPackableDescriptionParserRuleCall_2() { return cDataPackableDescriptionParserRuleCall_2; }
		
		//DataSourceDescription
		public RuleCall getDataSourceDescriptionParserRuleCall_3() { return cDataSourceDescriptionParserRuleCall_3; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsDataPackableDescriptionParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsDataPackableDescriptionParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PackageDeclaration data::Package:
		//	'package' name=QualifiedName '{'
		//	elements+=DataPackableDescription elements+=DataPackableDescription*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{' elements+=DataPackableDescription elements+=DataPackableDescription* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=DataPackableDescription
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//DataPackableDescription
		public RuleCall getElementsDataPackableDescriptionParserRuleCall_3_0() { return cElementsDataPackableDescriptionParserRuleCall_3_0; }
		
		//elements+=DataPackableDescription*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//DataPackableDescription
		public RuleCall getElementsDataPackableDescriptionParserRuleCall_4_0() { return cElementsDataPackableDescriptionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DataPackableDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataPackableDescription");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringConceptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataFragmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DataPackableDescription data::DataPackableDescription:
		//	StringConcept | TypeSpecification | DataFragment
		@Override public ParserRule getRule() { return rule; }
		
		//StringConcept | TypeSpecification | DataFragment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringConcept
		public RuleCall getStringConceptParserRuleCall_0() { return cStringConceptParserRuleCall_0; }
		
		//TypeSpecification
		public RuleCall getTypeSpecificationParserRuleCall_1() { return cTypeSpecificationParserRuleCall_1; }
		
		//DataFragment
		public RuleCall getDataFragmentParserRuleCall_2() { return cDataFragmentParserRuleCall_2; }
	}
	public class StringConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.StringConcept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSubsequenceAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSubsequenceSubstringConceptParserRuleCall_4_0_0 = (RuleCall)cSubsequenceAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSubsequenceAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSubsequenceSubstringConceptParserRuleCall_4_1_1_0 = (RuleCall)cSubsequenceAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StringConcept data::StringConcept:
		//	'string' name=ID '=' '(' (subsequence+=SubstringConcept ("," subsequence+=SubstringConcept)*)? ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'string' name=ID '=' '(' (subsequence+=SubstringConcept ("," subsequence+=SubstringConcept)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'string'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(subsequence+=SubstringConcept ("," subsequence+=SubstringConcept)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//subsequence+=SubstringConcept
		public Assignment getSubsequenceAssignment_4_0() { return cSubsequenceAssignment_4_0; }
		
		//SubstringConcept
		public RuleCall getSubsequenceSubstringConceptParserRuleCall_4_0_0() { return cSubsequenceSubstringConceptParserRuleCall_4_0_0; }
		
		//("," subsequence+=SubstringConcept)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//subsequence+=SubstringConcept
		public Assignment getSubsequenceAssignment_4_1_1() { return cSubsequenceAssignment_4_1_1; }
		
		//SubstringConcept
		public RuleCall getSubsequenceSubstringConceptParserRuleCall_4_1_1_0() { return cSubsequenceSubstringConceptParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SubstringConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.SubstringConcept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharacterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubstringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SubstringConcept data::SubstringConcept:
		//	Character | Substring
		@Override public ParserRule getRule() { return rule; }
		
		//Character | Substring
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Character
		public RuleCall getCharacterParserRuleCall_0() { return cCharacterParserRuleCall_0; }
		
		//Substring
		public RuleCall getSubstringParserRuleCall_1() { return cSubstringParserRuleCall_1; }
	}
	public class SubstringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Substring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeStringAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeStringTypeStringEnumRuleCall_0_0 = (RuleCall)cTypeStringAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinlengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinlengthINTTerminalRuleCall_3_0 = (RuleCall)cMinlengthAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMaxlengthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMaxlengthINTTerminalRuleCall_5_0 = (RuleCall)cMaxlengthAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Substring data::Substring:
		//	typeString=TypeString name=ID '[' minlength=INT "," maxlength=INT ']'
		@Override public ParserRule getRule() { return rule; }
		
		//typeString=TypeString name=ID '[' minlength=INT "," maxlength=INT ']'
		public Group getGroup() { return cGroup; }
		
		//typeString=TypeString
		public Assignment getTypeStringAssignment_0() { return cTypeStringAssignment_0; }
		
		//TypeString
		public RuleCall getTypeStringTypeStringEnumRuleCall_0_0() { return cTypeStringTypeStringEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//minlength=INT
		public Assignment getMinlengthAssignment_3() { return cMinlengthAssignment_3; }
		
		//INT
		public RuleCall getMinlengthINTTerminalRuleCall_3_0() { return cMinlengthINTTerminalRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//maxlength=INT
		public Assignment getMaxlengthAssignment_5() { return cMaxlengthAssignment_5; }
		
		//INT
		public RuleCall getMaxlengthINTTerminalRuleCall_5_0() { return cMaxlengthINTTerminalRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Character");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeCharacterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeCharacterTypeCharacterEnumRuleCall_0_0 = (RuleCall)cTypeCharacterAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Character data::Character:
		//	typeCharacter=TypeCharacter name=ID value=STRING?
		@Override public ParserRule getRule() { return rule; }
		
		//typeCharacter=TypeCharacter name=ID value=STRING?
		public Group getGroup() { return cGroup; }
		
		//typeCharacter=TypeCharacter
		public Assignment getTypeCharacterAssignment_0() { return cTypeCharacterAssignment_0; }
		
		//TypeCharacter
		public RuleCall getTypeCharacterTypeCharacterEnumRuleCall_0_0() { return cTypeCharacterTypeCharacterEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//value=STRING?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class DataSourceDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataSourceDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormatFormatEnumRuleCall_1_0 = (RuleCall)cFormatAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFragmentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFragmentsDataFragmentCrossReference_3_1_0 = (CrossReference)cFragmentsAssignment_3_1.eContents().get(0);
		private final RuleCall cFragmentsDataFragmentQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cFragmentsDataFragmentCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFragmentsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cFragmentsDataFragmentCrossReference_3_2_1_0 = (CrossReference)cFragmentsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cFragmentsDataFragmentQualifiedNameParserRuleCall_3_2_1_0_1 = (RuleCall)cFragmentsDataFragmentCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cNodesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cNodesLeafNodeParserRuleCall_5_0_0 = (RuleCall)cNodesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cNodesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cNodesLeafNodeParserRuleCall_5_1_1_0 = (RuleCall)cNodesAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOptionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOptionsDataOptionParserRuleCall_7_1_0 = (RuleCall)cOptionsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cOptionsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cOptionsDataOptionParserRuleCall_7_2_1_0 = (RuleCall)cOptionsAssignment_7_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//DataSourceDescription data::DataSourceDescription:
		//	'description' format=Format name=ID (':' fragments+=[data::DataFragment|QualifiedName] (','
		//	fragments+=[data::DataFragment|QualifiedName])*)? '{' (nodes+=LeafNode ("," nodes+=LeafNode)*)?
		//	'}' ('{' options+=DataOption ("," options+=DataOption)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//'description' format=Format name=ID (':' fragments+=[data::DataFragment|QualifiedName] (','
		//fragments+=[data::DataFragment|QualifiedName])*)? '{' (nodes+=LeafNode ("," nodes+=LeafNode)*)? '}' ('{'
		//options+=DataOption ("," options+=DataOption)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//format=Format
		public Assignment getFormatAssignment_1() { return cFormatAssignment_1; }
		
		//Format
		public RuleCall getFormatFormatEnumRuleCall_1_0() { return cFormatFormatEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(':' fragments+=[data::DataFragment|QualifiedName] (',' fragments+=[data::DataFragment|QualifiedName])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//fragments+=[data::DataFragment|QualifiedName]
		public Assignment getFragmentsAssignment_3_1() { return cFragmentsAssignment_3_1; }
		
		//[data::DataFragment|QualifiedName]
		public CrossReference getFragmentsDataFragmentCrossReference_3_1_0() { return cFragmentsDataFragmentCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getFragmentsDataFragmentQualifiedNameParserRuleCall_3_1_0_1() { return cFragmentsDataFragmentQualifiedNameParserRuleCall_3_1_0_1; }
		
		//(',' fragments+=[data::DataFragment|QualifiedName])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//fragments+=[data::DataFragment|QualifiedName]
		public Assignment getFragmentsAssignment_3_2_1() { return cFragmentsAssignment_3_2_1; }
		
		//[data::DataFragment|QualifiedName]
		public CrossReference getFragmentsDataFragmentCrossReference_3_2_1_0() { return cFragmentsDataFragmentCrossReference_3_2_1_0; }
		
		//QualifiedName
		public RuleCall getFragmentsDataFragmentQualifiedNameParserRuleCall_3_2_1_0_1() { return cFragmentsDataFragmentQualifiedNameParserRuleCall_3_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(nodes+=LeafNode ("," nodes+=LeafNode)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//nodes+=LeafNode
		public Assignment getNodesAssignment_5_0() { return cNodesAssignment_5_0; }
		
		//LeafNode
		public RuleCall getNodesLeafNodeParserRuleCall_5_0_0() { return cNodesLeafNodeParserRuleCall_5_0_0; }
		
		//("," nodes+=LeafNode)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//nodes+=LeafNode
		public Assignment getNodesAssignment_5_1_1() { return cNodesAssignment_5_1_1; }
		
		//LeafNode
		public RuleCall getNodesLeafNodeParserRuleCall_5_1_1_0() { return cNodesLeafNodeParserRuleCall_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('{' options+=DataOption ("," options+=DataOption)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }
		
		//options+=DataOption
		public Assignment getOptionsAssignment_7_1() { return cOptionsAssignment_7_1; }
		
		//DataOption
		public RuleCall getOptionsDataOptionParserRuleCall_7_1_0() { return cOptionsDataOptionParserRuleCall_7_1_0; }
		
		//("," options+=DataOption)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//options+=DataOption
		public Assignment getOptionsAssignment_7_2_1() { return cOptionsAssignment_7_2_1; }
		
		//DataOption
		public RuleCall getOptionsDataOptionParserRuleCall_7_2_1_0() { return cOptionsDataOptionParserRuleCall_7_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class DataFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFragmentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cFragmentsDataFragmentCrossReference_2_1_0 = (CrossReference)cFragmentsAssignment_2_1.eContents().get(0);
		private final RuleCall cFragmentsDataFragmentQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cFragmentsDataFragmentCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFragmentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cFragmentsDataFragmentCrossReference_2_2_1_0 = (CrossReference)cFragmentsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cFragmentsDataFragmentQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cFragmentsDataFragmentCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cNodesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cNodesLeafNodeParserRuleCall_4_0_0 = (RuleCall)cNodesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cNodesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cNodesLeafNodeParserRuleCall_4_1_1_0 = (RuleCall)cNodesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DataFragment data::DataFragment:
		//	'fragment' name=ID (':' fragments+=[data::DataFragment|QualifiedName] (','
		//	fragments+=[data::DataFragment|QualifiedName])*)? '{' (nodes+=LeafNode ("," nodes+=LeafNode)*)?
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'fragment' name=ID (':' fragments+=[data::DataFragment|QualifiedName] (','
		//fragments+=[data::DataFragment|QualifiedName])*)? '{' (nodes+=LeafNode ("," nodes+=LeafNode)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'fragment'
		public Keyword getFragmentKeyword_0() { return cFragmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' fragments+=[data::DataFragment|QualifiedName] (',' fragments+=[data::DataFragment|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//fragments+=[data::DataFragment|QualifiedName]
		public Assignment getFragmentsAssignment_2_1() { return cFragmentsAssignment_2_1; }
		
		//[data::DataFragment|QualifiedName]
		public CrossReference getFragmentsDataFragmentCrossReference_2_1_0() { return cFragmentsDataFragmentCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getFragmentsDataFragmentQualifiedNameParserRuleCall_2_1_0_1() { return cFragmentsDataFragmentQualifiedNameParserRuleCall_2_1_0_1; }
		
		//(',' fragments+=[data::DataFragment|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//fragments+=[data::DataFragment|QualifiedName]
		public Assignment getFragmentsAssignment_2_2_1() { return cFragmentsAssignment_2_2_1; }
		
		//[data::DataFragment|QualifiedName]
		public CrossReference getFragmentsDataFragmentCrossReference_2_2_1_0() { return cFragmentsDataFragmentCrossReference_2_2_1_0; }
		
		//QualifiedName
		public RuleCall getFragmentsDataFragmentQualifiedNameParserRuleCall_2_2_1_0_1() { return cFragmentsDataFragmentQualifiedNameParserRuleCall_2_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(nodes+=LeafNode ("," nodes+=LeafNode)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//nodes+=LeafNode
		public Assignment getNodesAssignment_4_0() { return cNodesAssignment_4_0; }
		
		//LeafNode
		public RuleCall getNodesLeafNodeParserRuleCall_4_0_0() { return cNodesLeafNodeParserRuleCall_4_0_0; }
		
		//("," nodes+=LeafNode)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//nodes+=LeafNode
		public Assignment getNodesAssignment_4_1_1() { return cNodesAssignment_4_1_1; }
		
		//LeafNode
		public RuleCall getNodesLeafNodeParserRuleCall_4_1_1_0() { return cNodesLeafNodeParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.TypeSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStructDataTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeSpecification data::TypeSpecification:
		//	DataType | Enumeration | StructDataType
		@Override public ParserRule getRule() { return rule; }
		
		//DataType | Enumeration | StructDataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
		
		//StructDataType
		public RuleCall getStructDataTypeParserRuleCall_2() { return cStructDataTypeParserRuleCall_2; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefineBasicTypeEnumRuleCall_3_0 = (RuleCall)cRefineAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOptionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_4_1_0 = (RuleCall)cOptionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cOptionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_4_2_1_0 = (RuleCall)cOptionsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//DataType data::DataType:
		//	'datatype' name=ID ':' refine=BasicType ('{' options+=Option ("," options+=Option)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID ':' refine=BasicType ('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//refine=BasicType
		public Assignment getRefineAssignment_3() { return cRefineAssignment_3; }
		
		//BasicType
		public RuleCall getRefineBasicTypeEnumRuleCall_3_0() { return cRefineBasicTypeEnumRuleCall_3_0; }
		
		//('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_4_1() { return cOptionsAssignment_4_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_1_0() { return cOptionsOptionParserRuleCall_4_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_4_2_1() { return cOptionsAssignment_4_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_2_1_0() { return cOptionsOptionParserRuleCall_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesSTRINGTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enumeration data::Enumeration:
		//	'enumeration' name=ID "{" values+=STRING (',' values+=STRING)* "}"
		@Override public ParserRule getRule() { return rule; }
		
		//'enumeration' name=ID "{" values+=STRING (',' values+=STRING)* "}"
		public Group getGroup() { return cGroup; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//values+=STRING
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_3_0() { return cValuesSTRINGTerminalRuleCall_3_0; }
		
		//(',' values+=STRING)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_4_1_0() { return cValuesSTRINGTerminalRuleCall_4_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StructDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.StructDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSubnodesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSubnodesLeafNodeParserRuleCall_3_0_0 = (RuleCall)cSubnodesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSubnodesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cSubnodesLeafNodeParserRuleCall_3_1_1_0 = (RuleCall)cSubnodesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOptionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_5_1_0 = (RuleCall)cOptionsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cOptionsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_5_2_1_0 = (RuleCall)cOptionsAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		/// *Node returns data::Node:
		//	LeafNode
		//;* / StructDataType data::StructDataType: / *(environment?=">")?* / 'struct' name=ID
		//	/ *(':' extends+=[data::CompositeNode | ID] (',' extends+=[data::CompositeNode | ID])*)?* / '{' (subnodes+=LeafNode
		//	("," subnodes+=LeafNode)*) '}' ('{' options+=Option ("," options+=Option)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		/// *(environment?=">")?* / 'struct' name=ID
		/// *(':' extends+=[data::CompositeNode | ID] (',' extends+=[data::CompositeNode | ID])*)?* / '{' (subnodes+=LeafNode (","
		//subnodes+=LeafNode)*) '}' ('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup() { return cGroup; }
		
		/// *(environment?=">")?* / 'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		/// *(':' extends+=[data::CompositeNode | ID] (',' extends+=[data::CompositeNode | ID])*)?* / '{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(subnodes+=LeafNode ("," subnodes+=LeafNode)*)
		public Group getGroup_3() { return cGroup_3; }
		
		//subnodes+=LeafNode
		public Assignment getSubnodesAssignment_3_0() { return cSubnodesAssignment_3_0; }
		
		//LeafNode
		public RuleCall getSubnodesLeafNodeParserRuleCall_3_0_0() { return cSubnodesLeafNodeParserRuleCall_3_0_0; }
		
		//("," subnodes+=LeafNode)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//subnodes+=LeafNode
		public Assignment getSubnodesAssignment_3_1_1() { return cSubnodesAssignment_3_1_1; }
		
		//LeafNode
		public RuleCall getSubnodesLeafNodeParserRuleCall_3_1_1_0() { return cSubnodesLeafNodeParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_5_1() { return cOptionsAssignment_5_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_5_1_0() { return cOptionsOptionParserRuleCall_5_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_5_2_1() { return cOptionsAssignment_5_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_5_2_1_0() { return cOptionsOptionParserRuleCall_5_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class LeafNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.LeafNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cKeyKeyKeyword_0_0_0 = (Keyword)cKeyAssignment_0_0.eContents().get(0);
		private final Assignment cUniqueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cUniqueUniqueKeyword_0_1_0 = (Keyword)cUniqueAssignment_0_1.eContents().get(0);
		private final Assignment cListAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cListListKeyword_0_2_0 = (Keyword)cListAssignment_0_2.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeBasicTypeEnumRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cTypeCallAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cTypeCallTypeSpecificationCrossReference_1_1_0 = (CrossReference)cTypeCallAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeCallTypeSpecificationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTypeCallTypeSpecificationCrossReference_1_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOptionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_3_1_0 = (RuleCall)cOptionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOptionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_3_2_1_0 = (RuleCall)cOptionsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//LeafNode data::LeafNode:
		//	(key?="key" | unique?="unique" | list?="list")? (type=BasicType | typeCall=[data::TypeSpecification]) name=ID ('{'
		//	options+=Option ("," options+=Option)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//(key?="key" | unique?="unique" | list?="list")? (type=BasicType | typeCall=[data::TypeSpecification]) name=ID ('{'
		//options+=Option ("," options+=Option)* '}')?
		public Group getGroup() { return cGroup; }
		
		//(key?="key" | unique?="unique" | list?="list")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//key?="key"
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//"key"
		public Keyword getKeyKeyKeyword_0_0_0() { return cKeyKeyKeyword_0_0_0; }
		
		//unique?="unique"
		public Assignment getUniqueAssignment_0_1() { return cUniqueAssignment_0_1; }
		
		//"unique"
		public Keyword getUniqueUniqueKeyword_0_1_0() { return cUniqueUniqueKeyword_0_1_0; }
		
		//list?="list"
		public Assignment getListAssignment_0_2() { return cListAssignment_0_2; }
		
		//"list"
		public Keyword getListListKeyword_0_2_0() { return cListListKeyword_0_2_0; }
		
		//(type=BasicType | typeCall=[data::TypeSpecification])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=BasicType
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//BasicType
		public RuleCall getTypeBasicTypeEnumRuleCall_1_0_0() { return cTypeBasicTypeEnumRuleCall_1_0_0; }
		
		//typeCall=[data::TypeSpecification]
		public Assignment getTypeCallAssignment_1_1() { return cTypeCallAssignment_1_1; }
		
		//[data::TypeSpecification]
		public CrossReference getTypeCallTypeSpecificationCrossReference_1_1_0() { return cTypeCallTypeSpecificationCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTypeCallTypeSpecificationIDTerminalRuleCall_1_1_0_1() { return cTypeCallTypeSpecificationIDTerminalRuleCall_1_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_3_1() { return cOptionsAssignment_3_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_3_1_0() { return cOptionsOptionParserRuleCall_3_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_3_2_1() { return cOptionsAssignment_3_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_3_2_1_0() { return cOptionsOptionParserRuleCall_3_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringOptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanOptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSequenceOptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoubleOptionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Option data::Option:
		//	StringOption | IntOption | BooleanOption | SequenceOption | DoubleOption
		@Override public ParserRule getRule() { return rule; }
		
		//StringOption | IntOption | BooleanOption | SequenceOption | DoubleOption
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringOption
		public RuleCall getStringOptionParserRuleCall_0() { return cStringOptionParserRuleCall_0; }
		
		//IntOption
		public RuleCall getIntOptionParserRuleCall_1() { return cIntOptionParserRuleCall_1; }
		
		//BooleanOption
		public RuleCall getBooleanOptionParserRuleCall_2() { return cBooleanOptionParserRuleCall_2; }
		
		//SequenceOption
		public RuleCall getSequenceOptionParserRuleCall_3() { return cSequenceOptionParserRuleCall_3; }
		
		//DoubleOption
		public RuleCall getDoubleOptionParserRuleCall_4() { return cDoubleOptionParserRuleCall_4; }
	}
	public class StringOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.StringOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyStringOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StringOption data::StringOption:
		//	key=StringOptionKey '=' value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//key=StringOptionKey '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=StringOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//StringOptionKey
		public RuleCall getKeyStringOptionKeyEnumRuleCall_0_0() { return cKeyStringOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class IntOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.IntOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIntOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IntOption data::IntOption:
		//	key=IntOptionKey '=' value=INT
		@Override public ParserRule getRule() { return rule; }
		
		//key=IntOptionKey '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//key=IntOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//IntOptionKey
		public RuleCall getKeyIntOptionKeyEnumRuleCall_0_0() { return cKeyIntOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class DoubleOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DoubleOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyDoubleOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDOUBLETerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DoubleOption data::DoubleOption:
		//	key=DoubleOptionKey '=' value=DOUBLE
		@Override public ParserRule getRule() { return rule; }
		
		//key=DoubleOptionKey '=' value=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//key=DoubleOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//DoubleOptionKey
		public RuleCall getKeyDoubleOptionKeyEnumRuleCall_0_0() { return cKeyDoubleOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_2_0() { return cValueDOUBLETerminalRuleCall_2_0; }
	}
	public class BooleanOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.BooleanOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyBooleanOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBOOLEANTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//BooleanOption data::BooleanOption:
		//	key=BooleanOptionKey '=' value=BOOLEAN
		@Override public ParserRule getRule() { return rule; }
		
		//key=BooleanOptionKey '=' value=BOOLEAN
		public Group getGroup() { return cGroup; }
		
		//key=BooleanOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//BooleanOptionKey
		public RuleCall getKeyBooleanOptionKeyEnumRuleCall_0_0() { return cKeyBooleanOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_2_0() { return cValueBOOLEANTerminalRuleCall_2_0; }
	}
	public class SequenceOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.SequenceOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySequenceOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueStringConceptCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueStringConceptQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cValueStringConceptCrossReference_2_0.eContents().get(1);
		
		//SequenceOption data::SequenceOption:
		//	key=SequenceOptionKey '=' value=[data::StringConcept|QualifiedName]
		@Override public ParserRule getRule() { return rule; }
		
		//key=SequenceOptionKey '=' value=[data::StringConcept|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//key=SequenceOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//SequenceOptionKey
		public RuleCall getKeySequenceOptionKeyEnumRuleCall_0_0() { return cKeySequenceOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=[data::StringConcept|QualifiedName]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//[data::StringConcept|QualifiedName]
		public CrossReference getValueStringConceptCrossReference_2_0() { return cValueStringConceptCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getValueStringConceptQualifiedNameParserRuleCall_2_0_1() { return cValueStringConceptQualifiedNameParserRuleCall_2_0_1; }
	}
	public class DataOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyDataOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DataOption data::DataOption:
		//	key=DataOptionKey '=' value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//key=DataOptionKey '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=DataOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//DataOptionKey
		public RuleCall getKeyDataOptionKeyEnumRuleCall_0_0() { return cKeyDataOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	public class TypeCharacterElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.TypeCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCharEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCharCharKeyword_0_0 = (Keyword)cCharEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDigitEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDigitDigitKeyword_1_0 = (Keyword)cDigitEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TypeCharacter returns data::TypeCharacter:
		//	char | digit;
		public EnumRule getRule() { return rule; }
		
		//char | digit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//char
		public EnumLiteralDeclaration getCharEnumLiteralDeclaration_0() { return cCharEnumLiteralDeclaration_0; }
		
		//'char'
		public Keyword getCharCharKeyword_0_0() { return cCharCharKeyword_0_0; }
		
		//digit
		public EnumLiteralDeclaration getDigitEnumLiteralDeclaration_1() { return cDigitEnumLiteralDeclaration_1; }
		
		//'digit'
		public Keyword getDigitDigitKeyword_1_0() { return cDigitDigitKeyword_1_0; }
	}
	public class TypeStringElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.TypeString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAnycaseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAnycaseAnycase_stringKeyword_0_0 = (Keyword)cAnycaseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLowercaseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLowercaseLowercase_stringKeyword_1_0 = (Keyword)cLowercaseEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUppercaseEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUppercaseUppercase_stringKeyword_2_0 = (Keyword)cUppercaseEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNumbersEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNumbersDigitsKeyword_3_0 = (Keyword)cNumbersEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TypeString returns data::TypeString: //ignoreaccents = 'ignore_accents' | ignorecase = 'ignore_case' | iglowercase = 'lower_case' | uppercase = 'upper_case' | numbers = 'numbers'
		//	anycase='anycase_string' | lowercase='lowercase_string' | uppercase='uppercase_string' | numbers='digits';
		public EnumRule getRule() { return rule; }
		
		////ignoreaccents = 'ignore_accents' | ignorecase = 'ignore_case' | iglowercase = 'lower_case' | uppercase = 'upper_case' | numbers = 'numbers'
		//anycase='anycase_string' | lowercase='lowercase_string' | uppercase='uppercase_string' | numbers='digits'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////ignoreaccents = 'ignore_accents' | ignorecase = 'ignore_case' | iglowercase = 'lower_case' | uppercase = 'upper_case' | numbers = 'numbers'
		//anycase='anycase_string'
		public EnumLiteralDeclaration getAnycaseEnumLiteralDeclaration_0() { return cAnycaseEnumLiteralDeclaration_0; }
		
		//'anycase_string'
		public Keyword getAnycaseAnycase_stringKeyword_0_0() { return cAnycaseAnycase_stringKeyword_0_0; }
		
		//lowercase='lowercase_string'
		public EnumLiteralDeclaration getLowercaseEnumLiteralDeclaration_1() { return cLowercaseEnumLiteralDeclaration_1; }
		
		//'lowercase_string'
		public Keyword getLowercaseLowercase_stringKeyword_1_0() { return cLowercaseLowercase_stringKeyword_1_0; }
		
		//uppercase='uppercase_string'
		public EnumLiteralDeclaration getUppercaseEnumLiteralDeclaration_2() { return cUppercaseEnumLiteralDeclaration_2; }
		
		//'uppercase_string'
		public Keyword getUppercaseUppercase_stringKeyword_2_0() { return cUppercaseUppercase_stringKeyword_2_0; }
		
		//numbers='digits'
		public EnumLiteralDeclaration getNumbersEnumLiteralDeclaration_3() { return cNumbersEnumLiteralDeclaration_3; }
		
		//'digits'
		public Keyword getNumbersDigitsKeyword_3_0() { return cNumbersDigitsKeyword_3_0; }
	}
	public class MultiplicityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Multiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCasesensitiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCasesensitiveCasesensitiveKeyword_0_0 = (Keyword)cCasesensitiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNullNullKeyword_1_0 = (Keyword)cNullEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSeparatorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSeparatorSeparatorKeyword_2_0 = (Keyword)cSeparatorEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDefaultDefaultKeyword_3_0 = (Keyword)cDefaultEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRegexEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRegexRegexKeyword_4_0 = (Keyword)cRegexEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFlagsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFlagsFlagsKeyword_5_0 = (Keyword)cFlagsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalcharEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDecimalcharDecimalcharKeyword_6_0 = (Keyword)cDecimalcharEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPatternEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPatternPatternKeyword_7_0 = (Keyword)cPatternEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cFormatEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cFormatFormatKeyword_8_0 = (Keyword)cFormatEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum Multiplicity returns data::Multiplicity:
		//	casesensitive | null | separator | default | regex | flags | decimalchar | pattern | format;
		public EnumRule getRule() { return rule; }
		
		//casesensitive | null | separator | default | regex | flags | decimalchar | pattern | format
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//casesensitive
		public EnumLiteralDeclaration getCasesensitiveEnumLiteralDeclaration_0() { return cCasesensitiveEnumLiteralDeclaration_0; }
		
		//'casesensitive'
		public Keyword getCasesensitiveCasesensitiveKeyword_0_0() { return cCasesensitiveCasesensitiveKeyword_0_0; }
		
		//null
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration_1() { return cNullEnumLiteralDeclaration_1; }
		
		//'null'
		public Keyword getNullNullKeyword_1_0() { return cNullNullKeyword_1_0; }
		
		//separator
		public EnumLiteralDeclaration getSeparatorEnumLiteralDeclaration_2() { return cSeparatorEnumLiteralDeclaration_2; }
		
		//'separator'
		public Keyword getSeparatorSeparatorKeyword_2_0() { return cSeparatorSeparatorKeyword_2_0; }
		
		//default
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_3() { return cDefaultEnumLiteralDeclaration_3; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_3_0() { return cDefaultDefaultKeyword_3_0; }
		
		//regex
		public EnumLiteralDeclaration getRegexEnumLiteralDeclaration_4() { return cRegexEnumLiteralDeclaration_4; }
		
		//'regex'
		public Keyword getRegexRegexKeyword_4_0() { return cRegexRegexKeyword_4_0; }
		
		//flags
		public EnumLiteralDeclaration getFlagsEnumLiteralDeclaration_5() { return cFlagsEnumLiteralDeclaration_5; }
		
		//'flags'
		public Keyword getFlagsFlagsKeyword_5_0() { return cFlagsFlagsKeyword_5_0; }
		
		//decimalchar
		public EnumLiteralDeclaration getDecimalcharEnumLiteralDeclaration_6() { return cDecimalcharEnumLiteralDeclaration_6; }
		
		//'decimalchar'
		public Keyword getDecimalcharDecimalcharKeyword_6_0() { return cDecimalcharDecimalcharKeyword_6_0; }
		
		//pattern
		public EnumLiteralDeclaration getPatternEnumLiteralDeclaration_7() { return cPatternEnumLiteralDeclaration_7; }
		
		//'pattern'
		public Keyword getPatternPatternKeyword_7_0() { return cPatternPatternKeyword_7_0; }
		
		//format
		public EnumLiteralDeclaration getFormatEnumLiteralDeclaration_8() { return cFormatEnumLiteralDeclaration_8; }
		
		//'format'
		public Keyword getFormatFormatKeyword_8_0() { return cFormatFormatKeyword_8_0; }
	}
	public class SequenceOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.SequenceOptionKey");
		private final EnumLiteralDeclaration cRegex_formEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cRegex_formRegex_formKeyword_0 = (Keyword)cRegex_formEnumLiteralDeclaration.eContents().get(0);
		
		//enum SequenceOptionKey returns data::SequenceOptionKey:
		//	regex_form;
		public EnumRule getRule() { return rule; }
		
		//regex_form
		public EnumLiteralDeclaration getRegex_formEnumLiteralDeclaration() { return cRegex_formEnumLiteralDeclaration; }
		
		//'regex_form'
		public Keyword getRegex_formRegex_formKeyword_0() { return cRegex_formRegex_formKeyword_0; }
	}
	public class BasicTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUrlEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUrlUrlKeyword_1_0 = (Keyword)cUrlEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntIntKeyword_2_0 = (Keyword)cIntEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRealRealKeyword_3_0 = (Keyword)cRealEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateDateKeyword_4_0 = (Keyword)cDateEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTimeTimeKeyword_5_0 = (Keyword)cTimeEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cYearEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cYearYearKeyword_6_0 = (Keyword)cYearEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cMonthEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cMonthMonthKeyword_7_0 = (Keyword)cMonthEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDayEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDayDayKeyword_8_0 = (Keyword)cDayEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cBooleanBooleanKeyword_9_0 = (Keyword)cBooleanEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cLatEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cLatLatKeyword_10_0 = (Keyword)cLatEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cLongEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cLongLongKeyword_11_0 = (Keyword)cLongEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum BasicType returns data::BasicType:
		//	string | url | int | real | date | time | year | month | day | boolean | lat | long;
		public EnumRule getRule() { return rule; }
		
		//string | url | int | real | date | time | year | month | day | boolean | lat | long
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'string'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//url
		public EnumLiteralDeclaration getUrlEnumLiteralDeclaration_1() { return cUrlEnumLiteralDeclaration_1; }
		
		//'url'
		public Keyword getUrlUrlKeyword_1_0() { return cUrlUrlKeyword_1_0; }
		
		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_2() { return cIntEnumLiteralDeclaration_2; }
		
		//'int'
		public Keyword getIntIntKeyword_2_0() { return cIntIntKeyword_2_0; }
		
		//real
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_3() { return cRealEnumLiteralDeclaration_3; }
		
		//'real'
		public Keyword getRealRealKeyword_3_0() { return cRealRealKeyword_3_0; }
		
		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_4() { return cDateEnumLiteralDeclaration_4; }
		
		//'date'
		public Keyword getDateDateKeyword_4_0() { return cDateDateKeyword_4_0; }
		
		//time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_5() { return cTimeEnumLiteralDeclaration_5; }
		
		//'time'
		public Keyword getTimeTimeKeyword_5_0() { return cTimeTimeKeyword_5_0; }
		
		//year
		public EnumLiteralDeclaration getYearEnumLiteralDeclaration_6() { return cYearEnumLiteralDeclaration_6; }
		
		//'year'
		public Keyword getYearYearKeyword_6_0() { return cYearYearKeyword_6_0; }
		
		//month
		public EnumLiteralDeclaration getMonthEnumLiteralDeclaration_7() { return cMonthEnumLiteralDeclaration_7; }
		
		//'month'
		public Keyword getMonthMonthKeyword_7_0() { return cMonthMonthKeyword_7_0; }
		
		//day
		public EnumLiteralDeclaration getDayEnumLiteralDeclaration_8() { return cDayEnumLiteralDeclaration_8; }
		
		//'day'
		public Keyword getDayDayKeyword_8_0() { return cDayDayKeyword_8_0; }
		
		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_9() { return cBooleanEnumLiteralDeclaration_9; }
		
		//'boolean'
		public Keyword getBooleanBooleanKeyword_9_0() { return cBooleanBooleanKeyword_9_0; }
		
		//lat
		public EnumLiteralDeclaration getLatEnumLiteralDeclaration_10() { return cLatEnumLiteralDeclaration_10; }
		
		//'lat'
		public Keyword getLatLatKeyword_10_0() { return cLatLatKeyword_10_0; }
		
		//long
		public EnumLiteralDeclaration getLongEnumLiteralDeclaration_11() { return cLongEnumLiteralDeclaration_11; }
		
		//'long'
		public Keyword getLongLongKeyword_11_0() { return cLongLongKeyword_11_0; }
	}
	public class StringOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.StringOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCasesensitiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCasesensitiveCasesensitiveKeyword_0_0 = (Keyword)cCasesensitiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNullNullKeyword_1_0 = (Keyword)cNullEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSeparatorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSeparatorSeparatorKeyword_2_0 = (Keyword)cSeparatorEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDefaultDefaultKeyword_3_0 = (Keyword)cDefaultEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRegexEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRegexRegexKeyword_4_0 = (Keyword)cRegexEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFlagsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFlagsFlagsKeyword_5_0 = (Keyword)cFlagsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalcharEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDecimalcharDecimalcharKeyword_6_0 = (Keyword)cDecimalcharEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPatternEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPatternPatternKeyword_7_0 = (Keyword)cPatternEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cFormatEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cFormatFormatKeyword_8_0 = (Keyword)cFormatEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum StringOptionKey returns data::StringOptionKey:
		//	casesensitive | null | separator | default | regex | flags | decimalchar | pattern | format;
		public EnumRule getRule() { return rule; }
		
		//casesensitive | null | separator | default | regex | flags | decimalchar | pattern | format
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//casesensitive
		public EnumLiteralDeclaration getCasesensitiveEnumLiteralDeclaration_0() { return cCasesensitiveEnumLiteralDeclaration_0; }
		
		//'casesensitive'
		public Keyword getCasesensitiveCasesensitiveKeyword_0_0() { return cCasesensitiveCasesensitiveKeyword_0_0; }
		
		//null
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration_1() { return cNullEnumLiteralDeclaration_1; }
		
		//'null'
		public Keyword getNullNullKeyword_1_0() { return cNullNullKeyword_1_0; }
		
		//separator
		public EnumLiteralDeclaration getSeparatorEnumLiteralDeclaration_2() { return cSeparatorEnumLiteralDeclaration_2; }
		
		//'separator'
		public Keyword getSeparatorSeparatorKeyword_2_0() { return cSeparatorSeparatorKeyword_2_0; }
		
		//default
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_3() { return cDefaultEnumLiteralDeclaration_3; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_3_0() { return cDefaultDefaultKeyword_3_0; }
		
		//regex
		public EnumLiteralDeclaration getRegexEnumLiteralDeclaration_4() { return cRegexEnumLiteralDeclaration_4; }
		
		//'regex'
		public Keyword getRegexRegexKeyword_4_0() { return cRegexRegexKeyword_4_0; }
		
		//flags
		public EnumLiteralDeclaration getFlagsEnumLiteralDeclaration_5() { return cFlagsEnumLiteralDeclaration_5; }
		
		//'flags'
		public Keyword getFlagsFlagsKeyword_5_0() { return cFlagsFlagsKeyword_5_0; }
		
		//decimalchar
		public EnumLiteralDeclaration getDecimalcharEnumLiteralDeclaration_6() { return cDecimalcharEnumLiteralDeclaration_6; }
		
		//'decimalchar'
		public Keyword getDecimalcharDecimalcharKeyword_6_0() { return cDecimalcharDecimalcharKeyword_6_0; }
		
		//pattern
		public EnumLiteralDeclaration getPatternEnumLiteralDeclaration_7() { return cPatternEnumLiteralDeclaration_7; }
		
		//'pattern'
		public Keyword getPatternPatternKeyword_7_0() { return cPatternPatternKeyword_7_0; }
		
		//format
		public EnumLiteralDeclaration getFormatEnumLiteralDeclaration_8() { return cFormatEnumLiteralDeclaration_8; }
		
		//'format'
		public Keyword getFormatFormatKeyword_8_0() { return cFormatFormatKeyword_8_0; }
	}
	public class IntOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.IntOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinLengthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinLengthMinLengthKeyword_0_0 = (Keyword)cMinLengthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaxLengthEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaxLengthMaxLengthKeyword_1_0 = (Keyword)cMaxLengthEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMinEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMinMinKeyword_2_0 = (Keyword)cMinEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMaxMaxKeyword_3_0 = (Keyword)cMaxEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDefaultDefaultvalueKeyword_4_0 = (Keyword)cDefaultEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum IntOptionKey returns data::IntOptionKey:
		//	minLength | maxLength | min | max | default='defaultvalue';
		public EnumRule getRule() { return rule; }
		
		//minLength | maxLength | min | max | default='defaultvalue'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//minLength
		public EnumLiteralDeclaration getMinLengthEnumLiteralDeclaration_0() { return cMinLengthEnumLiteralDeclaration_0; }
		
		//'minLength'
		public Keyword getMinLengthMinLengthKeyword_0_0() { return cMinLengthMinLengthKeyword_0_0; }
		
		//maxLength
		public EnumLiteralDeclaration getMaxLengthEnumLiteralDeclaration_1() { return cMaxLengthEnumLiteralDeclaration_1; }
		
		//'maxLength'
		public Keyword getMaxLengthMaxLengthKeyword_1_0() { return cMaxLengthMaxLengthKeyword_1_0; }
		
		//min
		public EnumLiteralDeclaration getMinEnumLiteralDeclaration_2() { return cMinEnumLiteralDeclaration_2; }
		
		//'min'
		public Keyword getMinMinKeyword_2_0() { return cMinMinKeyword_2_0; }
		
		//max
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_3() { return cMaxEnumLiteralDeclaration_3; }
		
		//'max'
		public Keyword getMaxMaxKeyword_3_0() { return cMaxMaxKeyword_3_0; }
		
		//default='defaultvalue'
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_4() { return cDefaultEnumLiteralDeclaration_4; }
		
		//'defaultvalue'
		public Keyword getDefaultDefaultvalueKeyword_4_0() { return cDefaultDefaultvalueKeyword_4_0; }
	}
	public class DoubleOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DoubleOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinMinDoubleKeyword_0_0 = (Keyword)cMinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaxMaxDoubleKeyword_1_0 = (Keyword)cMaxEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDefaultDefaultvalueDoubleKeyword_2_0 = (Keyword)cDefaultEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DoubleOptionKey returns data::DoubleOptionKey:
		//	min='minDouble' | max='maxDouble' | default='defaultvalueDouble';
		public EnumRule getRule() { return rule; }
		
		//min='minDouble' | max='maxDouble' | default='defaultvalueDouble'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//min='minDouble'
		public EnumLiteralDeclaration getMinEnumLiteralDeclaration_0() { return cMinEnumLiteralDeclaration_0; }
		
		//'minDouble'
		public Keyword getMinMinDoubleKeyword_0_0() { return cMinMinDoubleKeyword_0_0; }
		
		//max='maxDouble'
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_1() { return cMaxEnumLiteralDeclaration_1; }
		
		//'maxDouble'
		public Keyword getMaxMaxDoubleKeyword_1_0() { return cMaxMaxDoubleKeyword_1_0; }
		
		//default='defaultvalueDouble'
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_2() { return cDefaultEnumLiteralDeclaration_2; }
		
		//'defaultvalueDouble'
		public Keyword getDefaultDefaultvalueDoubleKeyword_2_0() { return cDefaultDefaultvalueDoubleKeyword_2_0; }
	}
	public class BooleanOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.BooleanOptionKey");
		private final EnumLiteralDeclaration cNullableEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNullableNullableKeyword_0 = (Keyword)cNullableEnumLiteralDeclaration.eContents().get(0);
		
		//enum BooleanOptionKey returns data::BooleanOptionKey:
		//	nullable;
		public EnumRule getRule() { return rule; }
		
		//nullable
		public EnumLiteralDeclaration getNullableEnumLiteralDeclaration() { return cNullableEnumLiteralDeclaration; }
		
		//"nullable"
		public Keyword getNullableNullableKeyword_0() { return cNullableNullableKeyword_0; }
	}
	public class DataOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFormatEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFormatFormatKeyword_0_0 = (Keyword)cFormatEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSeparatorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSeparatorSeparatorKeyword_1_0 = (Keyword)cSeparatorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHeaderEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHeaderHeaderKeyword_2_0 = (Keyword)cHeaderEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSquemaEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSquemaSquemaKeyword_3_0 = (Keyword)cSquemaEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DataOptionKey returns data::DataOptionKey:
		//	format | separator | header | squema;
		public EnumRule getRule() { return rule; }
		
		//format | separator | header | squema
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//format
		public EnumLiteralDeclaration getFormatEnumLiteralDeclaration_0() { return cFormatEnumLiteralDeclaration_0; }
		
		//'format'
		public Keyword getFormatFormatKeyword_0_0() { return cFormatFormatKeyword_0_0; }
		
		//separator
		public EnumLiteralDeclaration getSeparatorEnumLiteralDeclaration_1() { return cSeparatorEnumLiteralDeclaration_1; }
		
		//'separator'
		public Keyword getSeparatorSeparatorKeyword_1_0() { return cSeparatorSeparatorKeyword_1_0; }
		
		//header
		public EnumLiteralDeclaration getHeaderEnumLiteralDeclaration_2() { return cHeaderEnumLiteralDeclaration_2; }
		
		//'header'
		public Keyword getHeaderHeaderKeyword_2_0() { return cHeaderHeaderKeyword_2_0; }
		
		//squema
		public EnumLiteralDeclaration getSquemaEnumLiteralDeclaration_3() { return cSquemaEnumLiteralDeclaration_3; }
		
		//'squema'
		public Keyword getSquemaSquemaKeyword_3_0() { return cSquemaSquemaKeyword_3_0; }
	}
	public class FormatElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Format");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCSVEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCSVCSVKeyword_0_0 = (Keyword)cCSVEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cJSONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cJSONJSONKeyword_1_0 = (Keyword)cJSONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXMLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXMLXMLKeyword_2_0 = (Keyword)cXMLEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Format returns data::Format:
		//	CSV | JSON | XML;
		public EnumRule getRule() { return rule; }
		
		//CSV | JSON | XML
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CSV
		public EnumLiteralDeclaration getCSVEnumLiteralDeclaration_0() { return cCSVEnumLiteralDeclaration_0; }
		
		//'CSV'
		public Keyword getCSVCSVKeyword_0_0() { return cCSVCSVKeyword_0_0; }
		
		//JSON
		public EnumLiteralDeclaration getJSONEnumLiteralDeclaration_1() { return cJSONEnumLiteralDeclaration_1; }
		
		//'JSON'
		public Keyword getJSONJSONKeyword_1_0() { return cJSONJSONKeyword_1_0; }
		
		//XML
		public EnumLiteralDeclaration getXMLEnumLiteralDeclaration_2() { return cXMLEnumLiteralDeclaration_2; }
		
		//'XML'
		public Keyword getXMLXMLKeyword_2_0() { return cXMLXMLKeyword_2_0; }
	}
	
	private final DataModelElements pDataModel;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final DataModelElementElements pDataModelElement;
	private final PackageDeclarationElements pPackageDeclaration;
	private final DataPackableDescriptionElements pDataPackableDescription;
	private final StringConceptElements pStringConcept;
	private final SubstringConceptElements pSubstringConcept;
	private final SubstringElements pSubstring;
	private final CharacterElements pCharacter;
	private final TypeCharacterElements eTypeCharacter;
	private final TypeStringElements eTypeString;
	private final DataSourceDescriptionElements pDataSourceDescription;
	private final DataFragmentElements pDataFragment;
	private final TypeSpecificationElements pTypeSpecification;
	private final DataTypeElements pDataType;
	private final EnumerationElements pEnumeration;
	private final StructDataTypeElements pStructDataType;
	private final LeafNodeElements pLeafNode;
	private final MultiplicityElements eMultiplicity;
	private final OptionElements pOption;
	private final StringOptionElements pStringOption;
	private final IntOptionElements pIntOption;
	private final DoubleOptionElements pDoubleOption;
	private final BooleanOptionElements pBooleanOption;
	private final SequenceOptionElements pSequenceOption;
	private final SequenceOptionKeyElements eSequenceOptionKey;
	private final BasicTypeElements eBasicType;
	private final StringOptionKeyElements eStringOptionKey;
	private final IntOptionKeyElements eIntOptionKey;
	private final DoubleOptionKeyElements eDoubleOptionKey;
	private final BooleanOptionKeyElements eBooleanOptionKey;
	private final DataOptionElements pDataOption;
	private final DataOptionKeyElements eDataOptionKey;
	private final FormatElements eFormat;
	private final TerminalRule tDELETATION_MARK;
	private final TerminalRule tMODIFICATION_MARK;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DataDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataModel = new DataModelElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pDataModelElement = new DataModelElementElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pDataPackableDescription = new DataPackableDescriptionElements();
		this.pStringConcept = new StringConceptElements();
		this.pSubstringConcept = new SubstringConceptElements();
		this.pSubstring = new SubstringElements();
		this.pCharacter = new CharacterElements();
		this.eTypeCharacter = new TypeCharacterElements();
		this.eTypeString = new TypeStringElements();
		this.pDataSourceDescription = new DataSourceDescriptionElements();
		this.pDataFragment = new DataFragmentElements();
		this.pTypeSpecification = new TypeSpecificationElements();
		this.pDataType = new DataTypeElements();
		this.pEnumeration = new EnumerationElements();
		this.pStructDataType = new StructDataTypeElements();
		this.pLeafNode = new LeafNodeElements();
		this.eMultiplicity = new MultiplicityElements();
		this.pOption = new OptionElements();
		this.pStringOption = new StringOptionElements();
		this.pIntOption = new IntOptionElements();
		this.pDoubleOption = new DoubleOptionElements();
		this.pBooleanOption = new BooleanOptionElements();
		this.pSequenceOption = new SequenceOptionElements();
		this.eSequenceOptionKey = new SequenceOptionKeyElements();
		this.eBasicType = new BasicTypeElements();
		this.eStringOptionKey = new StringOptionKeyElements();
		this.eIntOptionKey = new IntOptionKeyElements();
		this.eDoubleOptionKey = new DoubleOptionKeyElements();
		this.eBooleanOptionKey = new BooleanOptionKeyElements();
		this.pDataOption = new DataOptionElements();
		this.eDataOptionKey = new DataOptionKeyElements();
		this.eFormat = new FormatElements();
		this.tDELETATION_MARK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DELETATION_MARK");
		this.tMODIFICATION_MARK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.MODIFICATION_MARK");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eagledata.core.dsl.datadesc.DataDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataModel data::DataModel:
	//	descriptions+=DataModelElement descriptions+=DataModelElement*
	public DataModelElements getDataModelAccess() {
		return pDataModel;
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}
	
	/// ******************** * / Import data::Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	/// ******************** * / DataModelElement data::DataModelElement:
	//	Import | PackageDeclaration | DataPackableDescription | DataSourceDescription
	public DataModelElementElements getDataModelElementAccess() {
		return pDataModelElement;
	}
	
	public ParserRule getDataModelElementRule() {
		return getDataModelElementAccess().getRule();
	}
	
	//PackageDeclaration data::Package:
	//	'package' name=QualifiedName '{'
	//	elements+=DataPackableDescription elements+=DataPackableDescription*
	//	'}'
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//DataPackableDescription data::DataPackableDescription:
	//	StringConcept | TypeSpecification | DataFragment
	public DataPackableDescriptionElements getDataPackableDescriptionAccess() {
		return pDataPackableDescription;
	}
	
	public ParserRule getDataPackableDescriptionRule() {
		return getDataPackableDescriptionAccess().getRule();
	}
	
	//StringConcept data::StringConcept:
	//	'string' name=ID '=' '(' (subsequence+=SubstringConcept ("," subsequence+=SubstringConcept)*)? ')'
	public StringConceptElements getStringConceptAccess() {
		return pStringConcept;
	}
	
	public ParserRule getStringConceptRule() {
		return getStringConceptAccess().getRule();
	}
	
	//SubstringConcept data::SubstringConcept:
	//	Character | Substring
	public SubstringConceptElements getSubstringConceptAccess() {
		return pSubstringConcept;
	}
	
	public ParserRule getSubstringConceptRule() {
		return getSubstringConceptAccess().getRule();
	}
	
	//Substring data::Substring:
	//	typeString=TypeString name=ID '[' minlength=INT "," maxlength=INT ']'
	public SubstringElements getSubstringAccess() {
		return pSubstring;
	}
	
	public ParserRule getSubstringRule() {
		return getSubstringAccess().getRule();
	}
	
	//Character data::Character:
	//	typeCharacter=TypeCharacter name=ID value=STRING?
	public CharacterElements getCharacterAccess() {
		return pCharacter;
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}
	
	//enum TypeCharacter returns data::TypeCharacter:
	//	char | digit;
	public TypeCharacterElements getTypeCharacterAccess() {
		return eTypeCharacter;
	}
	
	public EnumRule getTypeCharacterRule() {
		return getTypeCharacterAccess().getRule();
	}
	
	//enum TypeString returns data::TypeString: //ignoreaccents = 'ignore_accents' | ignorecase = 'ignore_case' | iglowercase = 'lower_case' | uppercase = 'upper_case' | numbers = 'numbers'
	//	anycase='anycase_string' | lowercase='lowercase_string' | uppercase='uppercase_string' | numbers='digits';
	public TypeStringElements getTypeStringAccess() {
		return eTypeString;
	}
	
	public EnumRule getTypeStringRule() {
		return getTypeStringAccess().getRule();
	}
	
	//DataSourceDescription data::DataSourceDescription:
	//	'description' format=Format name=ID (':' fragments+=[data::DataFragment|QualifiedName] (','
	//	fragments+=[data::DataFragment|QualifiedName])*)? '{' (nodes+=LeafNode ("," nodes+=LeafNode)*)?
	//	'}' ('{' options+=DataOption ("," options+=DataOption)* '}')?
	public DataSourceDescriptionElements getDataSourceDescriptionAccess() {
		return pDataSourceDescription;
	}
	
	public ParserRule getDataSourceDescriptionRule() {
		return getDataSourceDescriptionAccess().getRule();
	}
	
	//DataFragment data::DataFragment:
	//	'fragment' name=ID (':' fragments+=[data::DataFragment|QualifiedName] (','
	//	fragments+=[data::DataFragment|QualifiedName])*)? '{' (nodes+=LeafNode ("," nodes+=LeafNode)*)?
	//	'}'
	public DataFragmentElements getDataFragmentAccess() {
		return pDataFragment;
	}
	
	public ParserRule getDataFragmentRule() {
		return getDataFragmentAccess().getRule();
	}
	
	//TypeSpecification data::TypeSpecification:
	//	DataType | Enumeration | StructDataType
	public TypeSpecificationElements getTypeSpecificationAccess() {
		return pTypeSpecification;
	}
	
	public ParserRule getTypeSpecificationRule() {
		return getTypeSpecificationAccess().getRule();
	}
	
	//DataType data::DataType:
	//	'datatype' name=ID ':' refine=BasicType ('{' options+=Option ("," options+=Option)* '}')?
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Enumeration data::Enumeration:
	//	'enumeration' name=ID "{" values+=STRING (',' values+=STRING)* "}"
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	/// *Node returns data::Node:
	//	LeafNode
	//;* / StructDataType data::StructDataType: / *(environment?=">")?* / 'struct' name=ID
	//	/ *(':' extends+=[data::CompositeNode | ID] (',' extends+=[data::CompositeNode | ID])*)?* / '{' (subnodes+=LeafNode
	//	("," subnodes+=LeafNode)*) '}' ('{' options+=Option ("," options+=Option)* '}')?
	public StructDataTypeElements getStructDataTypeAccess() {
		return pStructDataType;
	}
	
	public ParserRule getStructDataTypeRule() {
		return getStructDataTypeAccess().getRule();
	}
	
	//LeafNode data::LeafNode:
	//	(key?="key" | unique?="unique" | list?="list")? (type=BasicType | typeCall=[data::TypeSpecification]) name=ID ('{'
	//	options+=Option ("," options+=Option)* '}')?
	public LeafNodeElements getLeafNodeAccess() {
		return pLeafNode;
	}
	
	public ParserRule getLeafNodeRule() {
		return getLeafNodeAccess().getRule();
	}
	
	//enum Multiplicity returns data::Multiplicity:
	//	casesensitive | null | separator | default | regex | flags | decimalchar | pattern | format;
	public MultiplicityElements getMultiplicityAccess() {
		return eMultiplicity;
	}
	
	public EnumRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//Option data::Option:
	//	StringOption | IntOption | BooleanOption | SequenceOption | DoubleOption
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//StringOption data::StringOption:
	//	key=StringOptionKey '=' value=STRING
	public StringOptionElements getStringOptionAccess() {
		return pStringOption;
	}
	
	public ParserRule getStringOptionRule() {
		return getStringOptionAccess().getRule();
	}
	
	//IntOption data::IntOption:
	//	key=IntOptionKey '=' value=INT
	public IntOptionElements getIntOptionAccess() {
		return pIntOption;
	}
	
	public ParserRule getIntOptionRule() {
		return getIntOptionAccess().getRule();
	}
	
	//DoubleOption data::DoubleOption:
	//	key=DoubleOptionKey '=' value=DOUBLE
	public DoubleOptionElements getDoubleOptionAccess() {
		return pDoubleOption;
	}
	
	public ParserRule getDoubleOptionRule() {
		return getDoubleOptionAccess().getRule();
	}
	
	//BooleanOption data::BooleanOption:
	//	key=BooleanOptionKey '=' value=BOOLEAN
	public BooleanOptionElements getBooleanOptionAccess() {
		return pBooleanOption;
	}
	
	public ParserRule getBooleanOptionRule() {
		return getBooleanOptionAccess().getRule();
	}
	
	//SequenceOption data::SequenceOption:
	//	key=SequenceOptionKey '=' value=[data::StringConcept|QualifiedName]
	public SequenceOptionElements getSequenceOptionAccess() {
		return pSequenceOption;
	}
	
	public ParserRule getSequenceOptionRule() {
		return getSequenceOptionAccess().getRule();
	}
	
	//enum SequenceOptionKey returns data::SequenceOptionKey:
	//	regex_form;
	public SequenceOptionKeyElements getSequenceOptionKeyAccess() {
		return eSequenceOptionKey;
	}
	
	public EnumRule getSequenceOptionKeyRule() {
		return getSequenceOptionKeyAccess().getRule();
	}
	
	//enum BasicType returns data::BasicType:
	//	string | url | int | real | date | time | year | month | day | boolean | lat | long;
	public BasicTypeElements getBasicTypeAccess() {
		return eBasicType;
	}
	
	public EnumRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//enum StringOptionKey returns data::StringOptionKey:
	//	casesensitive | null | separator | default | regex | flags | decimalchar | pattern | format;
	public StringOptionKeyElements getStringOptionKeyAccess() {
		return eStringOptionKey;
	}
	
	public EnumRule getStringOptionKeyRule() {
		return getStringOptionKeyAccess().getRule();
	}
	
	//enum IntOptionKey returns data::IntOptionKey:
	//	minLength | maxLength | min | max | default='defaultvalue';
	public IntOptionKeyElements getIntOptionKeyAccess() {
		return eIntOptionKey;
	}
	
	public EnumRule getIntOptionKeyRule() {
		return getIntOptionKeyAccess().getRule();
	}
	
	//enum DoubleOptionKey returns data::DoubleOptionKey:
	//	min='minDouble' | max='maxDouble' | default='defaultvalueDouble';
	public DoubleOptionKeyElements getDoubleOptionKeyAccess() {
		return eDoubleOptionKey;
	}
	
	public EnumRule getDoubleOptionKeyRule() {
		return getDoubleOptionKeyAccess().getRule();
	}
	
	//enum BooleanOptionKey returns data::BooleanOptionKey:
	//	nullable;
	public BooleanOptionKeyElements getBooleanOptionKeyAccess() {
		return eBooleanOptionKey;
	}
	
	public EnumRule getBooleanOptionKeyRule() {
		return getBooleanOptionKeyAccess().getRule();
	}
	
	//DataOption data::DataOption:
	//	key=DataOptionKey '=' value=STRING
	public DataOptionElements getDataOptionAccess() {
		return pDataOption;
	}
	
	public ParserRule getDataOptionRule() {
		return getDataOptionAccess().getRule();
	}
	
	//enum DataOptionKey returns data::DataOptionKey:
	//	format | separator | header | squema;
	public DataOptionKeyElements getDataOptionKeyAccess() {
		return eDataOptionKey;
	}
	
	public EnumRule getDataOptionKeyRule() {
		return getDataOptionKeyAccess().getRule();
	}
	
	//enum Format returns data::Format:
	//	CSV | JSON | XML;
	public FormatElements getFormatAccess() {
		return eFormat;
	}
	
	public EnumRule getFormatRule() {
		return getFormatAccess().getRule();
	}
	
	//terminal DELETATION_MARK:
	//	'REMOVE';
	public TerminalRule getDELETATION_MARKRule() {
		return tDELETATION_MARK;
	}
	
	//terminal MODIFICATION_MARK:
	//	'RENAME' | 'RETYPE';
	public TerminalRule getMODIFICATION_MARKRule() {
		return tMODIFICATION_MARK;
	}
	
	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
