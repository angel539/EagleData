/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.datadesc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DataDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsDataModelElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsDataModelElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//DataModel data::DataModel:
		//	{data::DataModel} elements+=DataModelElement elements+=DataModelElement*
		@Override public ParserRule getRule() { return rule; }
		
		//{data::DataModel} elements+=DataModelElement elements+=DataModelElement*
		public Group getGroup() { return cGroup; }
		
		//{data::DataModel}
		public Action getDataModelAction_0() { return cDataModelAction_0; }
		
		//elements+=DataModelElement
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//DataModelElement
		public RuleCall getElementsDataModelElementParserRuleCall_1_0() { return cElementsDataModelElementParserRuleCall_1_0; }
		
		//elements+=DataModelElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//DataModelElement
		public RuleCall getElementsDataModelElementParserRuleCall_2_0() { return cElementsDataModelElementParserRuleCall_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		/// ******************** * / Import data::Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class DataModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSpecificationElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// ******************** * / DataModelElement data::DataModelElement:
		//	Import | Package | SpecificationElement
		@Override public ParserRule getRule() { return rule; }
		
		//Import | Package | SpecificationElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }
		
		//Package
		public RuleCall getPackageParserRuleCall_1() { return cPackageParserRuleCall_1; }
		
		//SpecificationElement
		public RuleCall getSpecificationElementParserRuleCall_2() { return cSpecificationElementParserRuleCall_2; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTagsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0_0 = (RuleCall)cTagsAssignment_0_0.eContents().get(0);
		private final Assignment cTagsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_0_1_0 = (RuleCall)cTagsAssignment_0_1.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsSpecificationElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsSpecificationElementParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Package data::Package:
		//	(tags+=Tag tags+=Tag*)?
		//	'package' name=QualifiedName '{'
		//	elements+=SpecificationElement elements+=SpecificationElement*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//(tags+=Tag tags+=Tag*)? 'package' name=QualifiedName '{' elements+=SpecificationElement elements+=SpecificationElement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(tags+=Tag tags+=Tag*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//tags+=Tag
		public Assignment getTagsAssignment_0_0() { return cTagsAssignment_0_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0_0() { return cTagsTagParserRuleCall_0_0_0; }
		
		//tags+=Tag*
		public Assignment getTagsAssignment_0_1() { return cTagsAssignment_0_1; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_1_0() { return cTagsTagParserRuleCall_0_1_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=SpecificationElement
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//SpecificationElement
		public RuleCall getElementsSpecificationElementParserRuleCall_4_0() { return cElementsSpecificationElementParserRuleCall_4_0; }
		
		//elements+=SpecificationElement*
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//SpecificationElement
		public RuleCall getElementsSpecificationElementParserRuleCall_5_0() { return cElementsSpecificationElementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagSTRINGTerminalRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//Tag data::Tag:
		//	'@' tag=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//'@' tag=STRING
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//tag=STRING
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//STRING
		public RuleCall getTagSTRINGTerminalRuleCall_1_0() { return cTagSTRINGTerminalRuleCall_1_0; }
	}
	public class SpecificationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.SpecificationElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractDescriptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SpecificationElement data::SpecificationElement:
		//	TypeSpecification | AbstractDescription
		@Override public ParserRule getRule() { return rule; }
		
		//TypeSpecification | AbstractDescription
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeSpecification
		public RuleCall getTypeSpecificationParserRuleCall_0() { return cTypeSpecificationParserRuleCall_0; }
		
		//AbstractDescription
		public RuleCall getAbstractDescriptionParserRuleCall_1() { return cAbstractDescriptionParserRuleCall_1; }
	}
	public class TypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.TypeSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeRefinementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSpecification data::TypeSpecification:
		//	DataTypeRefinement | Enumeration
		@Override public ParserRule getRule() { return rule; }
		
		//DataTypeRefinement | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataTypeRefinement
		public RuleCall getDataTypeRefinementParserRuleCall_0() { return cDataTypeRefinementParserRuleCall_0; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
	}
	public class AbstractDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.AbstractDescription");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataDescriptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFragmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDescription data::AbstractDescription:
		//	DataDescription | Fragment
		@Override public ParserRule getRule() { return rule; }
		
		//DataDescription | Fragment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataDescription
		public RuleCall getDataDescriptionParserRuleCall_0() { return cDataDescriptionParserRuleCall_0; }
		
		//Fragment
		public RuleCall getFragmentParserRuleCall_1() { return cFragmentParserRuleCall_1; }
	}
	public class SubstringConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.SubstringConcept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharacterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubstringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SubstringConcept data::SubstringConcept:
		//	Character | Substring
		@Override public ParserRule getRule() { return rule; }
		
		//Character | Substring
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Character
		public RuleCall getCharacterParserRuleCall_0() { return cCharacterParserRuleCall_0; }
		
		//Substring
		public RuleCall getSubstringParserRuleCall_1() { return cSubstringParserRuleCall_1; }
	}
	public class SubstringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Substring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeStringAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeStringTypeStringEnumRuleCall_0_0 = (RuleCall)cTypeStringAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinlengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinlengthINTTerminalRuleCall_3_0 = (RuleCall)cMinlengthAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMaxlengthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMaxlengthINTTerminalRuleCall_5_0 = (RuleCall)cMaxlengthAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Substring data::Substring:
		//	typeString=TypeString name=ID '[' minlength=INT "," maxlength=INT ']'
		@Override public ParserRule getRule() { return rule; }
		
		//typeString=TypeString name=ID '[' minlength=INT "," maxlength=INT ']'
		public Group getGroup() { return cGroup; }
		
		//typeString=TypeString
		public Assignment getTypeStringAssignment_0() { return cTypeStringAssignment_0; }
		
		//TypeString
		public RuleCall getTypeStringTypeStringEnumRuleCall_0_0() { return cTypeStringTypeStringEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//minlength=INT
		public Assignment getMinlengthAssignment_3() { return cMinlengthAssignment_3; }
		
		//INT
		public RuleCall getMinlengthINTTerminalRuleCall_3_0() { return cMinlengthINTTerminalRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//maxlength=INT
		public Assignment getMaxlengthAssignment_5() { return cMaxlengthAssignment_5; }
		
		//INT
		public RuleCall getMaxlengthINTTerminalRuleCall_5_0() { return cMaxlengthINTTerminalRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Character");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeCharacterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeCharacterTypeCharacterEnumRuleCall_0_0 = (RuleCall)cTypeCharacterAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Character data::Character:
		//	typeCharacter=TypeCharacter name=ID value=STRING?
		@Override public ParserRule getRule() { return rule; }
		
		//typeCharacter=TypeCharacter name=ID value=STRING?
		public Group getGroup() { return cGroup; }
		
		//typeCharacter=TypeCharacter
		public Assignment getTypeCharacterAssignment_0() { return cTypeCharacterAssignment_0; }
		
		//TypeCharacter
		public RuleCall getTypeCharacterTypeCharacterEnumRuleCall_0_0() { return cTypeCharacterTypeCharacterEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//value=STRING?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFragmentNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Node data::Node:
		//	PrimitiveNode | CompositeNode | FragmentNode
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveNode | CompositeNode | FragmentNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveNode
		public RuleCall getPrimitiveNodeParserRuleCall_0() { return cPrimitiveNodeParserRuleCall_0; }
		
		//CompositeNode
		public RuleCall getCompositeNodeParserRuleCall_1() { return cCompositeNodeParserRuleCall_1; }
		
		//FragmentNode
		public RuleCall getFragmentNodeParserRuleCall_2() { return cFragmentNodeParserRuleCall_2; }
	}
	public class CompositeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.CompositeNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cKeyKeyKeyword_0_0_0 = (Keyword)cKeyAssignment_0_0.eContents().get(0);
		private final Assignment cUniqueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cUniqueUniqueKeyword_0_1_0 = (Keyword)cUniqueAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeSpecificationCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeSpecificationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeTypeSpecificationCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCardinalityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCardinalityCardinalityParserRuleCall_3_1_0 = (RuleCall)cCardinalityAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOptionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_4_1_0 = (RuleCall)cOptionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cOptionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_4_2_1_0 = (RuleCall)cOptionsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//CompositeNode data::CompositeNode:
		//	(key?="key" | unique?="unique")?
		//	type=[data::TypeSpecification|QualifiedName] name=ID ('[' cardinality=Cardinality ']')? ('(' options+=Option (","
		//	options+=Option)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//(key?="key" | unique?="unique")? type=[data::TypeSpecification|QualifiedName] name=ID ('[' cardinality=Cardinality ']')?
		//('(' options+=Option ("," options+=Option)* ')')?
		public Group getGroup() { return cGroup; }
		
		//(key?="key" | unique?="unique")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//key?="key"
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//"key"
		public Keyword getKeyKeyKeyword_0_0_0() { return cKeyKeyKeyword_0_0_0; }
		
		//unique?="unique"
		public Assignment getUniqueAssignment_0_1() { return cUniqueAssignment_0_1; }
		
		//"unique"
		public Keyword getUniqueUniqueKeyword_0_1_0() { return cUniqueUniqueKeyword_0_1_0; }
		
		//type=[data::TypeSpecification|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[data::TypeSpecification|QualifiedName]
		public CrossReference getTypeTypeSpecificationCrossReference_1_0() { return cTypeTypeSpecificationCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeSpecificationQualifiedNameParserRuleCall_1_0_1() { return cTypeTypeSpecificationQualifiedNameParserRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('[' cardinality=Cardinality ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_3_1() { return cCardinalityAssignment_3_1; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_3_1_0() { return cCardinalityCardinalityParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//('(' options+=Option ("," options+=Option)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_4_1() { return cOptionsAssignment_4_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_1_0() { return cOptionsOptionParserRuleCall_4_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_4_2_1() { return cOptionsAssignment_4_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_2_1_0() { return cOptionsOptionParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class FragmentNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.FragmentNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeFragmentCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeFragmentQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeFragmentCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCardinalityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCardinalityCardinalityParserRuleCall_3_1_0 = (RuleCall)cCardinalityAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOptionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_4_1_0 = (RuleCall)cOptionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cOptionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_4_2_1_0 = (RuleCall)cOptionsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//FragmentNode data::FragmentNode:
		//	'.' type=[data::Fragment|QualifiedName] name=ID ('[' cardinality=Cardinality ']')? ('(' options+=Option (","
		//	options+=Option)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//'.' type=[data::Fragment|QualifiedName] name=ID ('[' cardinality=Cardinality ']')? ('(' options+=Option (","
		//options+=Option)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//type=[data::Fragment|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[data::Fragment|QualifiedName]
		public CrossReference getTypeFragmentCrossReference_1_0() { return cTypeFragmentCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeFragmentQualifiedNameParserRuleCall_1_0_1() { return cTypeFragmentQualifiedNameParserRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('[' cardinality=Cardinality ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_3_1() { return cCardinalityAssignment_3_1; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_3_1_0() { return cCardinalityCardinalityParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//('(' options+=Option ("," options+=Option)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_4_1() { return cOptionsAssignment_4_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_1_0() { return cOptionsOptionParserRuleCall_4_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_4_2_1() { return cOptionsAssignment_4_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_2_1_0() { return cOptionsOptionParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class PrimitiveNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.PrimitiveNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cKeyKeyKeyword_0_0_0 = (Keyword)cKeyAssignment_0_0.eContents().get(0);
		private final Assignment cUniqueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cUniqueUniqueKeyword_0_1_0 = (Keyword)cUniqueAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeBasicTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCardinalityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCardinalityCardinalityParserRuleCall_3_1_0 = (RuleCall)cCardinalityAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOptionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_4_1_0 = (RuleCall)cOptionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cOptionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_4_2_1_0 = (RuleCall)cOptionsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//PrimitiveNode data::PrimitiveNode:
		//	(key?="key" | unique?="unique")?
		//	type=BasicType name=ID ('[' cardinality=Cardinality ']')? ('(' options+=Option ("," options+=Option)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//(key?="key" | unique?="unique")? type=BasicType name=ID ('[' cardinality=Cardinality ']')? ('(' options+=Option (","
		//options+=Option)* ')')?
		public Group getGroup() { return cGroup; }
		
		//(key?="key" | unique?="unique")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//key?="key"
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//"key"
		public Keyword getKeyKeyKeyword_0_0_0() { return cKeyKeyKeyword_0_0_0; }
		
		//unique?="unique"
		public Assignment getUniqueAssignment_0_1() { return cUniqueAssignment_0_1; }
		
		//"unique"
		public Keyword getUniqueUniqueKeyword_0_1_0() { return cUniqueUniqueKeyword_0_1_0; }
		
		//type=BasicType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//BasicType
		public RuleCall getTypeBasicTypeEnumRuleCall_1_0() { return cTypeBasicTypeEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('[' cardinality=Cardinality ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_3_1() { return cCardinalityAssignment_3_1; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_3_1_0() { return cCardinalityCardinalityParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//('(' options+=Option ("," options+=Option)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_4_1() { return cOptionsAssignment_4_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_1_0() { return cOptionsOptionParserRuleCall_4_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_4_2_1() { return cOptionsAssignment_4_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_2_1_0() { return cOptionsOptionParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMinINTTerminalRuleCall_0_0 = (RuleCall)cMinAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMaxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMaxINTTerminalRuleCall_1_1_0 = (RuleCall)cMaxAssignment_1_1.eContents().get(0);
		
		//Cardinality data::Cardinality:
		//	min=INT (',' max=INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//min=INT (',' max=INT)?
		public Group getGroup() { return cGroup; }
		
		//min=INT
		public Assignment getMinAssignment_0() { return cMinAssignment_0; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_0_0() { return cMinINTTerminalRuleCall_0_0; }
		
		//(',' max=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//max=INT
		public Assignment getMaxAssignment_1_1() { return cMaxAssignment_1_1; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_1_1_0() { return cMaxINTTerminalRuleCall_1_1_0; }
	}
	public class DataDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormatSTRINGTerminalRuleCall_1_0 = (RuleCall)cFormatAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFragmentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFragmentsFragmentCrossReference_3_1_0 = (CrossReference)cFragmentsAssignment_3_1.eContents().get(0);
		private final RuleCall cFragmentsFragmentQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cFragmentsFragmentCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFragmentsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cFragmentsFragmentCrossReference_3_2_1_0 = (CrossReference)cFragmentsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cFragmentsFragmentQualifiedNameParserRuleCall_3_2_1_0_1 = (RuleCall)cFragmentsFragmentCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodesNodeParserRuleCall_5_0 = (RuleCall)cNodesAssignment_5.eContents().get(0);
		private final Assignment cNodesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNodesNodeParserRuleCall_6_0 = (RuleCall)cNodesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cOptionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cOptionsDataOptionParserRuleCall_8_1_0 = (RuleCall)cOptionsAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cOptionsAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cOptionsDataOptionParserRuleCall_8_2_1_0 = (RuleCall)cOptionsAssignment_8_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//DataDescription data::DataDescription:
		//	'description' format=STRING name=ID (':' fragments+=[data::Fragment|QualifiedName] (','
		//	fragments+=[data::Fragment|QualifiedName])*)? '{'
		//	nodes+=Node nodes+=Node*
		//	'}' ('(' options+=DataOption ("," options+=DataOption)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//'description' format=STRING name=ID (':' fragments+=[data::Fragment|QualifiedName] (','
		//fragments+=[data::Fragment|QualifiedName])*)? '{' nodes+=Node nodes+=Node* '}' ('(' options+=DataOption (","
		//options+=DataOption)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//format=STRING
		public Assignment getFormatAssignment_1() { return cFormatAssignment_1; }
		
		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_1_0() { return cFormatSTRINGTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(':' fragments+=[data::Fragment|QualifiedName] (',' fragments+=[data::Fragment|QualifiedName])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//fragments+=[data::Fragment|QualifiedName]
		public Assignment getFragmentsAssignment_3_1() { return cFragmentsAssignment_3_1; }
		
		//[data::Fragment|QualifiedName]
		public CrossReference getFragmentsFragmentCrossReference_3_1_0() { return cFragmentsFragmentCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getFragmentsFragmentQualifiedNameParserRuleCall_3_1_0_1() { return cFragmentsFragmentQualifiedNameParserRuleCall_3_1_0_1; }
		
		//(',' fragments+=[data::Fragment|QualifiedName])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//fragments+=[data::Fragment|QualifiedName]
		public Assignment getFragmentsAssignment_3_2_1() { return cFragmentsAssignment_3_2_1; }
		
		//[data::Fragment|QualifiedName]
		public CrossReference getFragmentsFragmentCrossReference_3_2_1_0() { return cFragmentsFragmentCrossReference_3_2_1_0; }
		
		//QualifiedName
		public RuleCall getFragmentsFragmentQualifiedNameParserRuleCall_3_2_1_0_1() { return cFragmentsFragmentQualifiedNameParserRuleCall_3_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_5() { return cNodesAssignment_5; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_5_0() { return cNodesNodeParserRuleCall_5_0; }
		
		//nodes+=Node*
		public Assignment getNodesAssignment_6() { return cNodesAssignment_6; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_6_0() { return cNodesNodeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('(' options+=DataOption ("," options+=DataOption)* ')')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }
		
		//options+=DataOption
		public Assignment getOptionsAssignment_8_1() { return cOptionsAssignment_8_1; }
		
		//DataOption
		public RuleCall getOptionsDataOptionParserRuleCall_8_1_0() { return cOptionsDataOptionParserRuleCall_8_1_0; }
		
		//("," options+=DataOption)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//","
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//options+=DataOption
		public Assignment getOptionsAssignment_8_2_1() { return cOptionsAssignment_8_2_1; }
		
		//DataOption
		public RuleCall getOptionsDataOptionParserRuleCall_8_2_1_0() { return cOptionsDataOptionParserRuleCall_8_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
	}
	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Fragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFragmentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cFragmentsFragmentCrossReference_2_1_0 = (CrossReference)cFragmentsAssignment_2_1.eContents().get(0);
		private final RuleCall cFragmentsFragmentQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cFragmentsFragmentCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFragmentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cFragmentsFragmentCrossReference_2_2_1_0 = (CrossReference)cFragmentsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cFragmentsFragmentQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cFragmentsFragmentCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodesNodeParserRuleCall_4_0 = (RuleCall)cNodesAssignment_4.eContents().get(0);
		private final Assignment cNodesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodesNodeParserRuleCall_5_0 = (RuleCall)cNodesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Fragment data::Fragment:
		//	'fragment' name=ID (':' fragments+=[data::Fragment|QualifiedName] (',' fragments+=[data::Fragment|QualifiedName])*)?
		//	'{'
		//	nodes+=Node nodes+=Node*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'fragment' name=ID (':' fragments+=[data::Fragment|QualifiedName] (',' fragments+=[data::Fragment|QualifiedName])*)? '{'
		//nodes+=Node nodes+=Node* '}'
		public Group getGroup() { return cGroup; }
		
		//'fragment'
		public Keyword getFragmentKeyword_0() { return cFragmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' fragments+=[data::Fragment|QualifiedName] (',' fragments+=[data::Fragment|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//fragments+=[data::Fragment|QualifiedName]
		public Assignment getFragmentsAssignment_2_1() { return cFragmentsAssignment_2_1; }
		
		//[data::Fragment|QualifiedName]
		public CrossReference getFragmentsFragmentCrossReference_2_1_0() { return cFragmentsFragmentCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getFragmentsFragmentQualifiedNameParserRuleCall_2_1_0_1() { return cFragmentsFragmentQualifiedNameParserRuleCall_2_1_0_1; }
		
		//(',' fragments+=[data::Fragment|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//fragments+=[data::Fragment|QualifiedName]
		public Assignment getFragmentsAssignment_2_2_1() { return cFragmentsAssignment_2_2_1; }
		
		//[data::Fragment|QualifiedName]
		public CrossReference getFragmentsFragmentCrossReference_2_2_1_0() { return cFragmentsFragmentCrossReference_2_2_1_0; }
		
		//QualifiedName
		public RuleCall getFragmentsFragmentQualifiedNameParserRuleCall_2_2_1_0_1() { return cFragmentsFragmentQualifiedNameParserRuleCall_2_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_4() { return cNodesAssignment_4; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_4_0() { return cNodesNodeParserRuleCall_4_0; }
		
		//nodes+=Node*
		public Assignment getNodesAssignment_5() { return cNodesAssignment_5; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_5_0() { return cNodesNodeParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DataTypeRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataTypeRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefineBasicTypeEnumRuleCall_3_0 = (RuleCall)cRefineAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cSubsequencesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cSubsequencesSubstringConceptParserRuleCall_4_1_0_0 = (RuleCall)cSubsequencesAssignment_4_1_0.eContents().get(0);
		private final Assignment cSubsequencesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSubsequencesSubstringConceptParserRuleCall_4_1_1_0 = (RuleCall)cSubsequencesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOptionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_5_1_0 = (RuleCall)cOptionsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cOptionsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_5_2_1_0 = (RuleCall)cOptionsAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//DataTypeRefinement data::DataTypeRefinement:
		//	'datatype' name=ID ':' refine=BasicType ('{' (subsequences+=SubstringConcept subsequences+=SubstringConcept*)? '}')?
		//	('(' options+=Option ("," options+=Option)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID ':' refine=BasicType ('{' (subsequences+=SubstringConcept subsequences+=SubstringConcept*)? '}')?
		//('(' options+=Option ("," options+=Option)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//refine=BasicType
		public Assignment getRefineAssignment_3() { return cRefineAssignment_3; }
		
		//BasicType
		public RuleCall getRefineBasicTypeEnumRuleCall_3_0() { return cRefineBasicTypeEnumRuleCall_3_0; }
		
		//('{' (subsequences+=SubstringConcept subsequences+=SubstringConcept*)? '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//(subsequences+=SubstringConcept subsequences+=SubstringConcept*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//subsequences+=SubstringConcept
		public Assignment getSubsequencesAssignment_4_1_0() { return cSubsequencesAssignment_4_1_0; }
		
		//SubstringConcept
		public RuleCall getSubsequencesSubstringConceptParserRuleCall_4_1_0_0() { return cSubsequencesSubstringConceptParserRuleCall_4_1_0_0; }
		
		//subsequences+=SubstringConcept*
		public Assignment getSubsequencesAssignment_4_1_1() { return cSubsequencesAssignment_4_1_1; }
		
		//SubstringConcept
		public RuleCall getSubsequencesSubstringConceptParserRuleCall_4_1_1_0() { return cSubsequencesSubstringConceptParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
		
		//('(' options+=Option ("," options+=Option)* ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_5_1() { return cOptionsAssignment_5_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_5_1_0() { return cOptionsOptionParserRuleCall_5_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_5_2_1() { return cOptionsAssignment_5_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_5_2_1_0() { return cOptionsOptionParserRuleCall_5_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesSTRINGTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enumeration data::Enumeration:
		//	'enumeration' name=ID "{" values+=STRING (',' values+=STRING)* "}"
		@Override public ParserRule getRule() { return rule; }
		
		//'enumeration' name=ID "{" values+=STRING (',' values+=STRING)* "}"
		public Group getGroup() { return cGroup; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//values+=STRING
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_3_0() { return cValuesSTRINGTerminalRuleCall_3_0; }
		
		//(',' values+=STRING)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_4_1_0() { return cValuesSTRINGTerminalRuleCall_4_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringOptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanOptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleOptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cListQualifiedNameOptionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Option data::Option:
		//	StringOption | IntOption | BooleanOption | DoubleOption | ListQualifiedNameOption
		@Override public ParserRule getRule() { return rule; }
		
		//StringOption | IntOption | BooleanOption | DoubleOption | ListQualifiedNameOption
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringOption
		public RuleCall getStringOptionParserRuleCall_0() { return cStringOptionParserRuleCall_0; }
		
		//IntOption
		public RuleCall getIntOptionParserRuleCall_1() { return cIntOptionParserRuleCall_1; }
		
		//BooleanOption
		public RuleCall getBooleanOptionParserRuleCall_2() { return cBooleanOptionParserRuleCall_2; }
		
		//DoubleOption
		public RuleCall getDoubleOptionParserRuleCall_3() { return cDoubleOptionParserRuleCall_3; }
		
		//ListQualifiedNameOption
		public RuleCall getListQualifiedNameOptionParserRuleCall_4() { return cListQualifiedNameOptionParserRuleCall_4; }
	}
	public class StringOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.StringOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyStringOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StringOption data::StringOption:
		//	key=StringOptionKey '=' value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//key=StringOptionKey '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=StringOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//StringOptionKey
		public RuleCall getKeyStringOptionKeyEnumRuleCall_0_0() { return cKeyStringOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class IntOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.IntOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIntOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IntOption data::IntOption:
		//	key=IntOptionKey '=' value=INT
		@Override public ParserRule getRule() { return rule; }
		
		//key=IntOptionKey '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//key=IntOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//IntOptionKey
		public RuleCall getKeyIntOptionKeyEnumRuleCall_0_0() { return cKeyIntOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class DoubleOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DoubleOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyDoubleOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDOUBLETerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DoubleOption data::DoubleOption:
		//	key=DoubleOptionKey '=' value=DOUBLE
		@Override public ParserRule getRule() { return rule; }
		
		//key=DoubleOptionKey '=' value=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//key=DoubleOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//DoubleOptionKey
		public RuleCall getKeyDoubleOptionKeyEnumRuleCall_0_0() { return cKeyDoubleOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_2_0() { return cValueDOUBLETerminalRuleCall_2_0; }
	}
	public class BooleanOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.BooleanOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyBooleanOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBOOLEANTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//BooleanOption data::BooleanOption:
		//	key=BooleanOptionKey '=' value=BOOLEAN
		@Override public ParserRule getRule() { return rule; }
		
		//key=BooleanOptionKey '=' value=BOOLEAN
		public Group getGroup() { return cGroup; }
		
		//key=BooleanOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//BooleanOptionKey
		public RuleCall getKeyBooleanOptionKeyEnumRuleCall_0_0() { return cKeyBooleanOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_2_0() { return cValueBOOLEANTerminalRuleCall_2_0; }
	}
	public class ListQualifiedNameOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.ListQualifiedNameOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyListQualifiedNameOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFragmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFragmentsNodeCrossReference_2_0 = (CrossReference)cFragmentsAssignment_2.eContents().get(0);
		private final RuleCall cFragmentsNodeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFragmentsNodeCrossReference_2_0.eContents().get(1);
		
		//ListQualifiedNameOption data::ListQualifiedNameOption:
		//	key=ListQualifiedNameOptionKey '=' fragments+=[data::Node|QualifiedName]
		@Override public ParserRule getRule() { return rule; }
		
		//key=ListQualifiedNameOptionKey '=' fragments+=[data::Node|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//key=ListQualifiedNameOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ListQualifiedNameOptionKey
		public RuleCall getKeyListQualifiedNameOptionKeyEnumRuleCall_0_0() { return cKeyListQualifiedNameOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//fragments+=[data::Node|QualifiedName]
		public Assignment getFragmentsAssignment_2() { return cFragmentsAssignment_2; }
		
		//[data::Node|QualifiedName]
		public CrossReference getFragmentsNodeCrossReference_2_0() { return cFragmentsNodeCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getFragmentsNodeQualifiedNameParserRuleCall_2_0_1() { return cFragmentsNodeQualifiedNameParserRuleCall_2_0_1; }
	}
	public class DataOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DataOption data::DataOption:
		//	key=STRING '=' value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	public class TypeCharacterElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.TypeCharacter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCharEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCharCharKeyword_0_0 = (Keyword)cCharEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDigitEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDigitDigitKeyword_1_0 = (Keyword)cDigitEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TypeCharacter returns data::TypeCharacter:
		//	char | digit;
		public EnumRule getRule() { return rule; }
		
		//char | digit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//char
		public EnumLiteralDeclaration getCharEnumLiteralDeclaration_0() { return cCharEnumLiteralDeclaration_0; }
		
		//'char'
		public Keyword getCharCharKeyword_0_0() { return cCharCharKeyword_0_0; }
		
		//digit
		public EnumLiteralDeclaration getDigitEnumLiteralDeclaration_1() { return cDigitEnumLiteralDeclaration_1; }
		
		//'digit'
		public Keyword getDigitDigitKeyword_1_0() { return cDigitDigitKeyword_1_0; }
	}
	public class TypeStringElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.TypeString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAnycaseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAnycaseAnycase_stringKeyword_0_0 = (Keyword)cAnycaseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLowercaseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLowercaseLowercase_stringKeyword_1_0 = (Keyword)cLowercaseEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUppercaseEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUppercaseUppercase_stringKeyword_2_0 = (Keyword)cUppercaseEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNumbersEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNumbersDigitsKeyword_3_0 = (Keyword)cNumbersEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TypeString returns data::TypeString:
		//	anycase='anycase_string' | lowercase='lowercase_string' | uppercase='uppercase_string' | numbers='digits';
		public EnumRule getRule() { return rule; }
		
		//anycase='anycase_string' | lowercase='lowercase_string' | uppercase='uppercase_string' | numbers='digits'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//anycase='anycase_string'
		public EnumLiteralDeclaration getAnycaseEnumLiteralDeclaration_0() { return cAnycaseEnumLiteralDeclaration_0; }
		
		//'anycase_string'
		public Keyword getAnycaseAnycase_stringKeyword_0_0() { return cAnycaseAnycase_stringKeyword_0_0; }
		
		//lowercase='lowercase_string'
		public EnumLiteralDeclaration getLowercaseEnumLiteralDeclaration_1() { return cLowercaseEnumLiteralDeclaration_1; }
		
		//'lowercase_string'
		public Keyword getLowercaseLowercase_stringKeyword_1_0() { return cLowercaseLowercase_stringKeyword_1_0; }
		
		//uppercase='uppercase_string'
		public EnumLiteralDeclaration getUppercaseEnumLiteralDeclaration_2() { return cUppercaseEnumLiteralDeclaration_2; }
		
		//'uppercase_string'
		public Keyword getUppercaseUppercase_stringKeyword_2_0() { return cUppercaseUppercase_stringKeyword_2_0; }
		
		//numbers='digits'
		public EnumLiteralDeclaration getNumbersEnumLiteralDeclaration_3() { return cNumbersEnumLiteralDeclaration_3; }
		
		//'digits'
		public Keyword getNumbersDigitsKeyword_3_0() { return cNumbersDigitsKeyword_3_0; }
	}
	public class BasicTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUrlEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUrlUrlKeyword_1_0 = (Keyword)cUrlEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntIntKeyword_2_0 = (Keyword)cIntEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLongIntEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLongIntLongIntKeyword_3_0 = (Keyword)cLongIntEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRealRealKeyword_4_0 = (Keyword)cRealEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDateDateKeyword_5_0 = (Keyword)cDateEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTimeTimeKeyword_6_0 = (Keyword)cTimeEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cYearEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cYearYearKeyword_7_0 = (Keyword)cYearEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cMonthEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cMonthMonthKeyword_8_0 = (Keyword)cMonthEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDayEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDayDayKeyword_9_0 = (Keyword)cDayEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cBooleanBooleanKeyword_10_0 = (Keyword)cBooleanEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cLatEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cLatLatKeyword_11_0 = (Keyword)cLatEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cLongEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cLongLongKeyword_12_0 = (Keyword)cLongEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cPercentEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cPercentPercentKeyword_13_0 = (Keyword)cPercentEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cEmailEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cEmailEmailKeyword_14_0 = (Keyword)cEmailEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cCurrencyEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cCurrencyCurrencyKeyword_15_0 = (Keyword)cCurrencyEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cCreditcardEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cCreditcardCreditCardKeyword_16_0 = (Keyword)cCreditcardEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cIBANEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cIBANIBANKeyword_17_0 = (Keyword)cIBANEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cISBNEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cISBNISBNKeyword_18_0 = (Keyword)cISBNEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cISSNEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cISSNISSNKeyword_19_0 = (Keyword)cISSNEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cInetEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cInetInetKeyword_20_0 = (Keyword)cInetEnumLiteralDeclaration_20.eContents().get(0);
		
		//enum BasicType returns data::BasicType:
		//	string='String' | url='Url' | int='Int' | longInt='LongInt' | real='Real' | date='Date' | time='Time' | year='Year' |
		//	month='Month' | day='Day' | boolean='Boolean' | lat='Lat' | long='Long' | percent='Percent' | email='Email' |
		//	currency='Currency' | creditcard='CreditCard' | IBAN | ISBN | ISSN | inet='Inet';
		public EnumRule getRule() { return rule; }
		
		//string='String' | url='Url' | int='Int' | longInt='LongInt' | real='Real' | date='Date' | time='Time' | year='Year' |
		//month='Month' | day='Day' | boolean='Boolean' | lat='Lat' | long='Long' | percent='Percent' | email='Email' |
		//currency='Currency' | creditcard='CreditCard' | IBAN | ISBN | ISSN | inet='Inet'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string='String'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//url='Url'
		public EnumLiteralDeclaration getUrlEnumLiteralDeclaration_1() { return cUrlEnumLiteralDeclaration_1; }
		
		//'Url'
		public Keyword getUrlUrlKeyword_1_0() { return cUrlUrlKeyword_1_0; }
		
		//int='Int'
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_2() { return cIntEnumLiteralDeclaration_2; }
		
		//'Int'
		public Keyword getIntIntKeyword_2_0() { return cIntIntKeyword_2_0; }
		
		//longInt='LongInt'
		public EnumLiteralDeclaration getLongIntEnumLiteralDeclaration_3() { return cLongIntEnumLiteralDeclaration_3; }
		
		//'LongInt'
		public Keyword getLongIntLongIntKeyword_3_0() { return cLongIntLongIntKeyword_3_0; }
		
		//real='Real'
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_4() { return cRealEnumLiteralDeclaration_4; }
		
		//'Real'
		public Keyword getRealRealKeyword_4_0() { return cRealRealKeyword_4_0; }
		
		//date='Date'
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_5() { return cDateEnumLiteralDeclaration_5; }
		
		//'Date'
		public Keyword getDateDateKeyword_5_0() { return cDateDateKeyword_5_0; }
		
		//time='Time'
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_6() { return cTimeEnumLiteralDeclaration_6; }
		
		//'Time'
		public Keyword getTimeTimeKeyword_6_0() { return cTimeTimeKeyword_6_0; }
		
		//year='Year'
		public EnumLiteralDeclaration getYearEnumLiteralDeclaration_7() { return cYearEnumLiteralDeclaration_7; }
		
		//'Year'
		public Keyword getYearYearKeyword_7_0() { return cYearYearKeyword_7_0; }
		
		//month='Month'
		public EnumLiteralDeclaration getMonthEnumLiteralDeclaration_8() { return cMonthEnumLiteralDeclaration_8; }
		
		//'Month'
		public Keyword getMonthMonthKeyword_8_0() { return cMonthMonthKeyword_8_0; }
		
		//day='Day'
		public EnumLiteralDeclaration getDayEnumLiteralDeclaration_9() { return cDayEnumLiteralDeclaration_9; }
		
		//'Day'
		public Keyword getDayDayKeyword_9_0() { return cDayDayKeyword_9_0; }
		
		//boolean='Boolean'
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_10() { return cBooleanEnumLiteralDeclaration_10; }
		
		//'Boolean'
		public Keyword getBooleanBooleanKeyword_10_0() { return cBooleanBooleanKeyword_10_0; }
		
		//lat='Lat'
		public EnumLiteralDeclaration getLatEnumLiteralDeclaration_11() { return cLatEnumLiteralDeclaration_11; }
		
		//'Lat'
		public Keyword getLatLatKeyword_11_0() { return cLatLatKeyword_11_0; }
		
		//long='Long'
		public EnumLiteralDeclaration getLongEnumLiteralDeclaration_12() { return cLongEnumLiteralDeclaration_12; }
		
		//'Long'
		public Keyword getLongLongKeyword_12_0() { return cLongLongKeyword_12_0; }
		
		//percent='Percent'
		public EnumLiteralDeclaration getPercentEnumLiteralDeclaration_13() { return cPercentEnumLiteralDeclaration_13; }
		
		//'Percent'
		public Keyword getPercentPercentKeyword_13_0() { return cPercentPercentKeyword_13_0; }
		
		//email='Email'
		public EnumLiteralDeclaration getEmailEnumLiteralDeclaration_14() { return cEmailEnumLiteralDeclaration_14; }
		
		//'Email'
		public Keyword getEmailEmailKeyword_14_0() { return cEmailEmailKeyword_14_0; }
		
		//currency='Currency'
		public EnumLiteralDeclaration getCurrencyEnumLiteralDeclaration_15() { return cCurrencyEnumLiteralDeclaration_15; }
		
		//'Currency'
		public Keyword getCurrencyCurrencyKeyword_15_0() { return cCurrencyCurrencyKeyword_15_0; }
		
		//creditcard='CreditCard'
		public EnumLiteralDeclaration getCreditcardEnumLiteralDeclaration_16() { return cCreditcardEnumLiteralDeclaration_16; }
		
		//'CreditCard'
		public Keyword getCreditcardCreditCardKeyword_16_0() { return cCreditcardCreditCardKeyword_16_0; }
		
		//IBAN
		public EnumLiteralDeclaration getIBANEnumLiteralDeclaration_17() { return cIBANEnumLiteralDeclaration_17; }
		
		//'IBAN'
		public Keyword getIBANIBANKeyword_17_0() { return cIBANIBANKeyword_17_0; }
		
		//ISBN
		public EnumLiteralDeclaration getISBNEnumLiteralDeclaration_18() { return cISBNEnumLiteralDeclaration_18; }
		
		//'ISBN'
		public Keyword getISBNISBNKeyword_18_0() { return cISBNISBNKeyword_18_0; }
		
		//ISSN
		public EnumLiteralDeclaration getISSNEnumLiteralDeclaration_19() { return cISSNEnumLiteralDeclaration_19; }
		
		//'ISSN'
		public Keyword getISSNISSNKeyword_19_0() { return cISSNISSNKeyword_19_0; }
		
		//inet='Inet'
		public EnumLiteralDeclaration getInetEnumLiteralDeclaration_20() { return cInetEnumLiteralDeclaration_20; }
		
		//'Inet'
		public Keyword getInetInetKeyword_20_0() { return cInetInetKeyword_20_0; }
	}
	public class StringOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.StringOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNullNullKeyword_0_0 = (Keyword)cNullEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSeparatorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSeparatorSeparatorKeyword_1_0 = (Keyword)cSeparatorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDefaultDefaultKeyword_2_0 = (Keyword)cDefaultEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRegexEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRegexRegexKeyword_3_0 = (Keyword)cRegexEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFlagsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFlagsFlagsKeyword_4_0 = (Keyword)cFlagsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalcharEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDecimalcharDecimalcharKeyword_5_0 = (Keyword)cDecimalcharEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPatternEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPatternPatternKeyword_6_0 = (Keyword)cPatternEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFormatEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFormatFormatKeyword_7_0 = (Keyword)cFormatEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum StringOptionKey returns data::StringOptionKey:
		//	null | separator | default | regex | flags | decimalchar | pattern | format;
		public EnumRule getRule() { return rule; }
		
		//null | separator | default | regex | flags | decimalchar | pattern | format
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//null
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration_0() { return cNullEnumLiteralDeclaration_0; }
		
		//'null'
		public Keyword getNullNullKeyword_0_0() { return cNullNullKeyword_0_0; }
		
		//separator
		public EnumLiteralDeclaration getSeparatorEnumLiteralDeclaration_1() { return cSeparatorEnumLiteralDeclaration_1; }
		
		//'separator'
		public Keyword getSeparatorSeparatorKeyword_1_0() { return cSeparatorSeparatorKeyword_1_0; }
		
		//default
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_2() { return cDefaultEnumLiteralDeclaration_2; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_2_0() { return cDefaultDefaultKeyword_2_0; }
		
		//regex
		public EnumLiteralDeclaration getRegexEnumLiteralDeclaration_3() { return cRegexEnumLiteralDeclaration_3; }
		
		//'regex'
		public Keyword getRegexRegexKeyword_3_0() { return cRegexRegexKeyword_3_0; }
		
		//flags
		public EnumLiteralDeclaration getFlagsEnumLiteralDeclaration_4() { return cFlagsEnumLiteralDeclaration_4; }
		
		//'flags'
		public Keyword getFlagsFlagsKeyword_4_0() { return cFlagsFlagsKeyword_4_0; }
		
		//decimalchar
		public EnumLiteralDeclaration getDecimalcharEnumLiteralDeclaration_5() { return cDecimalcharEnumLiteralDeclaration_5; }
		
		//'decimalchar'
		public Keyword getDecimalcharDecimalcharKeyword_5_0() { return cDecimalcharDecimalcharKeyword_5_0; }
		
		//pattern
		public EnumLiteralDeclaration getPatternEnumLiteralDeclaration_6() { return cPatternEnumLiteralDeclaration_6; }
		
		//'pattern'
		public Keyword getPatternPatternKeyword_6_0() { return cPatternPatternKeyword_6_0; }
		
		//format
		public EnumLiteralDeclaration getFormatEnumLiteralDeclaration_7() { return cFormatEnumLiteralDeclaration_7; }
		
		//'format'
		public Keyword getFormatFormatKeyword_7_0() { return cFormatFormatKeyword_7_0; }
	}
	public class IntOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.IntOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinLengthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinLengthMinLengthKeyword_0_0 = (Keyword)cMinLengthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaxLengthEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaxLengthMaxLengthKeyword_1_0 = (Keyword)cMaxLengthEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMinEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMinMinKeyword_2_0 = (Keyword)cMinEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMaxMaxKeyword_3_0 = (Keyword)cMaxEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDefaultDefaultvalueKeyword_4_0 = (Keyword)cDefaultEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum IntOptionKey returns data::IntOptionKey:
		//	minLength | maxLength | min | max | default='defaultvalue';
		public EnumRule getRule() { return rule; }
		
		//minLength | maxLength | min | max | default='defaultvalue'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//minLength
		public EnumLiteralDeclaration getMinLengthEnumLiteralDeclaration_0() { return cMinLengthEnumLiteralDeclaration_0; }
		
		//'minLength'
		public Keyword getMinLengthMinLengthKeyword_0_0() { return cMinLengthMinLengthKeyword_0_0; }
		
		//maxLength
		public EnumLiteralDeclaration getMaxLengthEnumLiteralDeclaration_1() { return cMaxLengthEnumLiteralDeclaration_1; }
		
		//'maxLength'
		public Keyword getMaxLengthMaxLengthKeyword_1_0() { return cMaxLengthMaxLengthKeyword_1_0; }
		
		//min
		public EnumLiteralDeclaration getMinEnumLiteralDeclaration_2() { return cMinEnumLiteralDeclaration_2; }
		
		//'min'
		public Keyword getMinMinKeyword_2_0() { return cMinMinKeyword_2_0; }
		
		//max
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_3() { return cMaxEnumLiteralDeclaration_3; }
		
		//'max'
		public Keyword getMaxMaxKeyword_3_0() { return cMaxMaxKeyword_3_0; }
		
		//default='defaultvalue'
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_4() { return cDefaultEnumLiteralDeclaration_4; }
		
		//'defaultvalue'
		public Keyword getDefaultDefaultvalueKeyword_4_0() { return cDefaultDefaultvalueKeyword_4_0; }
	}
	public class DoubleOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DoubleOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinMinDoubleKeyword_0_0 = (Keyword)cMinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaxMaxDoubleKeyword_1_0 = (Keyword)cMaxEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDefaultDefaultvalueDoubleKeyword_2_0 = (Keyword)cDefaultEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DoubleOptionKey returns data::DoubleOptionKey:
		//	min='minDouble' | max='maxDouble' | default='defaultvalueDouble';
		public EnumRule getRule() { return rule; }
		
		//min='minDouble' | max='maxDouble' | default='defaultvalueDouble'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//min='minDouble'
		public EnumLiteralDeclaration getMinEnumLiteralDeclaration_0() { return cMinEnumLiteralDeclaration_0; }
		
		//'minDouble'
		public Keyword getMinMinDoubleKeyword_0_0() { return cMinMinDoubleKeyword_0_0; }
		
		//max='maxDouble'
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_1() { return cMaxEnumLiteralDeclaration_1; }
		
		//'maxDouble'
		public Keyword getMaxMaxDoubleKeyword_1_0() { return cMaxMaxDoubleKeyword_1_0; }
		
		//default='defaultvalueDouble'
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_2() { return cDefaultEnumLiteralDeclaration_2; }
		
		//'defaultvalueDouble'
		public Keyword getDefaultDefaultvalueDoubleKeyword_2_0() { return cDefaultDefaultvalueDoubleKeyword_2_0; }
	}
	public class BooleanOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.BooleanOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNullableEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNullableNullableKeyword_0_0 = (Keyword)cNullableEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCasesensitiveEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCasesensitiveCasesensitiveKeyword_1_0 = (Keyword)cCasesensitiveEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanOptionKey returns data::BooleanOptionKey:
		//	nullable | casesensitive;
		public EnumRule getRule() { return rule; }
		
		//nullable | casesensitive
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nullable
		public EnumLiteralDeclaration getNullableEnumLiteralDeclaration_0() { return cNullableEnumLiteralDeclaration_0; }
		
		//"nullable"
		public Keyword getNullableNullableKeyword_0_0() { return cNullableNullableKeyword_0_0; }
		
		//casesensitive
		public EnumLiteralDeclaration getCasesensitiveEnumLiteralDeclaration_1() { return cCasesensitiveEnumLiteralDeclaration_1; }
		
		//'casesensitive'
		public Keyword getCasesensitiveCasesensitiveKeyword_1_0() { return cCasesensitiveCasesensitiveKeyword_1_0; }
	}
	public class ListQualifiedNameOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.ListQualifiedNameOptionKey");
		private final EnumLiteralDeclaration cOrderEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOrderOrderKeyword_0 = (Keyword)cOrderEnumLiteralDeclaration.eContents().get(0);
		
		//enum ListQualifiedNameOptionKey returns data::ListQualifiedNameOptionKey:
		//	order;
		public EnumRule getRule() { return rule; }
		
		//order
		public EnumLiteralDeclaration getOrderEnumLiteralDeclaration() { return cOrderEnumLiteralDeclaration; }
		
		//"order"
		public Keyword getOrderOrderKeyword_0() { return cOrderOrderKeyword_0; }
	}
	
	private final DataModelElements pDataModel;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final DataModelElementElements pDataModelElement;
	private final PackageElements pPackage;
	private final TagElements pTag;
	private final SpecificationElementElements pSpecificationElement;
	private final TypeSpecificationElements pTypeSpecification;
	private final AbstractDescriptionElements pAbstractDescription;
	private final SubstringConceptElements pSubstringConcept;
	private final SubstringElements pSubstring;
	private final CharacterElements pCharacter;
	private final TypeCharacterElements eTypeCharacter;
	private final TypeStringElements eTypeString;
	private final NodeElements pNode;
	private final CompositeNodeElements pCompositeNode;
	private final FragmentNodeElements pFragmentNode;
	private final PrimitiveNodeElements pPrimitiveNode;
	private final CardinalityElements pCardinality;
	private final DataDescriptionElements pDataDescription;
	private final FragmentElements pFragment;
	private final DataTypeRefinementElements pDataTypeRefinement;
	private final EnumerationElements pEnumeration;
	private final OptionElements pOption;
	private final StringOptionElements pStringOption;
	private final IntOptionElements pIntOption;
	private final DoubleOptionElements pDoubleOption;
	private final BooleanOptionElements pBooleanOption;
	private final ListQualifiedNameOptionElements pListQualifiedNameOption;
	private final BasicTypeElements eBasicType;
	private final StringOptionKeyElements eStringOptionKey;
	private final IntOptionKeyElements eIntOptionKey;
	private final DoubleOptionKeyElements eDoubleOptionKey;
	private final BooleanOptionKeyElements eBooleanOptionKey;
	private final ListQualifiedNameOptionKeyElements eListQualifiedNameOptionKey;
	private final DataOptionElements pDataOption;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DataDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataModel = new DataModelElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pDataModelElement = new DataModelElementElements();
		this.pPackage = new PackageElements();
		this.pTag = new TagElements();
		this.pSpecificationElement = new SpecificationElementElements();
		this.pTypeSpecification = new TypeSpecificationElements();
		this.pAbstractDescription = new AbstractDescriptionElements();
		this.pSubstringConcept = new SubstringConceptElements();
		this.pSubstring = new SubstringElements();
		this.pCharacter = new CharacterElements();
		this.eTypeCharacter = new TypeCharacterElements();
		this.eTypeString = new TypeStringElements();
		this.pNode = new NodeElements();
		this.pCompositeNode = new CompositeNodeElements();
		this.pFragmentNode = new FragmentNodeElements();
		this.pPrimitiveNode = new PrimitiveNodeElements();
		this.pCardinality = new CardinalityElements();
		this.pDataDescription = new DataDescriptionElements();
		this.pFragment = new FragmentElements();
		this.pDataTypeRefinement = new DataTypeRefinementElements();
		this.pEnumeration = new EnumerationElements();
		this.pOption = new OptionElements();
		this.pStringOption = new StringOptionElements();
		this.pIntOption = new IntOptionElements();
		this.pDoubleOption = new DoubleOptionElements();
		this.pBooleanOption = new BooleanOptionElements();
		this.pListQualifiedNameOption = new ListQualifiedNameOptionElements();
		this.eBasicType = new BasicTypeElements();
		this.eStringOptionKey = new StringOptionKeyElements();
		this.eIntOptionKey = new IntOptionKeyElements();
		this.eDoubleOptionKey = new DoubleOptionKeyElements();
		this.eBooleanOptionKey = new BooleanOptionKeyElements();
		this.eListQualifiedNameOptionKey = new ListQualifiedNameOptionKeyElements();
		this.pDataOption = new DataOptionElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eagledata.core.dsl.datadesc.DataDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataModel data::DataModel:
	//	{data::DataModel} elements+=DataModelElement elements+=DataModelElement*
	public DataModelElements getDataModelAccess() {
		return pDataModel;
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}
	
	/// ******************** * / Import data::Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	/// ******************** * / DataModelElement data::DataModelElement:
	//	Import | Package | SpecificationElement
	public DataModelElementElements getDataModelElementAccess() {
		return pDataModelElement;
	}
	
	public ParserRule getDataModelElementRule() {
		return getDataModelElementAccess().getRule();
	}
	
	//Package data::Package:
	//	(tags+=Tag tags+=Tag*)?
	//	'package' name=QualifiedName '{'
	//	elements+=SpecificationElement elements+=SpecificationElement*
	//	'}'
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Tag data::Tag:
	//	'@' tag=STRING
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//SpecificationElement data::SpecificationElement:
	//	TypeSpecification | AbstractDescription
	public SpecificationElementElements getSpecificationElementAccess() {
		return pSpecificationElement;
	}
	
	public ParserRule getSpecificationElementRule() {
		return getSpecificationElementAccess().getRule();
	}
	
	//TypeSpecification data::TypeSpecification:
	//	DataTypeRefinement | Enumeration
	public TypeSpecificationElements getTypeSpecificationAccess() {
		return pTypeSpecification;
	}
	
	public ParserRule getTypeSpecificationRule() {
		return getTypeSpecificationAccess().getRule();
	}
	
	//AbstractDescription data::AbstractDescription:
	//	DataDescription | Fragment
	public AbstractDescriptionElements getAbstractDescriptionAccess() {
		return pAbstractDescription;
	}
	
	public ParserRule getAbstractDescriptionRule() {
		return getAbstractDescriptionAccess().getRule();
	}
	
	//SubstringConcept data::SubstringConcept:
	//	Character | Substring
	public SubstringConceptElements getSubstringConceptAccess() {
		return pSubstringConcept;
	}
	
	public ParserRule getSubstringConceptRule() {
		return getSubstringConceptAccess().getRule();
	}
	
	//Substring data::Substring:
	//	typeString=TypeString name=ID '[' minlength=INT "," maxlength=INT ']'
	public SubstringElements getSubstringAccess() {
		return pSubstring;
	}
	
	public ParserRule getSubstringRule() {
		return getSubstringAccess().getRule();
	}
	
	//Character data::Character:
	//	typeCharacter=TypeCharacter name=ID value=STRING?
	public CharacterElements getCharacterAccess() {
		return pCharacter;
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}
	
	//enum TypeCharacter returns data::TypeCharacter:
	//	char | digit;
	public TypeCharacterElements getTypeCharacterAccess() {
		return eTypeCharacter;
	}
	
	public EnumRule getTypeCharacterRule() {
		return getTypeCharacterAccess().getRule();
	}
	
	//enum TypeString returns data::TypeString:
	//	anycase='anycase_string' | lowercase='lowercase_string' | uppercase='uppercase_string' | numbers='digits';
	public TypeStringElements getTypeStringAccess() {
		return eTypeString;
	}
	
	public EnumRule getTypeStringRule() {
		return getTypeStringAccess().getRule();
	}
	
	//Node data::Node:
	//	PrimitiveNode | CompositeNode | FragmentNode
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//CompositeNode data::CompositeNode:
	//	(key?="key" | unique?="unique")?
	//	type=[data::TypeSpecification|QualifiedName] name=ID ('[' cardinality=Cardinality ']')? ('(' options+=Option (","
	//	options+=Option)* ')')?
	public CompositeNodeElements getCompositeNodeAccess() {
		return pCompositeNode;
	}
	
	public ParserRule getCompositeNodeRule() {
		return getCompositeNodeAccess().getRule();
	}
	
	//FragmentNode data::FragmentNode:
	//	'.' type=[data::Fragment|QualifiedName] name=ID ('[' cardinality=Cardinality ']')? ('(' options+=Option (","
	//	options+=Option)* ')')?
	public FragmentNodeElements getFragmentNodeAccess() {
		return pFragmentNode;
	}
	
	public ParserRule getFragmentNodeRule() {
		return getFragmentNodeAccess().getRule();
	}
	
	//PrimitiveNode data::PrimitiveNode:
	//	(key?="key" | unique?="unique")?
	//	type=BasicType name=ID ('[' cardinality=Cardinality ']')? ('(' options+=Option ("," options+=Option)* ')')?
	public PrimitiveNodeElements getPrimitiveNodeAccess() {
		return pPrimitiveNode;
	}
	
	public ParserRule getPrimitiveNodeRule() {
		return getPrimitiveNodeAccess().getRule();
	}
	
	//Cardinality data::Cardinality:
	//	min=INT (',' max=INT)?
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//DataDescription data::DataDescription:
	//	'description' format=STRING name=ID (':' fragments+=[data::Fragment|QualifiedName] (','
	//	fragments+=[data::Fragment|QualifiedName])*)? '{'
	//	nodes+=Node nodes+=Node*
	//	'}' ('(' options+=DataOption ("," options+=DataOption)* ')')?
	public DataDescriptionElements getDataDescriptionAccess() {
		return pDataDescription;
	}
	
	public ParserRule getDataDescriptionRule() {
		return getDataDescriptionAccess().getRule();
	}
	
	//Fragment data::Fragment:
	//	'fragment' name=ID (':' fragments+=[data::Fragment|QualifiedName] (',' fragments+=[data::Fragment|QualifiedName])*)?
	//	'{'
	//	nodes+=Node nodes+=Node*
	//	'}'
	public FragmentElements getFragmentAccess() {
		return pFragment;
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}
	
	//DataTypeRefinement data::DataTypeRefinement:
	//	'datatype' name=ID ':' refine=BasicType ('{' (subsequences+=SubstringConcept subsequences+=SubstringConcept*)? '}')?
	//	('(' options+=Option ("," options+=Option)* ')')?
	public DataTypeRefinementElements getDataTypeRefinementAccess() {
		return pDataTypeRefinement;
	}
	
	public ParserRule getDataTypeRefinementRule() {
		return getDataTypeRefinementAccess().getRule();
	}
	
	//Enumeration data::Enumeration:
	//	'enumeration' name=ID "{" values+=STRING (',' values+=STRING)* "}"
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//Option data::Option:
	//	StringOption | IntOption | BooleanOption | DoubleOption | ListQualifiedNameOption
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//StringOption data::StringOption:
	//	key=StringOptionKey '=' value=STRING
	public StringOptionElements getStringOptionAccess() {
		return pStringOption;
	}
	
	public ParserRule getStringOptionRule() {
		return getStringOptionAccess().getRule();
	}
	
	//IntOption data::IntOption:
	//	key=IntOptionKey '=' value=INT
	public IntOptionElements getIntOptionAccess() {
		return pIntOption;
	}
	
	public ParserRule getIntOptionRule() {
		return getIntOptionAccess().getRule();
	}
	
	//DoubleOption data::DoubleOption:
	//	key=DoubleOptionKey '=' value=DOUBLE
	public DoubleOptionElements getDoubleOptionAccess() {
		return pDoubleOption;
	}
	
	public ParserRule getDoubleOptionRule() {
		return getDoubleOptionAccess().getRule();
	}
	
	//BooleanOption data::BooleanOption:
	//	key=BooleanOptionKey '=' value=BOOLEAN
	public BooleanOptionElements getBooleanOptionAccess() {
		return pBooleanOption;
	}
	
	public ParserRule getBooleanOptionRule() {
		return getBooleanOptionAccess().getRule();
	}
	
	//ListQualifiedNameOption data::ListQualifiedNameOption:
	//	key=ListQualifiedNameOptionKey '=' fragments+=[data::Node|QualifiedName]
	public ListQualifiedNameOptionElements getListQualifiedNameOptionAccess() {
		return pListQualifiedNameOption;
	}
	
	public ParserRule getListQualifiedNameOptionRule() {
		return getListQualifiedNameOptionAccess().getRule();
	}
	
	//enum BasicType returns data::BasicType:
	//	string='String' | url='Url' | int='Int' | longInt='LongInt' | real='Real' | date='Date' | time='Time' | year='Year' |
	//	month='Month' | day='Day' | boolean='Boolean' | lat='Lat' | long='Long' | percent='Percent' | email='Email' |
	//	currency='Currency' | creditcard='CreditCard' | IBAN | ISBN | ISSN | inet='Inet';
	public BasicTypeElements getBasicTypeAccess() {
		return eBasicType;
	}
	
	public EnumRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//enum StringOptionKey returns data::StringOptionKey:
	//	null | separator | default | regex | flags | decimalchar | pattern | format;
	public StringOptionKeyElements getStringOptionKeyAccess() {
		return eStringOptionKey;
	}
	
	public EnumRule getStringOptionKeyRule() {
		return getStringOptionKeyAccess().getRule();
	}
	
	//enum IntOptionKey returns data::IntOptionKey:
	//	minLength | maxLength | min | max | default='defaultvalue';
	public IntOptionKeyElements getIntOptionKeyAccess() {
		return eIntOptionKey;
	}
	
	public EnumRule getIntOptionKeyRule() {
		return getIntOptionKeyAccess().getRule();
	}
	
	//enum DoubleOptionKey returns data::DoubleOptionKey:
	//	min='minDouble' | max='maxDouble' | default='defaultvalueDouble';
	public DoubleOptionKeyElements getDoubleOptionKeyAccess() {
		return eDoubleOptionKey;
	}
	
	public EnumRule getDoubleOptionKeyRule() {
		return getDoubleOptionKeyAccess().getRule();
	}
	
	//enum BooleanOptionKey returns data::BooleanOptionKey:
	//	nullable | casesensitive;
	public BooleanOptionKeyElements getBooleanOptionKeyAccess() {
		return eBooleanOptionKey;
	}
	
	public EnumRule getBooleanOptionKeyRule() {
		return getBooleanOptionKeyAccess().getRule();
	}
	
	//enum ListQualifiedNameOptionKey returns data::ListQualifiedNameOptionKey:
	//	order;
	public ListQualifiedNameOptionKeyElements getListQualifiedNameOptionKeyAccess() {
		return eListQualifiedNameOptionKey;
	}
	
	public EnumRule getListQualifiedNameOptionKeyRule() {
		return getListQualifiedNameOptionKeyAccess().getRule();
	}
	
	//DataOption data::DataOption:
	//	key=STRING '=' value=STRING
	public DataOptionElements getDataOptionAccess() {
		return pDataOption;
	}
	
	public ParserRule getDataOptionRule() {
		return getDataOptionAccess().getRule();
	}
	
	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
