/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.datadesc.dataDsl.util;

import eagledata.core.dsl.datadesc.dataDsl.BooleanOption;
import eagledata.core.dsl.datadesc.dataDsl.DataDslPackage;
import eagledata.core.dsl.datadesc.dataDsl.DataFragment;
import eagledata.core.dsl.datadesc.dataDsl.DataModel;
import eagledata.core.dsl.datadesc.dataDsl.DataModelElement;
import eagledata.core.dsl.datadesc.dataDsl.DataOption;
import eagledata.core.dsl.datadesc.dataDsl.DataPackableDescription;
import eagledata.core.dsl.datadesc.dataDsl.DataSourceDescription;
import eagledata.core.dsl.datadesc.dataDsl.DataType;
import eagledata.core.dsl.datadesc.dataDsl.DoubleOption;
import eagledata.core.dsl.datadesc.dataDsl.Enumeration;
import eagledata.core.dsl.datadesc.dataDsl.Import;
import eagledata.core.dsl.datadesc.dataDsl.IntOption;
import eagledata.core.dsl.datadesc.dataDsl.LeafNode;
import eagledata.core.dsl.datadesc.dataDsl.Option;
import eagledata.core.dsl.datadesc.dataDsl.SequenceOption;
import eagledata.core.dsl.datadesc.dataDsl.StringConcept;
import eagledata.core.dsl.datadesc.dataDsl.StringOption;
import eagledata.core.dsl.datadesc.dataDsl.StructDataType;
import eagledata.core.dsl.datadesc.dataDsl.Substring;
import eagledata.core.dsl.datadesc.dataDsl.SubstringConcept;
import eagledata.core.dsl.datadesc.dataDsl.TypeSpecification;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see eagledata.core.dsl.datadesc.dataDsl.DataDslPackage
 * @generated
 */
public class DataDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DataDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DataDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataDslSwitch<Adapter> modelSwitch =
    new DataDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseDataModel(DataModel object)
      {
        return createDataModelAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseDataModelElement(DataModelElement object)
      {
        return createDataModelElementAdapter();
      }
      @Override
      public Adapter casePackage(eagledata.core.dsl.datadesc.dataDsl.Package object)
      {
        return createPackageAdapter();
      }
      @Override
      public Adapter caseDataPackableDescription(DataPackableDescription object)
      {
        return createDataPackableDescriptionAdapter();
      }
      @Override
      public Adapter caseStringConcept(StringConcept object)
      {
        return createStringConceptAdapter();
      }
      @Override
      public Adapter caseSubstringConcept(SubstringConcept object)
      {
        return createSubstringConceptAdapter();
      }
      @Override
      public Adapter caseSubstring(Substring object)
      {
        return createSubstringAdapter();
      }
      @Override
      public Adapter caseCharacter(eagledata.core.dsl.datadesc.dataDsl.Character object)
      {
        return createCharacterAdapter();
      }
      @Override
      public Adapter caseDataSourceDescription(DataSourceDescription object)
      {
        return createDataSourceDescriptionAdapter();
      }
      @Override
      public Adapter caseDataFragment(DataFragment object)
      {
        return createDataFragmentAdapter();
      }
      @Override
      public Adapter caseTypeSpecification(TypeSpecification object)
      {
        return createTypeSpecificationAdapter();
      }
      @Override
      public Adapter caseDataType(DataType object)
      {
        return createDataTypeAdapter();
      }
      @Override
      public Adapter caseEnumeration(Enumeration object)
      {
        return createEnumerationAdapter();
      }
      @Override
      public Adapter caseStructDataType(StructDataType object)
      {
        return createStructDataTypeAdapter();
      }
      @Override
      public Adapter caseLeafNode(LeafNode object)
      {
        return createLeafNodeAdapter();
      }
      @Override
      public Adapter caseOption(Option object)
      {
        return createOptionAdapter();
      }
      @Override
      public Adapter caseStringOption(StringOption object)
      {
        return createStringOptionAdapter();
      }
      @Override
      public Adapter caseIntOption(IntOption object)
      {
        return createIntOptionAdapter();
      }
      @Override
      public Adapter caseDoubleOption(DoubleOption object)
      {
        return createDoubleOptionAdapter();
      }
      @Override
      public Adapter caseBooleanOption(BooleanOption object)
      {
        return createBooleanOptionAdapter();
      }
      @Override
      public Adapter caseSequenceOption(SequenceOption object)
      {
        return createSequenceOptionAdapter();
      }
      @Override
      public Adapter caseDataOption(DataOption object)
      {
        return createDataOptionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.DataModel <em>Data Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.DataModel
   * @generated
   */
  public Adapter createDataModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.DataModelElement <em>Data Model Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.DataModelElement
   * @generated
   */
  public Adapter createDataModelElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.Package <em>Package</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.Package
   * @generated
   */
  public Adapter createPackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.DataPackableDescription <em>Data Packable Description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.DataPackableDescription
   * @generated
   */
  public Adapter createDataPackableDescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.StringConcept <em>String Concept</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.StringConcept
   * @generated
   */
  public Adapter createStringConceptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.SubstringConcept <em>Substring Concept</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.SubstringConcept
   * @generated
   */
  public Adapter createSubstringConceptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.Substring <em>Substring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.Substring
   * @generated
   */
  public Adapter createSubstringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.Character <em>Character</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.Character
   * @generated
   */
  public Adapter createCharacterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.DataSourceDescription <em>Data Source Description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.DataSourceDescription
   * @generated
   */
  public Adapter createDataSourceDescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.DataFragment <em>Data Fragment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.DataFragment
   * @generated
   */
  public Adapter createDataFragmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.TypeSpecification <em>Type Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.TypeSpecification
   * @generated
   */
  public Adapter createTypeSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.DataType <em>Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.DataType
   * @generated
   */
  public Adapter createDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.Enumeration <em>Enumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.Enumeration
   * @generated
   */
  public Adapter createEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.StructDataType <em>Struct Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.StructDataType
   * @generated
   */
  public Adapter createStructDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.LeafNode <em>Leaf Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.LeafNode
   * @generated
   */
  public Adapter createLeafNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.Option <em>Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.Option
   * @generated
   */
  public Adapter createOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.StringOption <em>String Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.StringOption
   * @generated
   */
  public Adapter createStringOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.IntOption <em>Int Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.IntOption
   * @generated
   */
  public Adapter createIntOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.DoubleOption <em>Double Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.DoubleOption
   * @generated
   */
  public Adapter createDoubleOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.BooleanOption <em>Boolean Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.BooleanOption
   * @generated
   */
  public Adapter createBooleanOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.SequenceOption <em>Sequence Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.SequenceOption
   * @generated
   */
  public Adapter createSequenceOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eagledata.core.dsl.datadesc.dataDsl.DataOption <em>Data Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eagledata.core.dsl.datadesc.dataDsl.DataOption
   * @generated
   */
  public Adapter createDataOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DataDslAdapterFactory
