/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.datadesc.dataDsl.impl;

import eagledata.core.dsl.datadesc.dataDsl.AbstractDescription;
import eagledata.core.dsl.datadesc.dataDsl.BasicType;
import eagledata.core.dsl.datadesc.dataDsl.BooleanOption;
import eagledata.core.dsl.datadesc.dataDsl.BooleanOptionKey;
import eagledata.core.dsl.datadesc.dataDsl.Cardinality;
import eagledata.core.dsl.datadesc.dataDsl.CompositeNode;
import eagledata.core.dsl.datadesc.dataDsl.DataDescription;
import eagledata.core.dsl.datadesc.dataDsl.DataDslFactory;
import eagledata.core.dsl.datadesc.dataDsl.DataDslPackage;
import eagledata.core.dsl.datadesc.dataDsl.DataModel;
import eagledata.core.dsl.datadesc.dataDsl.DataModelElement;
import eagledata.core.dsl.datadesc.dataDsl.DataOption;
import eagledata.core.dsl.datadesc.dataDsl.DataTypeRefinement;
import eagledata.core.dsl.datadesc.dataDsl.DoubleOption;
import eagledata.core.dsl.datadesc.dataDsl.DoubleOptionKey;
import eagledata.core.dsl.datadesc.dataDsl.Enumeration;
import eagledata.core.dsl.datadesc.dataDsl.Feed;
import eagledata.core.dsl.datadesc.dataDsl.Fragment;
import eagledata.core.dsl.datadesc.dataDsl.FragmentNode;
import eagledata.core.dsl.datadesc.dataDsl.Import;
import eagledata.core.dsl.datadesc.dataDsl.IntOption;
import eagledata.core.dsl.datadesc.dataDsl.IntOptionKey;
import eagledata.core.dsl.datadesc.dataDsl.ListQualifiedNameOption;
import eagledata.core.dsl.datadesc.dataDsl.ListQualifiedNameOptionKey;
import eagledata.core.dsl.datadesc.dataDsl.Node;
import eagledata.core.dsl.datadesc.dataDsl.Option;
import eagledata.core.dsl.datadesc.dataDsl.PrimitiveNode;
import eagledata.core.dsl.datadesc.dataDsl.SpecificationElement;
import eagledata.core.dsl.datadesc.dataDsl.StringOption;
import eagledata.core.dsl.datadesc.dataDsl.StringOptionKey;
import eagledata.core.dsl.datadesc.dataDsl.Substring;
import eagledata.core.dsl.datadesc.dataDsl.SubstringConcept;
import eagledata.core.dsl.datadesc.dataDsl.Tag;
import eagledata.core.dsl.datadesc.dataDsl.TypeCharacter;
import eagledata.core.dsl.datadesc.dataDsl.TypeSpecification;
import eagledata.core.dsl.datadesc.dataDsl.TypeString;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DataDslFactoryImpl extends EFactoryImpl implements DataDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DataDslFactory init()
  {
    try
    {
      DataDslFactory theDataDslFactory = (DataDslFactory)EPackage.Registry.INSTANCE.getEFactory(DataDslPackage.eNS_URI);
      if (theDataDslFactory != null)
      {
        return theDataDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DataDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DataDslPackage.DATA_MODEL: return createDataModel();
      case DataDslPackage.IMPORT: return createImport();
      case DataDslPackage.DATA_MODEL_ELEMENT: return createDataModelElement();
      case DataDslPackage.PACKAGE: return createPackage();
      case DataDslPackage.TAG: return createTag();
      case DataDslPackage.SPECIFICATION_ELEMENT: return createSpecificationElement();
      case DataDslPackage.TYPE_SPECIFICATION: return createTypeSpecification();
      case DataDslPackage.ABSTRACT_DESCRIPTION: return createAbstractDescription();
      case DataDslPackage.SUBSTRING_CONCEPT: return createSubstringConcept();
      case DataDslPackage.SUBSTRING: return createSubstring();
      case DataDslPackage.CHARACTER: return createCharacter();
      case DataDslPackage.NODE: return createNode();
      case DataDslPackage.COMPOSITE_NODE: return createCompositeNode();
      case DataDslPackage.FRAGMENT_NODE: return createFragmentNode();
      case DataDslPackage.PRIMITIVE_NODE: return createPrimitiveNode();
      case DataDslPackage.CARDINALITY: return createCardinality();
      case DataDslPackage.DATA_DESCRIPTION: return createDataDescription();
      case DataDslPackage.FRAGMENT: return createFragment();
      case DataDslPackage.FEED: return createFeed();
      case DataDslPackage.DATA_TYPE_REFINEMENT: return createDataTypeRefinement();
      case DataDslPackage.ENUMERATION: return createEnumeration();
      case DataDslPackage.OPTION: return createOption();
      case DataDslPackage.STRING_OPTION: return createStringOption();
      case DataDslPackage.INT_OPTION: return createIntOption();
      case DataDslPackage.DOUBLE_OPTION: return createDoubleOption();
      case DataDslPackage.BOOLEAN_OPTION: return createBooleanOption();
      case DataDslPackage.LIST_QUALIFIED_NAME_OPTION: return createListQualifiedNameOption();
      case DataDslPackage.DATA_OPTION: return createDataOption();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DataDslPackage.TYPE_CHARACTER:
        return createTypeCharacterFromString(eDataType, initialValue);
      case DataDslPackage.TYPE_STRING:
        return createTypeStringFromString(eDataType, initialValue);
      case DataDslPackage.BASIC_TYPE:
        return createBasicTypeFromString(eDataType, initialValue);
      case DataDslPackage.STRING_OPTION_KEY:
        return createStringOptionKeyFromString(eDataType, initialValue);
      case DataDslPackage.INT_OPTION_KEY:
        return createIntOptionKeyFromString(eDataType, initialValue);
      case DataDslPackage.DOUBLE_OPTION_KEY:
        return createDoubleOptionKeyFromString(eDataType, initialValue);
      case DataDslPackage.BOOLEAN_OPTION_KEY:
        return createBooleanOptionKeyFromString(eDataType, initialValue);
      case DataDslPackage.LIST_QUALIFIED_NAME_OPTION_KEY:
        return createListQualifiedNameOptionKeyFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DataDslPackage.TYPE_CHARACTER:
        return convertTypeCharacterToString(eDataType, instanceValue);
      case DataDslPackage.TYPE_STRING:
        return convertTypeStringToString(eDataType, instanceValue);
      case DataDslPackage.BASIC_TYPE:
        return convertBasicTypeToString(eDataType, instanceValue);
      case DataDslPackage.STRING_OPTION_KEY:
        return convertStringOptionKeyToString(eDataType, instanceValue);
      case DataDslPackage.INT_OPTION_KEY:
        return convertIntOptionKeyToString(eDataType, instanceValue);
      case DataDslPackage.DOUBLE_OPTION_KEY:
        return convertDoubleOptionKeyToString(eDataType, instanceValue);
      case DataDslPackage.BOOLEAN_OPTION_KEY:
        return convertBooleanOptionKeyToString(eDataType, instanceValue);
      case DataDslPackage.LIST_QUALIFIED_NAME_OPTION_KEY:
        return convertListQualifiedNameOptionKeyToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataModel createDataModel()
  {
    DataModelImpl dataModel = new DataModelImpl();
    return dataModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataModelElement createDataModelElement()
  {
    DataModelElementImpl dataModelElement = new DataModelElementImpl();
    return dataModelElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public eagledata.core.dsl.datadesc.dataDsl.Package createPackage()
  {
    PackageImpl package_ = new PackageImpl();
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tag createTag()
  {
    TagImpl tag = new TagImpl();
    return tag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpecificationElement createSpecificationElement()
  {
    SpecificationElementImpl specificationElement = new SpecificationElementImpl();
    return specificationElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeSpecification createTypeSpecification()
  {
    TypeSpecificationImpl typeSpecification = new TypeSpecificationImpl();
    return typeSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractDescription createAbstractDescription()
  {
    AbstractDescriptionImpl abstractDescription = new AbstractDescriptionImpl();
    return abstractDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubstringConcept createSubstringConcept()
  {
    SubstringConceptImpl substringConcept = new SubstringConceptImpl();
    return substringConcept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Substring createSubstring()
  {
    SubstringImpl substring = new SubstringImpl();
    return substring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public eagledata.core.dsl.datadesc.dataDsl.Character createCharacter()
  {
    CharacterImpl character = new CharacterImpl();
    return character;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompositeNode createCompositeNode()
  {
    CompositeNodeImpl compositeNode = new CompositeNodeImpl();
    return compositeNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FragmentNode createFragmentNode()
  {
    FragmentNodeImpl fragmentNode = new FragmentNodeImpl();
    return fragmentNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveNode createPrimitiveNode()
  {
    PrimitiveNodeImpl primitiveNode = new PrimitiveNodeImpl();
    return primitiveNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cardinality createCardinality()
  {
    CardinalityImpl cardinality = new CardinalityImpl();
    return cardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataDescription createDataDescription()
  {
    DataDescriptionImpl dataDescription = new DataDescriptionImpl();
    return dataDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fragment createFragment()
  {
    FragmentImpl fragment = new FragmentImpl();
    return fragment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feed createFeed()
  {
    FeedImpl feed = new FeedImpl();
    return feed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataTypeRefinement createDataTypeRefinement()
  {
    DataTypeRefinementImpl dataTypeRefinement = new DataTypeRefinementImpl();
    return dataTypeRefinement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Option createOption()
  {
    OptionImpl option = new OptionImpl();
    return option;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringOption createStringOption()
  {
    StringOptionImpl stringOption = new StringOptionImpl();
    return stringOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntOption createIntOption()
  {
    IntOptionImpl intOption = new IntOptionImpl();
    return intOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DoubleOption createDoubleOption()
  {
    DoubleOptionImpl doubleOption = new DoubleOptionImpl();
    return doubleOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanOption createBooleanOption()
  {
    BooleanOptionImpl booleanOption = new BooleanOptionImpl();
    return booleanOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListQualifiedNameOption createListQualifiedNameOption()
  {
    ListQualifiedNameOptionImpl listQualifiedNameOption = new ListQualifiedNameOptionImpl();
    return listQualifiedNameOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataOption createDataOption()
  {
    DataOptionImpl dataOption = new DataOptionImpl();
    return dataOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeCharacter createTypeCharacterFromString(EDataType eDataType, String initialValue)
  {
    TypeCharacter result = TypeCharacter.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTypeCharacterToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeString createTypeStringFromString(EDataType eDataType, String initialValue)
  {
    TypeString result = TypeString.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTypeStringToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicType createBasicTypeFromString(EDataType eDataType, String initialValue)
  {
    BasicType result = BasicType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBasicTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringOptionKey createStringOptionKeyFromString(EDataType eDataType, String initialValue)
  {
    StringOptionKey result = StringOptionKey.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStringOptionKeyToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntOptionKey createIntOptionKeyFromString(EDataType eDataType, String initialValue)
  {
    IntOptionKey result = IntOptionKey.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIntOptionKeyToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DoubleOptionKey createDoubleOptionKeyFromString(EDataType eDataType, String initialValue)
  {
    DoubleOptionKey result = DoubleOptionKey.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDoubleOptionKeyToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanOptionKey createBooleanOptionKeyFromString(EDataType eDataType, String initialValue)
  {
    BooleanOptionKey result = BooleanOptionKey.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBooleanOptionKeyToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListQualifiedNameOptionKey createListQualifiedNameOptionKeyFromString(EDataType eDataType, String initialValue)
  {
    ListQualifiedNameOptionKey result = ListQualifiedNameOptionKey.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertListQualifiedNameOptionKeyToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataDslPackage getDataDslPackage()
  {
    return (DataDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DataDslPackage getPackage()
  {
    return DataDslPackage.eINSTANCE;
  }

} //DataDslFactoryImpl
