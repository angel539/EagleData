/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.pattern.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PatternDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StreamingModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.StreamingModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionsStreamingDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionsAssignment_0.eContents().get(0);
		private final Assignment cDescriptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionsStreamingDescriptionParserRuleCall_1_0 = (RuleCall)cDescriptionsAssignment_1.eContents().get(0);
		
		//StreamingModel streaming::StreamingModel:
		//	descriptions+=StreamingDescription descriptions+=StreamingDescription*
		@Override public ParserRule getRule() { return rule; }
		
		//descriptions+=StreamingDescription descriptions+=StreamingDescription*
		public Group getGroup() { return cGroup; }
		
		//descriptions+=StreamingDescription
		public Assignment getDescriptionsAssignment_0() { return cDescriptionsAssignment_0; }
		
		//StreamingDescription
		public RuleCall getDescriptionsStreamingDescriptionParserRuleCall_0_0() { return cDescriptionsStreamingDescriptionParserRuleCall_0_0; }
		
		//descriptions+=StreamingDescription*
		public Assignment getDescriptionsAssignment_1() { return cDescriptionsAssignment_1; }
		
		//StreamingDescription
		public RuleCall getDescriptionsStreamingDescriptionParserRuleCall_1_0() { return cDescriptionsStreamingDescriptionParserRuleCall_1_0; }
	}
	public class StreamingDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.StreamingDescription");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGeographicalElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPatternMatcherElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StreamingDescription streaming::StremingDescription:
		//	Import | GeographicalElement | PatternMatcherElement
		@Override public ParserRule getRule() { return rule; }
		
		//Import | GeographicalElement | PatternMatcherElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }
		
		//GeographicalElement
		public RuleCall getGeographicalElementParserRuleCall_1() { return cGeographicalElementParserRuleCall_1; }
		
		//PatternMatcherElement
		public RuleCall getPatternMatcherElementParserRuleCall_2() { return cPatternMatcherElementParserRuleCall_2; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import streaming::Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class GeographicalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.GeographicalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GeographicalElement streaming::GeographicalElement:
		//	Place | Region
		@Override public ParserRule getRule() { return rule; }
		
		//Place | Region
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Place
		public RuleCall getPlaceParserRuleCall_0() { return cPlaceParserRuleCall_0; }
		
		//Region
		public RuleCall getRegionParserRuleCall_1() { return cRegionParserRuleCall_1; }
	}
	public class PlaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Place");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPointPointParserRuleCall_3_0 = (RuleCall)cPointAssignment_3.eContents().get(0);
		
		//Place streaming::Place:
		//	'place' name=ID '=' point=Point
		@Override public ParserRule getRule() { return rule; }
		
		//'place' name=ID '=' point=Point
		public Group getGroup() { return cGroup; }
		
		//'place'
		public Keyword getPlaceKeyword_0() { return cPlaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//point=Point
		public Assignment getPointAssignment_3() { return cPointAssignment_3; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_3_0() { return cPointPointParserRuleCall_3_0; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cRadiusAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRadiusDOUBLETerminalRuleCall_0_0_0 = (RuleCall)cRadiusAssignment_0_0.eContents().get(0);
		private final Assignment cMesurementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMesurementDistanceMesurementEnumRuleCall_0_1_0 = (RuleCall)cMesurementAssignment_0_1.eContents().get(0);
		private final Keyword cArroundKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cCoordinatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCoordinatesCoordinateParserRuleCall_1_0 = (RuleCall)cCoordinatesAssignment_1.eContents().get(0);
		
		//Point streaming::Point:
		//	(radius=DOUBLE mesurement=DistanceMesurement 'arround')? coordinates=Coordinate
		@Override public ParserRule getRule() { return rule; }
		
		//(radius=DOUBLE mesurement=DistanceMesurement 'arround')? coordinates=Coordinate
		public Group getGroup() { return cGroup; }
		
		//(radius=DOUBLE mesurement=DistanceMesurement 'arround')?
		public Group getGroup_0() { return cGroup_0; }
		
		//radius=DOUBLE
		public Assignment getRadiusAssignment_0_0() { return cRadiusAssignment_0_0; }
		
		//DOUBLE
		public RuleCall getRadiusDOUBLETerminalRuleCall_0_0_0() { return cRadiusDOUBLETerminalRuleCall_0_0_0; }
		
		//mesurement=DistanceMesurement
		public Assignment getMesurementAssignment_0_1() { return cMesurementAssignment_0_1; }
		
		//DistanceMesurement
		public RuleCall getMesurementDistanceMesurementEnumRuleCall_0_1_0() { return cMesurementDistanceMesurementEnumRuleCall_0_1_0; }
		
		//'arround'
		public Keyword getArroundKeyword_0_2() { return cArroundKeyword_0_2; }
		
		//coordinates=Coordinate
		public Assignment getCoordinatesAssignment_1() { return cCoordinatesAssignment_1; }
		
		//Coordinate
		public RuleCall getCoordinatesCoordinateParserRuleCall_1_0() { return cCoordinatesCoordinateParserRuleCall_1_0; }
	}
	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Coordinate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLatLongParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUTMParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Coordinate streaming::Coordinate:
		//	LatLong | UTM
		@Override public ParserRule getRule() { return rule; }
		
		//LatLong | UTM
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LatLong
		public RuleCall getLatLongParserRuleCall_0() { return cLatLongParserRuleCall_0; }
		
		//UTM
		public RuleCall getUTMParserRuleCall_1() { return cUTMParserRuleCall_1; }
	}
	public class LatLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.LatLong");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLatDOUBLETerminalRuleCall_0_0 = (RuleCall)cLatAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLongAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongDOUBLETerminalRuleCall_2_0 = (RuleCall)cLongAssignment_2.eContents().get(0);
		
		//LatLong streaming::LatitudeLongitude:
		//	lat=DOUBLE "," long=DOUBLE
		@Override public ParserRule getRule() { return rule; }
		
		//lat=DOUBLE "," long=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//lat=DOUBLE
		public Assignment getLatAssignment_0() { return cLatAssignment_0; }
		
		//DOUBLE
		public RuleCall getLatDOUBLETerminalRuleCall_0_0() { return cLatDOUBLETerminalRuleCall_0_0; }
		
		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//long=DOUBLE
		public Assignment getLongAssignment_2() { return cLongAssignment_2; }
		
		//DOUBLE
		public RuleCall getLongDOUBLETerminalRuleCall_2_0() { return cLongDOUBLETerminalRuleCall_2_0; }
	}
	public class UTMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.UTM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUTMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEDOUBLETerminalRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNDOUBLETerminalRuleCall_4_0 = (RuleCall)cNAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cZAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cZDOUBLETerminalRuleCall_6_0 = (RuleCall)cZAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cHemiAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHemiDOUBLETerminalRuleCall_8_0 = (RuleCall)cHemiAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//UTM streaming::UTM:
		//	'UTM' '{' e=DOUBLE "," n=DOUBLE "," z=DOUBLE "," Hemi=DOUBLE '}'
		@Override public ParserRule getRule() { return rule; }
		
		//'UTM' '{' e=DOUBLE "," n=DOUBLE "," z=DOUBLE "," Hemi=DOUBLE '}'
		public Group getGroup() { return cGroup; }
		
		//'UTM'
		public Keyword getUTMKeyword_0() { return cUTMKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//e=DOUBLE
		public Assignment getEAssignment_2() { return cEAssignment_2; }
		
		//DOUBLE
		public RuleCall getEDOUBLETerminalRuleCall_2_0() { return cEDOUBLETerminalRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//n=DOUBLE
		public Assignment getNAssignment_4() { return cNAssignment_4; }
		
		//DOUBLE
		public RuleCall getNDOUBLETerminalRuleCall_4_0() { return cNDOUBLETerminalRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//z=DOUBLE
		public Assignment getZAssignment_6() { return cZAssignment_6; }
		
		//DOUBLE
		public RuleCall getZDOUBLETerminalRuleCall_6_0() { return cZDOUBLETerminalRuleCall_6_0; }
		
		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//Hemi=DOUBLE
		public Assignment getHemiAssignment_8() { return cHemiAssignment_8; }
		
		//DOUBLE
		public RuleCall getHemiDOUBLETerminalRuleCall_8_0() { return cHemiDOUBLETerminalRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSouthWestBoundaryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSouthWestBoundaryPointParserRuleCall_4_0 = (RuleCall)cSouthWestBoundaryAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNorthEastBoundaryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNorthEastBoundaryPointParserRuleCall_6_0 = (RuleCall)cNorthEastBoundaryAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Region streaming::Region:
		//	'region' name=ID '=' '{'
		//	//('contains' '(' contains+=[streaming::GeographicalElement|ID] ( "," contains+=[streaming::GeographicalElement|ID])* ')' )?
		//	southWestBoundary=Point ':' northEastBoundary=Point
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'region' name=ID '=' '{' //('contains' '(' contains+=[streaming::GeographicalElement|ID] ( "," contains+=[streaming::GeographicalElement|ID])* ')' )?
		//southWestBoundary=Point ':' northEastBoundary=Point '}'
		public Group getGroup() { return cGroup; }
		
		//'region'
		public Keyword getRegionKeyword_0() { return cRegionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		////('contains' '(' contains+=[streaming::GeographicalElement|ID] ( "," contains+=[streaming::GeographicalElement|ID])* ')' )?
		//southWestBoundary=Point
		public Assignment getSouthWestBoundaryAssignment_4() { return cSouthWestBoundaryAssignment_4; }
		
		//Point
		public RuleCall getSouthWestBoundaryPointParserRuleCall_4_0() { return cSouthWestBoundaryPointParserRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//northEastBoundary=Point
		public Assignment getNorthEastBoundaryAssignment_6() { return cNorthEastBoundaryAssignment_6; }
		
		//Point
		public RuleCall getNorthEastBoundaryPointParserRuleCall_6_0() { return cNorthEastBoundaryPointParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PatternMatcherElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.PatternMatcherElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConceptParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PatternMatcherElement streaming::PatternMatcherElement:
		//	Phrase | Concept
		@Override public ParserRule getRule() { return rule; }
		
		//Phrase | Concept
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Phrase
		public RuleCall getPhraseParserRuleCall_0() { return cPhraseParserRuleCall_0; }
		
		//Concept
		public RuleCall getConceptParserRuleCall_1() { return cConceptParserRuleCall_1; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTermListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTermParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Concept streaming::Concept:
		//	TermList | Term
		@Override public ParserRule getRule() { return rule; }
		
		//TermList | Term
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TermList
		public RuleCall getTermListParserRuleCall_0() { return cTermListParserRuleCall_0; }
		
		//Term
		public RuleCall getTermParserRuleCall_1() { return cTermParserRuleCall_1; }
	}
	public class TermListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.TermList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyWordListPropertyEnumRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTermsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTermsSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cTermsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTermsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTermsSTRINGTerminalRuleCall_4_2_1_0 = (RuleCall)cTermsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//TermList streaming::TermList:
		//	'list' property=WordListProperty? name=ID '=' ('(' terms+=STRING ("," terms+=STRING)* ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//'list' property=WordListProperty? name=ID '=' ('(' terms+=STRING ("," terms+=STRING)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'list'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//property=WordListProperty?
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//WordListProperty
		public RuleCall getPropertyWordListPropertyEnumRuleCall_1_0() { return cPropertyWordListPropertyEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//('(' terms+=STRING ("," terms+=STRING)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//terms+=STRING
		public Assignment getTermsAssignment_4_1() { return cTermsAssignment_4_1; }
		
		//STRING
		public RuleCall getTermsSTRINGTerminalRuleCall_4_1_0() { return cTermsSTRINGTerminalRuleCall_4_1_0; }
		
		//("," terms+=STRING)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//terms+=STRING
		public Assignment getTermsAssignment_4_2_1() { return cTermsAssignment_4_2_1; }
		
		//STRING
		public RuleCall getTermsSTRINGTerminalRuleCall_4_2_1_0() { return cTermsSTRINGTerminalRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Term");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Term streaming::Term:
		//	name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class PhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Phrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhraseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOrderedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOrderedOrderedKeyword_2_0 = (Keyword)cOrderedAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConceptsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConceptsConceptParserRuleCall_5_0 = (RuleCall)cConceptsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConceptsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConceptsConceptParserRuleCall_6_1_0 = (RuleCall)cConceptsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cOptionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_8_1_0 = (RuleCall)cOptionsAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cOptionsAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_8_2_1_0 = (RuleCall)cOptionsAssignment_8_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//Phrase streaming::Phrase:
		//	'phrase' name=ID ordered?='ordered'? '=' '('
		//	concepts+=Concept ("," concepts+=Concept)*
		//	')' ('{' options+=Option ("," options+=Option)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//'phrase' name=ID ordered?='ordered'? '=' '(' concepts+=Concept ("," concepts+=Concept)* ')' ('{' options+=Option (","
		//options+=Option)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'phrase'
		public Keyword getPhraseKeyword_0() { return cPhraseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//ordered?='ordered'?
		public Assignment getOrderedAssignment_2() { return cOrderedAssignment_2; }
		
		//'ordered'
		public Keyword getOrderedOrderedKeyword_2_0() { return cOrderedOrderedKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//concepts+=Concept
		public Assignment getConceptsAssignment_5() { return cConceptsAssignment_5; }
		
		//Concept
		public RuleCall getConceptsConceptParserRuleCall_5_0() { return cConceptsConceptParserRuleCall_5_0; }
		
		//("," concepts+=Concept)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//concepts+=Concept
		public Assignment getConceptsAssignment_6_1() { return cConceptsAssignment_6_1; }
		
		//Concept
		public RuleCall getConceptsConceptParserRuleCall_6_1_0() { return cConceptsConceptParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0() { return cLeftCurlyBracketKeyword_8_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_8_1() { return cOptionsAssignment_8_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_8_1_0() { return cOptionsOptionParserRuleCall_8_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//","
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_8_2_1() { return cOptionsAssignment_8_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_8_2_1_0() { return cOptionsOptionParserRuleCall_8_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanOptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGeoOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntOptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLanguageOptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSourceOptionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Option streaming::Option:
		//	BooleanOption | GeoOption | IntOption | LanguageOption | SourceOption
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanOption | GeoOption | IntOption | LanguageOption | SourceOption
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanOption
		public RuleCall getBooleanOptionParserRuleCall_0() { return cBooleanOptionParserRuleCall_0; }
		
		//GeoOption
		public RuleCall getGeoOptionParserRuleCall_1() { return cGeoOptionParserRuleCall_1; }
		
		//IntOption
		public RuleCall getIntOptionParserRuleCall_2() { return cIntOptionParserRuleCall_2; }
		
		//LanguageOption
		public RuleCall getLanguageOptionParserRuleCall_3() { return cLanguageOptionParserRuleCall_3; }
		
		//SourceOption
		public RuleCall getSourceOptionParserRuleCall_4() { return cSourceOptionParserRuleCall_4; }
	}
	public class GeoOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.GeoOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyGeoOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueGeographicalElementCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueGeographicalElementQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cValueGeographicalElementCrossReference_2_0.eContents().get(1);
		
		//GeoOption streaming::GeoOption:
		//	key=GeoOptionKey '=' value=[streaming::GeographicalElement|QualifiedName]
		@Override public ParserRule getRule() { return rule; }
		
		//key=GeoOptionKey '=' value=[streaming::GeographicalElement|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//key=GeoOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//GeoOptionKey
		public RuleCall getKeyGeoOptionKeyEnumRuleCall_0_0() { return cKeyGeoOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=[streaming::GeographicalElement|QualifiedName]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//[streaming::GeographicalElement|QualifiedName]
		public CrossReference getValueGeographicalElementCrossReference_2_0() { return cValueGeographicalElementCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getValueGeographicalElementQualifiedNameParserRuleCall_2_0_1() { return cValueGeographicalElementQualifiedNameParserRuleCall_2_0_1; }
	}
	public class SourceOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.SourceOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySourceOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSourceEnumRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SourceOption streaming::SourceOption:
		//	key=SourceOptionKey '=' value=Source
		@Override public ParserRule getRule() { return rule; }
		
		//key=SourceOptionKey '=' value=Source
		public Group getGroup() { return cGroup; }
		
		//key=SourceOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//SourceOptionKey
		public RuleCall getKeySourceOptionKeyEnumRuleCall_0_0() { return cKeySourceOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Source
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Source
		public RuleCall getValueSourceEnumRuleCall_2_0() { return cValueSourceEnumRuleCall_2_0; }
	}
	public class LanguageOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.LanguageOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyLanguageOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLanguageEnumRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//LanguageOption streaming::LanguageOption:
		//	key=LanguageOptionKey '=' value=Language
		@Override public ParserRule getRule() { return rule; }
		
		//key=LanguageOptionKey '=' value=Language
		public Group getGroup() { return cGroup; }
		
		//key=LanguageOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//LanguageOptionKey
		public RuleCall getKeyLanguageOptionKeyEnumRuleCall_0_0() { return cKeyLanguageOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Language
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Language
		public RuleCall getValueLanguageEnumRuleCall_2_0() { return cValueLanguageEnumRuleCall_2_0; }
	}
	public class BooleanOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.BooleanOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyBooleanOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBOOLEANTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//BooleanOption streaming::BooleanOption:
		//	key=BooleanOptionKey '=' value=BOOLEAN
		@Override public ParserRule getRule() { return rule; }
		
		//key=BooleanOptionKey '=' value=BOOLEAN
		public Group getGroup() { return cGroup; }
		
		//key=BooleanOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//BooleanOptionKey
		public RuleCall getKeyBooleanOptionKeyEnumRuleCall_0_0() { return cKeyBooleanOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_2_0() { return cValueBOOLEANTerminalRuleCall_2_0; }
	}
	public class IntOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.IntOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIntOptionKeyEnumRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IntOption streaming::IntOption:
		//	key=IntOptionKey '=' value=INT
		@Override public ParserRule getRule() { return rule; }
		
		//key=IntOptionKey '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//key=IntOptionKey
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//IntOptionKey
		public RuleCall getKeyIntOptionKeyEnumRuleCall_0_0() { return cKeyIntOptionKeyEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	
	public class GeoOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.GeoOptionKey");
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cInInKeyword_0 = (Keyword)cInEnumLiteralDeclaration.eContents().get(0);
		
		//enum GeoOptionKey returns streaming::GeoOptionKey:
		//	in;
		public EnumRule getRule() { return rule; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration() { return cInEnumLiteralDeclaration; }
		
		//'in'
		public Keyword getInInKeyword_0() { return cInInKeyword_0; }
	}
	public class SourceOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.SourceOptionKey");
		private final EnumLiteralDeclaration cSourceEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSourceSourceKeyword_0 = (Keyword)cSourceEnumLiteralDeclaration.eContents().get(0);
		
		//enum SourceOptionKey returns streaming::SourceOptionKey:
		//	source;
		public EnumRule getRule() { return rule; }
		
		//source
		public EnumLiteralDeclaration getSourceEnumLiteralDeclaration() { return cSourceEnumLiteralDeclaration; }
		
		//'source'
		public Keyword getSourceSourceKeyword_0() { return cSourceSourceKeyword_0; }
	}
	public class LanguageOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.LanguageOptionKey");
		private final EnumLiteralDeclaration cLangEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLangLanguageKeyword_0 = (Keyword)cLangEnumLiteralDeclaration.eContents().get(0);
		
		//enum LanguageOptionKey returns streaming::LanguageOptionKey:
		//	lang='language';
		public EnumRule getRule() { return rule; }
		
		//lang='language'
		public EnumLiteralDeclaration getLangEnumLiteralDeclaration() { return cLangEnumLiteralDeclaration; }
		
		//'language'
		public Keyword getLangLanguageKeyword_0() { return cLangLanguageKeyword_0; }
	}
	public class IntOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.IntOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLangEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLangMinretweetKeyword_0_0 = (Keyword)cLangEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSourceEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSourceMinfavoriteKeyword_1_0 = (Keyword)cSourceEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IntOptionKey returns streaming::IntOptionKey:
		//	lang='minretweet' | source="minfavorite";
		public EnumRule getRule() { return rule; }
		
		//lang='minretweet' | source="minfavorite"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lang='minretweet'
		public EnumLiteralDeclaration getLangEnumLiteralDeclaration_0() { return cLangEnumLiteralDeclaration_0; }
		
		//'minretweet'
		public Keyword getLangMinretweetKeyword_0_0() { return cLangMinretweetKeyword_0_0; }
		
		//source="minfavorite"
		public EnumLiteralDeclaration getSourceEnumLiteralDeclaration_1() { return cSourceEnumLiteralDeclaration_1; }
		
		//"minfavorite"
		public Keyword getSourceMinfavoriteKeyword_1_0() { return cSourceMinfavoriteKeyword_1_0; }
	}
	public class BooleanOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.BooleanOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInreplytoEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInreplytoInreplytoKeyword_0_0 = (Keyword)cInreplytoEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRetweetEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRetweetRetweetKeyword_1_0 = (Keyword)cRetweetEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFavoriteEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFavoriteFavoriteKeyword_2_0 = (Keyword)cFavoriteEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BooleanOptionKey returns streaming::BooleanOptionKey:
		//	inreplyto | retweet | favorite;
		public EnumRule getRule() { return rule; }
		
		//inreplyto | retweet | favorite
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//inreplyto
		public EnumLiteralDeclaration getInreplytoEnumLiteralDeclaration_0() { return cInreplytoEnumLiteralDeclaration_0; }
		
		//"inreplyto"
		public Keyword getInreplytoInreplytoKeyword_0_0() { return cInreplytoInreplytoKeyword_0_0; }
		
		//retweet
		public EnumLiteralDeclaration getRetweetEnumLiteralDeclaration_1() { return cRetweetEnumLiteralDeclaration_1; }
		
		//"retweet"
		public Keyword getRetweetRetweetKeyword_1_0() { return cRetweetRetweetKeyword_1_0; }
		
		//favorite
		public EnumLiteralDeclaration getFavoriteEnumLiteralDeclaration_2() { return cFavoriteEnumLiteralDeclaration_2; }
		
		//"favorite"
		public Keyword getFavoriteFavoriteKeyword_2_0() { return cFavoriteFavoriteKeyword_2_0; }
	}
	public class UserOptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.UserOptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInreplytoEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInreplytoInreplytoKeyword_0_0 = (Keyword)cInreplytoEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRetweetEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRetweetRetweetKeyword_1_0 = (Keyword)cRetweetEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFavoriteEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFavoriteFavoriteKeyword_2_0 = (Keyword)cFavoriteEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UserOptionKey returns streaming::UserOptionKey:
		//	inreplyto | retweet | favorite;
		public EnumRule getRule() { return rule; }
		
		//inreplyto | retweet | favorite
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//inreplyto
		public EnumLiteralDeclaration getInreplytoEnumLiteralDeclaration_0() { return cInreplytoEnumLiteralDeclaration_0; }
		
		//"inreplyto"
		public Keyword getInreplytoInreplytoKeyword_0_0() { return cInreplytoInreplytoKeyword_0_0; }
		
		//retweet
		public EnumLiteralDeclaration getRetweetEnumLiteralDeclaration_1() { return cRetweetEnumLiteralDeclaration_1; }
		
		//"retweet"
		public Keyword getRetweetRetweetKeyword_1_0() { return cRetweetRetweetKeyword_1_0; }
		
		//favorite
		public EnumLiteralDeclaration getFavoriteEnumLiteralDeclaration_2() { return cFavoriteEnumLiteralDeclaration_2; }
		
		//"favorite"
		public Keyword getFavoriteFavoriteKeyword_2_0() { return cFavoriteFavoriteKeyword_2_0; }
	}
	public class WordListPropertyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.WordListProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAllAllKeyword_0_0 = (Keyword)cAllEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnyAnyKeyword_1_0 = (Keyword)cAnyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum WordListProperty returns streaming::WordListProperty:
		//	all | any;
		public EnumRule getRule() { return rule; }
		
		//all | any
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//all
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_0() { return cAllEnumLiteralDeclaration_0; }
		
		//'all'
		public Keyword getAllAllKeyword_0_0() { return cAllAllKeyword_0_0; }
		
		//any
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_1() { return cAnyEnumLiteralDeclaration_1; }
		
		//'any'
		public Keyword getAnyAnyKeyword_1_0() { return cAnyAnyKeyword_1_0; }
	}
	public class AttachedElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Attached");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLinksEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLinksLinksKeyword_0_0 = (Keyword)cLinksEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVideosEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVideosVideosKeyword_1_0 = (Keyword)cVideosEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cImgsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cImgsImgsKeyword_2_0 = (Keyword)cImgsEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Attached returns streaming::Attached:
		//	links | videos | imgs;
		public EnumRule getRule() { return rule; }
		
		//links | videos | imgs
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//links
		public EnumLiteralDeclaration getLinksEnumLiteralDeclaration_0() { return cLinksEnumLiteralDeclaration_0; }
		
		//'links'
		public Keyword getLinksLinksKeyword_0_0() { return cLinksLinksKeyword_0_0; }
		
		//videos
		public EnumLiteralDeclaration getVideosEnumLiteralDeclaration_1() { return cVideosEnumLiteralDeclaration_1; }
		
		//'videos'
		public Keyword getVideosVideosKeyword_1_0() { return cVideosVideosKeyword_1_0; }
		
		//imgs
		public EnumLiteralDeclaration getImgsEnumLiteralDeclaration_2() { return cImgsEnumLiteralDeclaration_2; }
		
		//'imgs'
		public Keyword getImgsImgsKeyword_2_0() { return cImgsImgsKeyword_2_0; }
	}
	public class SourceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Source");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndroidEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndroidAndroidKeyword_0_0 = (Keyword)cAndroidEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIosEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIosIosKeyword_1_0 = (Keyword)cIosEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWebEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWebWebKeyword_2_0 = (Keyword)cWebEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAllAllKeyword_3_0 = (Keyword)cAllEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Source returns streaming::Source:
		//	android | ios | web | all;
		public EnumRule getRule() { return rule; }
		
		//android | ios | web | all
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//android
		public EnumLiteralDeclaration getAndroidEnumLiteralDeclaration_0() { return cAndroidEnumLiteralDeclaration_0; }
		
		//'android'
		public Keyword getAndroidAndroidKeyword_0_0() { return cAndroidAndroidKeyword_0_0; }
		
		//ios
		public EnumLiteralDeclaration getIosEnumLiteralDeclaration_1() { return cIosEnumLiteralDeclaration_1; }
		
		//'ios'
		public Keyword getIosIosKeyword_1_0() { return cIosIosKeyword_1_0; }
		
		//web
		public EnumLiteralDeclaration getWebEnumLiteralDeclaration_2() { return cWebEnumLiteralDeclaration_2; }
		
		//'web'
		public Keyword getWebWebKeyword_2_0() { return cWebWebKeyword_2_0; }
		
		//all
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_3() { return cAllEnumLiteralDeclaration_3; }
		
		//'all'
		public Keyword getAllAllKeyword_3_0() { return cAllAllKeyword_3_0; }
	}
	public class DistanceMesurementElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.DistanceMesurement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cKmsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cKmsKmsKeyword_0_0 = (Keyword)cKmsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMilesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMilesMilesKeyword_1_0 = (Keyword)cMilesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMtsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMtsMtsKeyword_2_0 = (Keyword)cMtsEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DistanceMesurement returns streaming::DistanceMesurement:
		//	kms | miles | mts;
		public EnumRule getRule() { return rule; }
		
		//kms | miles | mts
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kms
		public EnumLiteralDeclaration getKmsEnumLiteralDeclaration_0() { return cKmsEnumLiteralDeclaration_0; }
		
		//'kms'
		public Keyword getKmsKmsKeyword_0_0() { return cKmsKmsKeyword_0_0; }
		
		//miles
		public EnumLiteralDeclaration getMilesEnumLiteralDeclaration_1() { return cMilesEnumLiteralDeclaration_1; }
		
		//'miles'
		public Keyword getMilesMilesKeyword_1_0() { return cMilesMilesKeyword_1_0; }
		
		//mts
		public EnumLiteralDeclaration getMtsEnumLiteralDeclaration_2() { return cMtsEnumLiteralDeclaration_2; }
		
		//'mts'
		public Keyword getMtsMtsKeyword_2_0() { return cMtsMtsKeyword_2_0; }
	}
	public class LanguageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.Language");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEnEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEnEnglishKeyword_0_0 = (Keyword)cEnEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEsSpanishKeyword_1_0 = (Keyword)cEsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cZhEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cZhChineseKeyword_2_0 = (Keyword)cZhEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Language returns streaming::Language:
		//	en='english' | es='spanish' | zh='chinese' //....
		//;
		public EnumRule getRule() { return rule; }
		
		//en='english' | es='spanish' | zh='chinese'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//en='english'
		public EnumLiteralDeclaration getEnEnumLiteralDeclaration_0() { return cEnEnumLiteralDeclaration_0; }
		
		//'english'
		public Keyword getEnEnglishKeyword_0_0() { return cEnEnglishKeyword_0_0; }
		
		//es='spanish'
		public EnumLiteralDeclaration getEsEnumLiteralDeclaration_1() { return cEsEnumLiteralDeclaration_1; }
		
		//'spanish'
		public Keyword getEsSpanishKeyword_1_0() { return cEsSpanishKeyword_1_0; }
		
		//zh='chinese'
		public EnumLiteralDeclaration getZhEnumLiteralDeclaration_2() { return cZhEnumLiteralDeclaration_2; }
		
		//'chinese'
		public Keyword getZhChineseKeyword_2_0() { return cZhChineseKeyword_2_0; }
	}
	
	private final StreamingModelElements pStreamingModel;
	private final StreamingDescriptionElements pStreamingDescription;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final GeographicalElementElements pGeographicalElement;
	private final PlaceElements pPlace;
	private final PointElements pPoint;
	private final CoordinateElements pCoordinate;
	private final LatLongElements pLatLong;
	private final UTMElements pUTM;
	private final RegionElements pRegion;
	private final PatternMatcherElementElements pPatternMatcherElement;
	private final ConceptElements pConcept;
	private final TermListElements pTermList;
	private final TermElements pTerm;
	private final PhraseElements pPhrase;
	private final OptionElements pOption;
	private final GeoOptionElements pGeoOption;
	private final SourceOptionElements pSourceOption;
	private final LanguageOptionElements pLanguageOption;
	private final BooleanOptionElements pBooleanOption;
	private final IntOptionElements pIntOption;
	private final TerminalRule tBOOLEAN;
	private final GeoOptionKeyElements eGeoOptionKey;
	private final SourceOptionKeyElements eSourceOptionKey;
	private final LanguageOptionKeyElements eLanguageOptionKey;
	private final IntOptionKeyElements eIntOptionKey;
	private final BooleanOptionKeyElements eBooleanOptionKey;
	private final UserOptionKeyElements eUserOptionKey;
	private final WordListPropertyElements eWordListProperty;
	private final TerminalRule tDOUBLE;
	private final AttachedElements eAttached;
	private final SourceElements eSource;
	private final DistanceMesurementElements eDistanceMesurement;
	private final LanguageElements eLanguage;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PatternDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStreamingModel = new StreamingModelElements();
		this.pStreamingDescription = new StreamingDescriptionElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pGeographicalElement = new GeographicalElementElements();
		this.pPlace = new PlaceElements();
		this.pPoint = new PointElements();
		this.pCoordinate = new CoordinateElements();
		this.pLatLong = new LatLongElements();
		this.pUTM = new UTMElements();
		this.pRegion = new RegionElements();
		this.pPatternMatcherElement = new PatternMatcherElementElements();
		this.pConcept = new ConceptElements();
		this.pTermList = new TermListElements();
		this.pTerm = new TermElements();
		this.pPhrase = new PhraseElements();
		this.pOption = new OptionElements();
		this.pGeoOption = new GeoOptionElements();
		this.pSourceOption = new SourceOptionElements();
		this.pLanguageOption = new LanguageOptionElements();
		this.pBooleanOption = new BooleanOptionElements();
		this.pIntOption = new IntOptionElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.BOOLEAN");
		this.eGeoOptionKey = new GeoOptionKeyElements();
		this.eSourceOptionKey = new SourceOptionKeyElements();
		this.eLanguageOptionKey = new LanguageOptionKeyElements();
		this.eIntOptionKey = new IntOptionKeyElements();
		this.eBooleanOptionKey = new BooleanOptionKeyElements();
		this.eUserOptionKey = new UserOptionKeyElements();
		this.eWordListProperty = new WordListPropertyElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.pattern.PatternDsl.DOUBLE");
		this.eAttached = new AttachedElements();
		this.eSource = new SourceElements();
		this.eDistanceMesurement = new DistanceMesurementElements();
		this.eLanguage = new LanguageElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eagledata.core.dsl.pattern.PatternDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StreamingModel streaming::StreamingModel:
	//	descriptions+=StreamingDescription descriptions+=StreamingDescription*
	public StreamingModelElements getStreamingModelAccess() {
		return pStreamingModel;
	}
	
	public ParserRule getStreamingModelRule() {
		return getStreamingModelAccess().getRule();
	}
	
	//StreamingDescription streaming::StremingDescription:
	//	Import | GeographicalElement | PatternMatcherElement
	public StreamingDescriptionElements getStreamingDescriptionAccess() {
		return pStreamingDescription;
	}
	
	public ParserRule getStreamingDescriptionRule() {
		return getStreamingDescriptionAccess().getRule();
	}
	
	//Import streaming::Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//GeographicalElement streaming::GeographicalElement:
	//	Place | Region
	public GeographicalElementElements getGeographicalElementAccess() {
		return pGeographicalElement;
	}
	
	public ParserRule getGeographicalElementRule() {
		return getGeographicalElementAccess().getRule();
	}
	
	//Place streaming::Place:
	//	'place' name=ID '=' point=Point
	public PlaceElements getPlaceAccess() {
		return pPlace;
	}
	
	public ParserRule getPlaceRule() {
		return getPlaceAccess().getRule();
	}
	
	//Point streaming::Point:
	//	(radius=DOUBLE mesurement=DistanceMesurement 'arround')? coordinates=Coordinate
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//Coordinate streaming::Coordinate:
	//	LatLong | UTM
	public CoordinateElements getCoordinateAccess() {
		return pCoordinate;
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}
	
	//LatLong streaming::LatitudeLongitude:
	//	lat=DOUBLE "," long=DOUBLE
	public LatLongElements getLatLongAccess() {
		return pLatLong;
	}
	
	public ParserRule getLatLongRule() {
		return getLatLongAccess().getRule();
	}
	
	//UTM streaming::UTM:
	//	'UTM' '{' e=DOUBLE "," n=DOUBLE "," z=DOUBLE "," Hemi=DOUBLE '}'
	public UTMElements getUTMAccess() {
		return pUTM;
	}
	
	public ParserRule getUTMRule() {
		return getUTMAccess().getRule();
	}
	
	//Region streaming::Region:
	//	'region' name=ID '=' '{'
	//	//('contains' '(' contains+=[streaming::GeographicalElement|ID] ( "," contains+=[streaming::GeographicalElement|ID])* ')' )?
	//	southWestBoundary=Point ':' northEastBoundary=Point
	//	'}'
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}
	
	//PatternMatcherElement streaming::PatternMatcherElement:
	//	Phrase | Concept
	public PatternMatcherElementElements getPatternMatcherElementAccess() {
		return pPatternMatcherElement;
	}
	
	public ParserRule getPatternMatcherElementRule() {
		return getPatternMatcherElementAccess().getRule();
	}
	
	//Concept streaming::Concept:
	//	TermList | Term
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//TermList streaming::TermList:
	//	'list' property=WordListProperty? name=ID '=' ('(' terms+=STRING ("," terms+=STRING)* ')')?
	public TermListElements getTermListAccess() {
		return pTermList;
	}
	
	public ParserRule getTermListRule() {
		return getTermListAccess().getRule();
	}
	
	//Term streaming::Term:
	//	name=ID
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Phrase streaming::Phrase:
	//	'phrase' name=ID ordered?='ordered'? '=' '('
	//	concepts+=Concept ("," concepts+=Concept)*
	//	')' ('{' options+=Option ("," options+=Option)* '}')?
	public PhraseElements getPhraseAccess() {
		return pPhrase;
	}
	
	public ParserRule getPhraseRule() {
		return getPhraseAccess().getRule();
	}
	
	//Option streaming::Option:
	//	BooleanOption | GeoOption | IntOption | LanguageOption | SourceOption
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//GeoOption streaming::GeoOption:
	//	key=GeoOptionKey '=' value=[streaming::GeographicalElement|QualifiedName]
	public GeoOptionElements getGeoOptionAccess() {
		return pGeoOption;
	}
	
	public ParserRule getGeoOptionRule() {
		return getGeoOptionAccess().getRule();
	}
	
	//SourceOption streaming::SourceOption:
	//	key=SourceOptionKey '=' value=Source
	public SourceOptionElements getSourceOptionAccess() {
		return pSourceOption;
	}
	
	public ParserRule getSourceOptionRule() {
		return getSourceOptionAccess().getRule();
	}
	
	//LanguageOption streaming::LanguageOption:
	//	key=LanguageOptionKey '=' value=Language
	public LanguageOptionElements getLanguageOptionAccess() {
		return pLanguageOption;
	}
	
	public ParserRule getLanguageOptionRule() {
		return getLanguageOptionAccess().getRule();
	}
	
	//BooleanOption streaming::BooleanOption:
	//	key=BooleanOptionKey '=' value=BOOLEAN
	public BooleanOptionElements getBooleanOptionAccess() {
		return pBooleanOption;
	}
	
	public ParserRule getBooleanOptionRule() {
		return getBooleanOptionAccess().getRule();
	}
	
	//IntOption streaming::IntOption:
	//	key=IntOptionKey '=' value=INT
	public IntOptionElements getIntOptionAccess() {
		return pIntOption;
	}
	
	public ParserRule getIntOptionRule() {
		return getIntOptionAccess().getRule();
	}
	
	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//enum GeoOptionKey returns streaming::GeoOptionKey:
	//	in;
	public GeoOptionKeyElements getGeoOptionKeyAccess() {
		return eGeoOptionKey;
	}
	
	public EnumRule getGeoOptionKeyRule() {
		return getGeoOptionKeyAccess().getRule();
	}
	
	//enum SourceOptionKey returns streaming::SourceOptionKey:
	//	source;
	public SourceOptionKeyElements getSourceOptionKeyAccess() {
		return eSourceOptionKey;
	}
	
	public EnumRule getSourceOptionKeyRule() {
		return getSourceOptionKeyAccess().getRule();
	}
	
	//enum LanguageOptionKey returns streaming::LanguageOptionKey:
	//	lang='language';
	public LanguageOptionKeyElements getLanguageOptionKeyAccess() {
		return eLanguageOptionKey;
	}
	
	public EnumRule getLanguageOptionKeyRule() {
		return getLanguageOptionKeyAccess().getRule();
	}
	
	//enum IntOptionKey returns streaming::IntOptionKey:
	//	lang='minretweet' | source="minfavorite";
	public IntOptionKeyElements getIntOptionKeyAccess() {
		return eIntOptionKey;
	}
	
	public EnumRule getIntOptionKeyRule() {
		return getIntOptionKeyAccess().getRule();
	}
	
	//enum BooleanOptionKey returns streaming::BooleanOptionKey:
	//	inreplyto | retweet | favorite;
	public BooleanOptionKeyElements getBooleanOptionKeyAccess() {
		return eBooleanOptionKey;
	}
	
	public EnumRule getBooleanOptionKeyRule() {
		return getBooleanOptionKeyAccess().getRule();
	}
	
	//enum UserOptionKey returns streaming::UserOptionKey:
	//	inreplyto | retweet | favorite;
	public UserOptionKeyElements getUserOptionKeyAccess() {
		return eUserOptionKey;
	}
	
	public EnumRule getUserOptionKeyRule() {
		return getUserOptionKeyAccess().getRule();
	}
	
	//enum WordListProperty returns streaming::WordListProperty:
	//	all | any;
	public WordListPropertyElements getWordListPropertyAccess() {
		return eWordListProperty;
	}
	
	public EnumRule getWordListPropertyRule() {
		return getWordListPropertyAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//enum Attached returns streaming::Attached:
	//	links | videos | imgs;
	public AttachedElements getAttachedAccess() {
		return eAttached;
	}
	
	public EnumRule getAttachedRule() {
		return getAttachedAccess().getRule();
	}
	
	//enum Source returns streaming::Source:
	//	android | ios | web | all;
	public SourceElements getSourceAccess() {
		return eSource;
	}
	
	public EnumRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//enum DistanceMesurement returns streaming::DistanceMesurement:
	//	kms | miles | mts;
	public DistanceMesurementElements getDistanceMesurementAccess() {
		return eDistanceMesurement;
	}
	
	public EnumRule getDistanceMesurementRule() {
		return getDistanceMesurementAccess().getRule();
	}
	
	//enum Language returns streaming::Language:
	//	en='english' | es='spanish' | zh='chinese' //....
	//;
	public LanguageElements getLanguageAccess() {
		return eLanguage;
	}
	
	public EnumRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
