/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.pattern.ide.contentassist.antlr;

import com.google.inject.Inject;
import eagledata.core.dsl.pattern.ide.contentassist.antlr.internal.InternalPatternDslParser;
import eagledata.core.dsl.pattern.services.PatternDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class PatternDslParser extends AbstractContentAssistParser {

	@Inject
	private PatternDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalPatternDslParser createParser() {
		InternalPatternDslParser result = new InternalPatternDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStreamingDescriptionAccess().getAlternatives(), "rule__StreamingDescription__Alternatives");
					put(grammarAccess.getGeographicalElementAccess().getAlternatives(), "rule__GeographicalElement__Alternatives");
					put(grammarAccess.getCoordinateAccess().getAlternatives(), "rule__Coordinate__Alternatives");
					put(grammarAccess.getPatternMatcherElementAccess().getAlternatives(), "rule__PatternMatcherElement__Alternatives");
					put(grammarAccess.getConceptAccess().getAlternatives(), "rule__Concept__Alternatives");
					put(grammarAccess.getOptionAccess().getAlternatives(), "rule__Option__Alternatives");
					put(grammarAccess.getIntOptionKeyAccess().getAlternatives(), "rule__IntOptionKey__Alternatives");
					put(grammarAccess.getBooleanOptionKeyAccess().getAlternatives(), "rule__BooleanOptionKey__Alternatives");
					put(grammarAccess.getUserOptionKeyAccess().getAlternatives(), "rule__UserOptionKey__Alternatives");
					put(grammarAccess.getWordListPropertyAccess().getAlternatives(), "rule__WordListProperty__Alternatives");
					put(grammarAccess.getAttachedAccess().getAlternatives(), "rule__Attached__Alternatives");
					put(grammarAccess.getSourceAccess().getAlternatives(), "rule__Source__Alternatives");
					put(grammarAccess.getDistanceMesurementAccess().getAlternatives(), "rule__DistanceMesurement__Alternatives");
					put(grammarAccess.getLanguageAccess().getAlternatives(), "rule__Language__Alternatives");
					put(grammarAccess.getStreamingModelAccess().getGroup(), "rule__StreamingModel__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getPlaceAccess().getGroup(), "rule__Place__Group__0");
					put(grammarAccess.getPointAccess().getGroup(), "rule__Point__Group__0");
					put(grammarAccess.getPointAccess().getGroup_0(), "rule__Point__Group_0__0");
					put(grammarAccess.getLatLongAccess().getGroup(), "rule__LatLong__Group__0");
					put(grammarAccess.getUTMAccess().getGroup(), "rule__UTM__Group__0");
					put(grammarAccess.getRegionAccess().getGroup(), "rule__Region__Group__0");
					put(grammarAccess.getTermListAccess().getGroup(), "rule__TermList__Group__0");
					put(grammarAccess.getTermListAccess().getGroup_4(), "rule__TermList__Group_4__0");
					put(grammarAccess.getTermListAccess().getGroup_4_2(), "rule__TermList__Group_4_2__0");
					put(grammarAccess.getPhraseAccess().getGroup(), "rule__Phrase__Group__0");
					put(grammarAccess.getPhraseAccess().getGroup_6(), "rule__Phrase__Group_6__0");
					put(grammarAccess.getPhraseAccess().getGroup_8(), "rule__Phrase__Group_8__0");
					put(grammarAccess.getPhraseAccess().getGroup_8_2(), "rule__Phrase__Group_8_2__0");
					put(grammarAccess.getGeoOptionAccess().getGroup(), "rule__GeoOption__Group__0");
					put(grammarAccess.getSourceOptionAccess().getGroup(), "rule__SourceOption__Group__0");
					put(grammarAccess.getLanguageOptionAccess().getGroup(), "rule__LanguageOption__Group__0");
					put(grammarAccess.getBooleanOptionAccess().getGroup(), "rule__BooleanOption__Group__0");
					put(grammarAccess.getIntOptionAccess().getGroup(), "rule__IntOption__Group__0");
					put(grammarAccess.getStreamingModelAccess().getDescriptionsAssignment_0(), "rule__StreamingModel__DescriptionsAssignment_0");
					put(grammarAccess.getStreamingModelAccess().getDescriptionsAssignment_1(), "rule__StreamingModel__DescriptionsAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getPlaceAccess().getNameAssignment_1(), "rule__Place__NameAssignment_1");
					put(grammarAccess.getPlaceAccess().getPointAssignment_3(), "rule__Place__PointAssignment_3");
					put(grammarAccess.getPointAccess().getRadiusAssignment_0_0(), "rule__Point__RadiusAssignment_0_0");
					put(grammarAccess.getPointAccess().getMesurementAssignment_0_1(), "rule__Point__MesurementAssignment_0_1");
					put(grammarAccess.getPointAccess().getCoordinatesAssignment_1(), "rule__Point__CoordinatesAssignment_1");
					put(grammarAccess.getLatLongAccess().getLatAssignment_0(), "rule__LatLong__LatAssignment_0");
					put(grammarAccess.getLatLongAccess().getLongAssignment_2(), "rule__LatLong__LongAssignment_2");
					put(grammarAccess.getUTMAccess().getEAssignment_2(), "rule__UTM__EAssignment_2");
					put(grammarAccess.getUTMAccess().getNAssignment_4(), "rule__UTM__NAssignment_4");
					put(grammarAccess.getUTMAccess().getZAssignment_6(), "rule__UTM__ZAssignment_6");
					put(grammarAccess.getUTMAccess().getHemiAssignment_8(), "rule__UTM__HemiAssignment_8");
					put(grammarAccess.getRegionAccess().getNameAssignment_1(), "rule__Region__NameAssignment_1");
					put(grammarAccess.getRegionAccess().getSouthWestBoundaryAssignment_4(), "rule__Region__SouthWestBoundaryAssignment_4");
					put(grammarAccess.getRegionAccess().getNorthEastBoundaryAssignment_6(), "rule__Region__NorthEastBoundaryAssignment_6");
					put(grammarAccess.getTermListAccess().getPropertyAssignment_1(), "rule__TermList__PropertyAssignment_1");
					put(grammarAccess.getTermListAccess().getNameAssignment_2(), "rule__TermList__NameAssignment_2");
					put(grammarAccess.getTermListAccess().getTermsAssignment_4_1(), "rule__TermList__TermsAssignment_4_1");
					put(grammarAccess.getTermListAccess().getTermsAssignment_4_2_1(), "rule__TermList__TermsAssignment_4_2_1");
					put(grammarAccess.getTermAccess().getNameAssignment(), "rule__Term__NameAssignment");
					put(grammarAccess.getPhraseAccess().getNameAssignment_1(), "rule__Phrase__NameAssignment_1");
					put(grammarAccess.getPhraseAccess().getOrderedAssignment_2(), "rule__Phrase__OrderedAssignment_2");
					put(grammarAccess.getPhraseAccess().getConceptsAssignment_5(), "rule__Phrase__ConceptsAssignment_5");
					put(grammarAccess.getPhraseAccess().getConceptsAssignment_6_1(), "rule__Phrase__ConceptsAssignment_6_1");
					put(grammarAccess.getPhraseAccess().getOptionsAssignment_8_1(), "rule__Phrase__OptionsAssignment_8_1");
					put(grammarAccess.getPhraseAccess().getOptionsAssignment_8_2_1(), "rule__Phrase__OptionsAssignment_8_2_1");
					put(grammarAccess.getGeoOptionAccess().getKeyAssignment_0(), "rule__GeoOption__KeyAssignment_0");
					put(grammarAccess.getGeoOptionAccess().getValueAssignment_2(), "rule__GeoOption__ValueAssignment_2");
					put(grammarAccess.getSourceOptionAccess().getKeyAssignment_0(), "rule__SourceOption__KeyAssignment_0");
					put(grammarAccess.getSourceOptionAccess().getValueAssignment_2(), "rule__SourceOption__ValueAssignment_2");
					put(grammarAccess.getLanguageOptionAccess().getKeyAssignment_0(), "rule__LanguageOption__KeyAssignment_0");
					put(grammarAccess.getLanguageOptionAccess().getValueAssignment_2(), "rule__LanguageOption__ValueAssignment_2");
					put(grammarAccess.getBooleanOptionAccess().getKeyAssignment_0(), "rule__BooleanOption__KeyAssignment_0");
					put(grammarAccess.getBooleanOptionAccess().getValueAssignment_2(), "rule__BooleanOption__ValueAssignment_2");
					put(grammarAccess.getIntOptionAccess().getKeyAssignment_0(), "rule__IntOption__KeyAssignment_0");
					put(grammarAccess.getIntOptionAccess().getValueAssignment_2(), "rule__IntOption__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalPatternDslParser typedParser = (InternalPatternDslParser) parser;
			typedParser.entryRuleStreamingModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PatternDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PatternDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
