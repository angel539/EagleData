/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.datadesc.ide.contentassist.antlr;

import com.google.inject.Inject;
import eagledata.core.dsl.datadesc.ide.contentassist.antlr.internal.InternalDataDslParser;
import eagledata.core.dsl.datadesc.services.DataDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class DataDslParser extends AbstractContentAssistParser {

	@Inject
	private DataDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDataDslParser createParser() {
		InternalDataDslParser result = new InternalDataDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDataModelElementAccess().getAlternatives(), "rule__DataModelElement__Alternatives");
					put(grammarAccess.getSpecificationElementAccess().getAlternatives(), "rule__SpecificationElement__Alternatives");
					put(grammarAccess.getTypeSpecificationAccess().getAlternatives(), "rule__TypeSpecification__Alternatives");
					put(grammarAccess.getAbstractDescriptionAccess().getAlternatives(), "rule__AbstractDescription__Alternatives");
					put(grammarAccess.getSubstringConceptAccess().getAlternatives(), "rule__SubstringConcept__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getCompositeNodeAccess().getAlternatives_0(), "rule__CompositeNode__Alternatives_0");
					put(grammarAccess.getPrimitiveNodeAccess().getAlternatives_0(), "rule__PrimitiveNode__Alternatives_0");
					put(grammarAccess.getOptionAccess().getAlternatives(), "rule__Option__Alternatives");
					put(grammarAccess.getTypeCharacterAccess().getAlternatives(), "rule__TypeCharacter__Alternatives");
					put(grammarAccess.getTypeStringAccess().getAlternatives(), "rule__TypeString__Alternatives");
					put(grammarAccess.getBasicTypeAccess().getAlternatives(), "rule__BasicType__Alternatives");
					put(grammarAccess.getStringOptionKeyAccess().getAlternatives(), "rule__StringOptionKey__Alternatives");
					put(grammarAccess.getIntOptionKeyAccess().getAlternatives(), "rule__IntOptionKey__Alternatives");
					put(grammarAccess.getDoubleOptionKeyAccess().getAlternatives(), "rule__DoubleOptionKey__Alternatives");
					put(grammarAccess.getBooleanOptionKeyAccess().getAlternatives(), "rule__BooleanOptionKey__Alternatives");
					put(grammarAccess.getDataModelAccess().getGroup(), "rule__DataModel__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getPackageAccess().getGroup_0(), "rule__Package__Group_0__0");
					put(grammarAccess.getTagAccess().getGroup(), "rule__Tag__Group__0");
					put(grammarAccess.getSubstringAccess().getGroup(), "rule__Substring__Group__0");
					put(grammarAccess.getCharacterAccess().getGroup(), "rule__Character__Group__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup(), "rule__CompositeNode__Group__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_3(), "rule__CompositeNode__Group_3__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_4(), "rule__CompositeNode__Group_4__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_4_2(), "rule__CompositeNode__Group_4_2__0");
					put(grammarAccess.getFragmentNodeAccess().getGroup(), "rule__FragmentNode__Group__0");
					put(grammarAccess.getFragmentNodeAccess().getGroup_3(), "rule__FragmentNode__Group_3__0");
					put(grammarAccess.getFragmentNodeAccess().getGroup_4(), "rule__FragmentNode__Group_4__0");
					put(grammarAccess.getFragmentNodeAccess().getGroup_4_2(), "rule__FragmentNode__Group_4_2__0");
					put(grammarAccess.getPrimitiveNodeAccess().getGroup(), "rule__PrimitiveNode__Group__0");
					put(grammarAccess.getPrimitiveNodeAccess().getGroup_3(), "rule__PrimitiveNode__Group_3__0");
					put(grammarAccess.getPrimitiveNodeAccess().getGroup_4(), "rule__PrimitiveNode__Group_4__0");
					put(grammarAccess.getPrimitiveNodeAccess().getGroup_4_2(), "rule__PrimitiveNode__Group_4_2__0");
					put(grammarAccess.getCardinalityAccess().getGroup(), "rule__Cardinality__Group__0");
					put(grammarAccess.getCardinalityAccess().getGroup_1(), "rule__Cardinality__Group_1__0");
					put(grammarAccess.getDataDescriptionAccess().getGroup(), "rule__DataDescription__Group__0");
					put(grammarAccess.getDataDescriptionAccess().getGroup_3(), "rule__DataDescription__Group_3__0");
					put(grammarAccess.getDataDescriptionAccess().getGroup_3_2(), "rule__DataDescription__Group_3_2__0");
					put(grammarAccess.getDataDescriptionAccess().getGroup_5(), "rule__DataDescription__Group_5__0");
					put(grammarAccess.getDataDescriptionAccess().getGroup_7(), "rule__DataDescription__Group_7__0");
					put(grammarAccess.getDataDescriptionAccess().getGroup_7_2(), "rule__DataDescription__Group_7_2__0");
					put(grammarAccess.getFragmentAccess().getGroup(), "rule__Fragment__Group__0");
					put(grammarAccess.getFragmentAccess().getGroup_2(), "rule__Fragment__Group_2__0");
					put(grammarAccess.getFragmentAccess().getGroup_2_2(), "rule__Fragment__Group_2_2__0");
					put(grammarAccess.getFeedAccess().getGroup(), "rule__Feed__Group__0");
					put(grammarAccess.getDataTypeRefinementAccess().getGroup(), "rule__DataTypeRefinement__Group__0");
					put(grammarAccess.getDataTypeRefinementAccess().getGroup_4(), "rule__DataTypeRefinement__Group_4__0");
					put(grammarAccess.getDataTypeRefinementAccess().getGroup_4_1(), "rule__DataTypeRefinement__Group_4_1__0");
					put(grammarAccess.getDataTypeRefinementAccess().getGroup_5(), "rule__DataTypeRefinement__Group_5__0");
					put(grammarAccess.getDataTypeRefinementAccess().getGroup_5_2(), "rule__DataTypeRefinement__Group_5_2__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup_4(), "rule__Enumeration__Group_4__0");
					put(grammarAccess.getStringOptionAccess().getGroup(), "rule__StringOption__Group__0");
					put(grammarAccess.getIntOptionAccess().getGroup(), "rule__IntOption__Group__0");
					put(grammarAccess.getDoubleOptionAccess().getGroup(), "rule__DoubleOption__Group__0");
					put(grammarAccess.getBooleanOptionAccess().getGroup(), "rule__BooleanOption__Group__0");
					put(grammarAccess.getListQualifiedNameOptionAccess().getGroup(), "rule__ListQualifiedNameOption__Group__0");
					put(grammarAccess.getDataOptionAccess().getGroup(), "rule__DataOption__Group__0");
					put(grammarAccess.getDataModelAccess().getElementsAssignment_1(), "rule__DataModel__ElementsAssignment_1");
					put(grammarAccess.getDataModelAccess().getElementsAssignment_2(), "rule__DataModel__ElementsAssignment_2");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getPackageAccess().getTagsAssignment_0_0(), "rule__Package__TagsAssignment_0_0");
					put(grammarAccess.getPackageAccess().getTagsAssignment_0_1(), "rule__Package__TagsAssignment_0_1");
					put(grammarAccess.getPackageAccess().getNameAssignment_2(), "rule__Package__NameAssignment_2");
					put(grammarAccess.getPackageAccess().getElementsAssignment_4(), "rule__Package__ElementsAssignment_4");
					put(grammarAccess.getPackageAccess().getElementsAssignment_5(), "rule__Package__ElementsAssignment_5");
					put(grammarAccess.getTagAccess().getTagAssignment_1(), "rule__Tag__TagAssignment_1");
					put(grammarAccess.getSubstringAccess().getTypeStringAssignment_0(), "rule__Substring__TypeStringAssignment_0");
					put(grammarAccess.getSubstringAccess().getNameAssignment_1(), "rule__Substring__NameAssignment_1");
					put(grammarAccess.getSubstringAccess().getMinlengthAssignment_3(), "rule__Substring__MinlengthAssignment_3");
					put(grammarAccess.getSubstringAccess().getMaxlengthAssignment_5(), "rule__Substring__MaxlengthAssignment_5");
					put(grammarAccess.getCharacterAccess().getTypeCharacterAssignment_0(), "rule__Character__TypeCharacterAssignment_0");
					put(grammarAccess.getCharacterAccess().getNameAssignment_1(), "rule__Character__NameAssignment_1");
					put(grammarAccess.getCharacterAccess().getValueAssignment_2(), "rule__Character__ValueAssignment_2");
					put(grammarAccess.getCompositeNodeAccess().getKeyAssignment_0_0(), "rule__CompositeNode__KeyAssignment_0_0");
					put(grammarAccess.getCompositeNodeAccess().getUniqueAssignment_0_1(), "rule__CompositeNode__UniqueAssignment_0_1");
					put(grammarAccess.getCompositeNodeAccess().getTypeAssignment_1(), "rule__CompositeNode__TypeAssignment_1");
					put(grammarAccess.getCompositeNodeAccess().getNameAssignment_2(), "rule__CompositeNode__NameAssignment_2");
					put(grammarAccess.getCompositeNodeAccess().getCardinalityAssignment_3_1(), "rule__CompositeNode__CardinalityAssignment_3_1");
					put(grammarAccess.getCompositeNodeAccess().getOptionsAssignment_4_1(), "rule__CompositeNode__OptionsAssignment_4_1");
					put(grammarAccess.getCompositeNodeAccess().getOptionsAssignment_4_2_1(), "rule__CompositeNode__OptionsAssignment_4_2_1");
					put(grammarAccess.getFragmentNodeAccess().getTypeAssignment_1(), "rule__FragmentNode__TypeAssignment_1");
					put(grammarAccess.getFragmentNodeAccess().getNameAssignment_2(), "rule__FragmentNode__NameAssignment_2");
					put(grammarAccess.getFragmentNodeAccess().getCardinalityAssignment_3_1(), "rule__FragmentNode__CardinalityAssignment_3_1");
					put(grammarAccess.getFragmentNodeAccess().getOptionsAssignment_4_1(), "rule__FragmentNode__OptionsAssignment_4_1");
					put(grammarAccess.getFragmentNodeAccess().getOptionsAssignment_4_2_1(), "rule__FragmentNode__OptionsAssignment_4_2_1");
					put(grammarAccess.getPrimitiveNodeAccess().getKeyAssignment_0_0(), "rule__PrimitiveNode__KeyAssignment_0_0");
					put(grammarAccess.getPrimitiveNodeAccess().getUniqueAssignment_0_1(), "rule__PrimitiveNode__UniqueAssignment_0_1");
					put(grammarAccess.getPrimitiveNodeAccess().getTypeAssignment_1(), "rule__PrimitiveNode__TypeAssignment_1");
					put(grammarAccess.getPrimitiveNodeAccess().getNameAssignment_2(), "rule__PrimitiveNode__NameAssignment_2");
					put(grammarAccess.getPrimitiveNodeAccess().getCardinalityAssignment_3_1(), "rule__PrimitiveNode__CardinalityAssignment_3_1");
					put(grammarAccess.getPrimitiveNodeAccess().getOptionsAssignment_4_1(), "rule__PrimitiveNode__OptionsAssignment_4_1");
					put(grammarAccess.getPrimitiveNodeAccess().getOptionsAssignment_4_2_1(), "rule__PrimitiveNode__OptionsAssignment_4_2_1");
					put(grammarAccess.getCardinalityAccess().getMinAssignment_0(), "rule__Cardinality__MinAssignment_0");
					put(grammarAccess.getCardinalityAccess().getMaxAssignment_1_1(), "rule__Cardinality__MaxAssignment_1_1");
					put(grammarAccess.getDataDescriptionAccess().getFormatAssignment_1(), "rule__DataDescription__FormatAssignment_1");
					put(grammarAccess.getDataDescriptionAccess().getNameAssignment_2(), "rule__DataDescription__NameAssignment_2");
					put(grammarAccess.getDataDescriptionAccess().getFragmentsAssignment_3_1(), "rule__DataDescription__FragmentsAssignment_3_1");
					put(grammarAccess.getDataDescriptionAccess().getFragmentsAssignment_3_2_1(), "rule__DataDescription__FragmentsAssignment_3_2_1");
					put(grammarAccess.getDataDescriptionAccess().getNodesAssignment_5_0(), "rule__DataDescription__NodesAssignment_5_0");
					put(grammarAccess.getDataDescriptionAccess().getNodesAssignment_5_1(), "rule__DataDescription__NodesAssignment_5_1");
					put(grammarAccess.getDataDescriptionAccess().getOptionsAssignment_7_1(), "rule__DataDescription__OptionsAssignment_7_1");
					put(grammarAccess.getDataDescriptionAccess().getOptionsAssignment_7_2_1(), "rule__DataDescription__OptionsAssignment_7_2_1");
					put(grammarAccess.getFragmentAccess().getNameAssignment_1(), "rule__Fragment__NameAssignment_1");
					put(grammarAccess.getFragmentAccess().getFragmentsAssignment_2_1(), "rule__Fragment__FragmentsAssignment_2_1");
					put(grammarAccess.getFragmentAccess().getFragmentsAssignment_2_2_1(), "rule__Fragment__FragmentsAssignment_2_2_1");
					put(grammarAccess.getFragmentAccess().getNodesAssignment_4(), "rule__Fragment__NodesAssignment_4");
					put(grammarAccess.getFragmentAccess().getNodesAssignment_5(), "rule__Fragment__NodesAssignment_5");
					put(grammarAccess.getFeedAccess().getNameAssignment_1(), "rule__Feed__NameAssignment_1");
					put(grammarAccess.getFeedAccess().getDescriptionAssignment_3(), "rule__Feed__DescriptionAssignment_3");
					put(grammarAccess.getFeedAccess().getPathsAssignment_5(), "rule__Feed__PathsAssignment_5");
					put(grammarAccess.getFeedAccess().getPathsAssignment_6(), "rule__Feed__PathsAssignment_6");
					put(grammarAccess.getDataTypeRefinementAccess().getNameAssignment_1(), "rule__DataTypeRefinement__NameAssignment_1");
					put(grammarAccess.getDataTypeRefinementAccess().getRefineAssignment_3(), "rule__DataTypeRefinement__RefineAssignment_3");
					put(grammarAccess.getDataTypeRefinementAccess().getSubsequencesAssignment_4_1_0(), "rule__DataTypeRefinement__SubsequencesAssignment_4_1_0");
					put(grammarAccess.getDataTypeRefinementAccess().getSubsequencesAssignment_4_1_1(), "rule__DataTypeRefinement__SubsequencesAssignment_4_1_1");
					put(grammarAccess.getDataTypeRefinementAccess().getOptionsAssignment_5_1(), "rule__DataTypeRefinement__OptionsAssignment_5_1");
					put(grammarAccess.getDataTypeRefinementAccess().getOptionsAssignment_5_2_1(), "rule__DataTypeRefinement__OptionsAssignment_5_2_1");
					put(grammarAccess.getEnumerationAccess().getNameAssignment_1(), "rule__Enumeration__NameAssignment_1");
					put(grammarAccess.getEnumerationAccess().getValuesAssignment_3(), "rule__Enumeration__ValuesAssignment_3");
					put(grammarAccess.getEnumerationAccess().getValuesAssignment_4_1(), "rule__Enumeration__ValuesAssignment_4_1");
					put(grammarAccess.getStringOptionAccess().getKeyAssignment_0(), "rule__StringOption__KeyAssignment_0");
					put(grammarAccess.getStringOptionAccess().getValueAssignment_2(), "rule__StringOption__ValueAssignment_2");
					put(grammarAccess.getIntOptionAccess().getKeyAssignment_0(), "rule__IntOption__KeyAssignment_0");
					put(grammarAccess.getIntOptionAccess().getValueAssignment_2(), "rule__IntOption__ValueAssignment_2");
					put(grammarAccess.getDoubleOptionAccess().getKeyAssignment_0(), "rule__DoubleOption__KeyAssignment_0");
					put(grammarAccess.getDoubleOptionAccess().getValueAssignment_2(), "rule__DoubleOption__ValueAssignment_2");
					put(grammarAccess.getBooleanOptionAccess().getKeyAssignment_0(), "rule__BooleanOption__KeyAssignment_0");
					put(grammarAccess.getBooleanOptionAccess().getValueAssignment_2(), "rule__BooleanOption__ValueAssignment_2");
					put(grammarAccess.getListQualifiedNameOptionAccess().getKeyAssignment_0(), "rule__ListQualifiedNameOption__KeyAssignment_0");
					put(grammarAccess.getListQualifiedNameOptionAccess().getFragmentsAssignment_2(), "rule__ListQualifiedNameOption__FragmentsAssignment_2");
					put(grammarAccess.getDataOptionAccess().getKeyAssignment_0(), "rule__DataOption__KeyAssignment_0");
					put(grammarAccess.getDataOptionAccess().getValueAssignment_2(), "rule__DataOption__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalDataDslParser typedParser = (InternalDataDslParser) parser;
			typedParser.entryRuleDataModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DataDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DataDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
