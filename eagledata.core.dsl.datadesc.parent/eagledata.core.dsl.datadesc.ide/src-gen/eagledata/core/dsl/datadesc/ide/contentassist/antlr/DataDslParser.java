/*
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.datadesc.ide.contentassist.antlr;

import com.google.inject.Inject;
import eagledata.core.dsl.datadesc.ide.contentassist.antlr.internal.InternalDataDslParser;
import eagledata.core.dsl.datadesc.services.DataDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class DataDslParser extends AbstractContentAssistParser {

	@Inject
	private DataDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDataDslParser createParser() {
		InternalDataDslParser result = new InternalDataDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDataDescriptionAccess().getAlternatives(), "rule__DataDescription__Alternatives");
					put(grammarAccess.getTypeSpecificationAccess().getAlternatives(), "rule__TypeSpecification__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getLeafNodeAccess().getAlternatives_1(), "rule__LeafNode__Alternatives_1");
					put(grammarAccess.getOptionAccess().getAlternatives(), "rule__Option__Alternatives");
					put(grammarAccess.getBasicTypeAccess().getAlternatives(), "rule__BasicType__Alternatives");
					put(grammarAccess.getOptionKeyAccess().getAlternatives(), "rule__OptionKey__Alternatives");
					put(grammarAccess.getDataModelAccess().getGroup(), "rule__DataModel__Group__0");
					put(grammarAccess.getDataModelAccess().getGroup_1(), "rule__DataModel__Group_1__0");
					put(grammarAccess.getDataSourceAccess().getGroup(), "rule__DataSource__Group__0");
					put(grammarAccess.getDataSourceAccess().getGroup_3(), "rule__DataSource__Group_3__0");
					put(grammarAccess.getDataSourceAccess().getGroup_3_2(), "rule__DataSource__Group_3_2__0");
					put(grammarAccess.getDataSourceAccess().getGroup_5(), "rule__DataSource__Group_5__0");
					put(grammarAccess.getDataSourceAccess().getGroup_5_1(), "rule__DataSource__Group_5_1__0");
					put(grammarAccess.getDataSourceAccess().getGroup_7(), "rule__DataSource__Group_7__0");
					put(grammarAccess.getDataSourceAccess().getGroup_7_2(), "rule__DataSource__Group_7_2__0");
					put(grammarAccess.getDataFragmentAccess().getGroup(), "rule__DataFragment__Group__0");
					put(grammarAccess.getDataFragmentAccess().getGroup_2(), "rule__DataFragment__Group_2__0");
					put(grammarAccess.getDataFragmentAccess().getGroup_2_2(), "rule__DataFragment__Group_2_2__0");
					put(grammarAccess.getDataFragmentAccess().getGroup_4(), "rule__DataFragment__Group_4__0");
					put(grammarAccess.getDataFragmentAccess().getGroup_4_1(), "rule__DataFragment__Group_4_1__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup_4(), "rule__DataType__Group_4__0");
					put(grammarAccess.getDataTypeAccess().getGroup_4_2(), "rule__DataType__Group_4_2__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup_4(), "rule__Enumeration__Group_4__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup(), "rule__CompositeNode__Group__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_3(), "rule__CompositeNode__Group_3__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_3_2(), "rule__CompositeNode__Group_3_2__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_5(), "rule__CompositeNode__Group_5__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_5_1(), "rule__CompositeNode__Group_5_1__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_7(), "rule__CompositeNode__Group_7__0");
					put(grammarAccess.getCompositeNodeAccess().getGroup_7_2(), "rule__CompositeNode__Group_7_2__0");
					put(grammarAccess.getLeafNodeAccess().getGroup(), "rule__LeafNode__Group__0");
					put(grammarAccess.getLeafNodeAccess().getGroup_5(), "rule__LeafNode__Group_5__0");
					put(grammarAccess.getLeafNodeAccess().getGroup_5_2(), "rule__LeafNode__Group_5_2__0");
					put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
					put(grammarAccess.getOptionAccess().getGroup_0(), "rule__Option__Group_0__0");
					put(grammarAccess.getDataModelAccess().getDescriptionsAssignment_0(), "rule__DataModel__DescriptionsAssignment_0");
					put(grammarAccess.getDataModelAccess().getDescriptionsAssignment_1_1(), "rule__DataModel__DescriptionsAssignment_1_1");
					put(grammarAccess.getDataSourceAccess().getFormatAssignment_1(), "rule__DataSource__FormatAssignment_1");
					put(grammarAccess.getDataSourceAccess().getNameAssignment_2(), "rule__DataSource__NameAssignment_2");
					put(grammarAccess.getDataSourceAccess().getFragmentsAssignment_3_1(), "rule__DataSource__FragmentsAssignment_3_1");
					put(grammarAccess.getDataSourceAccess().getFragmentsAssignment_3_2_1(), "rule__DataSource__FragmentsAssignment_3_2_1");
					put(grammarAccess.getDataSourceAccess().getNodesAssignment_5_0(), "rule__DataSource__NodesAssignment_5_0");
					put(grammarAccess.getDataSourceAccess().getNodesAssignment_5_1_1(), "rule__DataSource__NodesAssignment_5_1_1");
					put(grammarAccess.getDataSourceAccess().getOptionsAssignment_7_1(), "rule__DataSource__OptionsAssignment_7_1");
					put(grammarAccess.getDataSourceAccess().getOptionsAssignment_7_2_1(), "rule__DataSource__OptionsAssignment_7_2_1");
					put(grammarAccess.getDataFragmentAccess().getNameAssignment_1(), "rule__DataFragment__NameAssignment_1");
					put(grammarAccess.getDataFragmentAccess().getFragmentsAssignment_2_1(), "rule__DataFragment__FragmentsAssignment_2_1");
					put(grammarAccess.getDataFragmentAccess().getFragmentsAssignment_2_2_1(), "rule__DataFragment__FragmentsAssignment_2_2_1");
					put(grammarAccess.getDataFragmentAccess().getNodesAssignment_4_0(), "rule__DataFragment__NodesAssignment_4_0");
					put(grammarAccess.getDataFragmentAccess().getNodesAssignment_4_1_1(), "rule__DataFragment__NodesAssignment_4_1_1");
					put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
					put(grammarAccess.getDataTypeAccess().getRefineAssignment_3(), "rule__DataType__RefineAssignment_3");
					put(grammarAccess.getDataTypeAccess().getOptionsAssignment_4_1(), "rule__DataType__OptionsAssignment_4_1");
					put(grammarAccess.getDataTypeAccess().getOptionsAssignment_4_2_1(), "rule__DataType__OptionsAssignment_4_2_1");
					put(grammarAccess.getEnumerationAccess().getNameAssignment_1(), "rule__Enumeration__NameAssignment_1");
					put(grammarAccess.getEnumerationAccess().getValuesAssignment_3(), "rule__Enumeration__ValuesAssignment_3");
					put(grammarAccess.getEnumerationAccess().getValuesAssignment_4_1(), "rule__Enumeration__ValuesAssignment_4_1");
					put(grammarAccess.getCompositeNodeAccess().getEnvironmentAssignment_0(), "rule__CompositeNode__EnvironmentAssignment_0");
					put(grammarAccess.getCompositeNodeAccess().getNameAssignment_1(), "rule__CompositeNode__NameAssignment_1");
					put(grammarAccess.getCompositeNodeAccess().getRepresentedAsAssignment_2(), "rule__CompositeNode__RepresentedAsAssignment_2");
					put(grammarAccess.getCompositeNodeAccess().getExtendsAssignment_3_1(), "rule__CompositeNode__ExtendsAssignment_3_1");
					put(grammarAccess.getCompositeNodeAccess().getExtendsAssignment_3_2_1(), "rule__CompositeNode__ExtendsAssignment_3_2_1");
					put(grammarAccess.getCompositeNodeAccess().getSubnodesAssignment_5_0(), "rule__CompositeNode__SubnodesAssignment_5_0");
					put(grammarAccess.getCompositeNodeAccess().getSubnodesAssignment_5_1_1(), "rule__CompositeNode__SubnodesAssignment_5_1_1");
					put(grammarAccess.getCompositeNodeAccess().getOptionsAssignment_7_1(), "rule__CompositeNode__OptionsAssignment_7_1");
					put(grammarAccess.getCompositeNodeAccess().getOptionsAssignment_7_2_1(), "rule__CompositeNode__OptionsAssignment_7_2_1");
					put(grammarAccess.getLeafNodeAccess().getUniquenessAssignment_0(), "rule__LeafNode__UniquenessAssignment_0");
					put(grammarAccess.getLeafNodeAccess().getTypeAssignment_1_0(), "rule__LeafNode__TypeAssignment_1_0");
					put(grammarAccess.getLeafNodeAccess().getTypeCallAssignment_1_1(), "rule__LeafNode__TypeCallAssignment_1_1");
					put(grammarAccess.getLeafNodeAccess().getKeywordAssignment_2(), "rule__LeafNode__KeywordAssignment_2");
					put(grammarAccess.getLeafNodeAccess().getNameAssignment_3(), "rule__LeafNode__NameAssignment_3");
					put(grammarAccess.getLeafNodeAccess().getRepresentedAsAssignment_4(), "rule__LeafNode__RepresentedAsAssignment_4");
					put(grammarAccess.getLeafNodeAccess().getOptionsAssignment_5_1(), "rule__LeafNode__OptionsAssignment_5_1");
					put(grammarAccess.getLeafNodeAccess().getOptionsAssignment_5_2_1(), "rule__LeafNode__OptionsAssignment_5_2_1");
					put(grammarAccess.getReferenceAccess().getReferenceTypeAssignment_1(), "rule__Reference__ReferenceTypeAssignment_1");
					put(grammarAccess.getOptionAccess().getKeyAssignment_0_0(), "rule__Option__KeyAssignment_0_0");
					put(grammarAccess.getOptionAccess().getValueAssignment_0_2(), "rule__Option__ValueAssignment_0_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalDataDslParser typedParser = (InternalDataDslParser) parser;
			typedParser.entryRuleDataModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DataDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DataDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
