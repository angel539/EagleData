/**
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.datadesc.dataDsl;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Option Key</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see eagledata.core.dsl.datadesc.dataDsl.DataDslPackage#getOptionKey()
 * @model
 * @generated
 */
public enum OptionKey implements Enumerator
{
  /**
   * The '<em><b>Min Length</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MIN_LENGTH_VALUE
   * @generated
   * @ordered
   */
  MIN_LENGTH(0, "minLength", "minLength"),

  /**
   * The '<em><b>Max Length</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MAX_LENGTH_VALUE
   * @generated
   * @ordered
   */
  MAX_LENGTH(1, "maxLength", "maxLength"),

  /**
   * The '<em><b>Casesensitive</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CASESENSITIVE_VALUE
   * @generated
   * @ordered
   */
  CASESENSITIVE(2, "casesensitive", "casesensitive"),

  /**
   * The '<em><b>Min</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MIN_VALUE
   * @generated
   * @ordered
   */
  MIN(3, "min", "min"),

  /**
   * The '<em><b>Max</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MAX_VALUE
   * @generated
   * @ordered
   */
  MAX(4, "max", "max"),

  /**
   * The '<em><b>Null</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NULL_VALUE
   * @generated
   * @ordered
   */
  NULL(5, "null", "null"),

  /**
   * The '<em><b>Separator</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SEPARATOR_VALUE
   * @generated
   * @ordered
   */
  SEPARATOR(6, "separator", "separator"),

  /**
   * The '<em><b>Default</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DEFAULT_VALUE
   * @generated
   * @ordered
   */
  DEFAULT(7, "default", "default"),

  /**
   * The '<em><b>Regex</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #REGEX_VALUE
   * @generated
   * @ordered
   */
  REGEX(8, "regex", "regex"),

  /**
   * The '<em><b>Flags</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FLAGS_VALUE
   * @generated
   * @ordered
   */
  FLAGS(9, "flags", "flags"),

  /**
   * The '<em><b>Decimalchar</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DECIMALCHAR_VALUE
   * @generated
   * @ordered
   */
  DECIMALCHAR(10, "decimalchar", "decimalchar"),

  /**
   * The '<em><b>Pattern</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PATTERN_VALUE
   * @generated
   * @ordered
   */
  PATTERN(11, "pattern", "pattern"),

  /**
   * The '<em><b>Format</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FORMAT_VALUE
   * @generated
   * @ordered
   */
  FORMAT(12, "format", "format");

  /**
   * The '<em><b>Min Length</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Min Length</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #MIN_LENGTH
   * @model name="minLength"
   * @generated
   * @ordered
   */
  public static final int MIN_LENGTH_VALUE = 0;

  /**
   * The '<em><b>Max Length</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Max Length</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #MAX_LENGTH
   * @model name="maxLength"
   * @generated
   * @ordered
   */
  public static final int MAX_LENGTH_VALUE = 1;

  /**
   * The '<em><b>Casesensitive</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Casesensitive</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CASESENSITIVE
   * @model name="casesensitive"
   * @generated
   * @ordered
   */
  public static final int CASESENSITIVE_VALUE = 2;

  /**
   * The '<em><b>Min</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Min</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #MIN
   * @model name="min"
   * @generated
   * @ordered
   */
  public static final int MIN_VALUE = 3;

  /**
   * The '<em><b>Max</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Max</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #MAX
   * @model name="max"
   * @generated
   * @ordered
   */
  public static final int MAX_VALUE = 4;

  /**
   * The '<em><b>Null</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Null</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #NULL
   * @model name="null"
   * @generated
   * @ordered
   */
  public static final int NULL_VALUE = 5;

  /**
   * The '<em><b>Separator</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Separator</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #SEPARATOR
   * @model name="separator"
   * @generated
   * @ordered
   */
  public static final int SEPARATOR_VALUE = 6;

  /**
   * The '<em><b>Default</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Default</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #DEFAULT
   * @model name="default"
   * @generated
   * @ordered
   */
  public static final int DEFAULT_VALUE = 7;

  /**
   * The '<em><b>Regex</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Regex</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #REGEX
   * @model name="regex"
   * @generated
   * @ordered
   */
  public static final int REGEX_VALUE = 8;

  /**
   * The '<em><b>Flags</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Flags</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #FLAGS
   * @model name="flags"
   * @generated
   * @ordered
   */
  public static final int FLAGS_VALUE = 9;

  /**
   * The '<em><b>Decimalchar</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Decimalchar</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #DECIMALCHAR
   * @model name="decimalchar"
   * @generated
   * @ordered
   */
  public static final int DECIMALCHAR_VALUE = 10;

  /**
   * The '<em><b>Pattern</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Pattern</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #PATTERN
   * @model name="pattern"
   * @generated
   * @ordered
   */
  public static final int PATTERN_VALUE = 11;

  /**
   * The '<em><b>Format</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Format</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #FORMAT
   * @model name="format"
   * @generated
   * @ordered
   */
  public static final int FORMAT_VALUE = 12;

  /**
   * An array of all the '<em><b>Option Key</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final OptionKey[] VALUES_ARRAY =
    new OptionKey[]
    {
      MIN_LENGTH,
      MAX_LENGTH,
      CASESENSITIVE,
      MIN,
      MAX,
      NULL,
      SEPARATOR,
      DEFAULT,
      REGEX,
      FLAGS,
      DECIMALCHAR,
      PATTERN,
      FORMAT,
    };

  /**
   * A public read-only list of all the '<em><b>Option Key</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<OptionKey> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Option Key</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static OptionKey get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      OptionKey result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Option Key</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static OptionKey getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      OptionKey result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Option Key</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static OptionKey get(int value)
  {
    switch (value)
    {
      case MIN_LENGTH_VALUE: return MIN_LENGTH;
      case MAX_LENGTH_VALUE: return MAX_LENGTH;
      case CASESENSITIVE_VALUE: return CASESENSITIVE;
      case MIN_VALUE: return MIN;
      case MAX_VALUE: return MAX;
      case NULL_VALUE: return NULL;
      case SEPARATOR_VALUE: return SEPARATOR;
      case DEFAULT_VALUE: return DEFAULT;
      case REGEX_VALUE: return REGEX;
      case FLAGS_VALUE: return FLAGS;
      case DECIMALCHAR_VALUE: return DECIMALCHAR;
      case PATTERN_VALUE: return PATTERN;
      case FORMAT_VALUE: return FORMAT;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private OptionKey(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //OptionKey
