/*
 * generated by Xtext 2.9.1
 */
package eagledata.core.dsl.datadesc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DataDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionsDataDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDescriptionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDescriptionsDataDescriptionParserRuleCall_1_1_0 = (RuleCall)cDescriptionsAssignment_1_1.eContents().get(0);
		
		//DataModel data::DataModel:
		//	descriptions+=DataDescription ("," descriptions+=DataDescription)*
		@Override public ParserRule getRule() { return rule; }
		
		//descriptions+=DataDescription ("," descriptions+=DataDescription)*
		public Group getGroup() { return cGroup; }
		
		//descriptions+=DataDescription
		public Assignment getDescriptionsAssignment_0() { return cDescriptionsAssignment_0; }
		
		//DataDescription
		public RuleCall getDescriptionsDataDescriptionParserRuleCall_0_0() { return cDescriptionsDataDescriptionParserRuleCall_0_0; }
		
		//("," descriptions+=DataDescription)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//descriptions+=DataDescription
		public Assignment getDescriptionsAssignment_1_1() { return cDescriptionsAssignment_1_1; }
		
		//DataDescription
		public RuleCall getDescriptionsDataDescriptionParserRuleCall_1_1_0() { return cDescriptionsDataDescriptionParserRuleCall_1_1_0; }
	}
	public class DataDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataDescription");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataSourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataFragmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DataDescription data::DataDescription:
		//	TypeSpecification | DataSource | DataFragment
		@Override public ParserRule getRule() { return rule; }
		
		//TypeSpecification | DataSource | DataFragment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeSpecification
		public RuleCall getTypeSpecificationParserRuleCall_0() { return cTypeSpecificationParserRuleCall_0; }
		
		//DataSource
		public RuleCall getDataSourceParserRuleCall_1() { return cDataSourceParserRuleCall_1; }
		
		//DataFragment
		public RuleCall getDataFragmentParserRuleCall_2() { return cDataFragmentParserRuleCall_2; }
	}
	public class DataSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormatFORMATTerminalRuleCall_1_0 = (RuleCall)cFormatAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFragmentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFragmentsDataFragmentCrossReference_3_1_0 = (CrossReference)cFragmentsAssignment_3_1.eContents().get(0);
		private final RuleCall cFragmentsDataFragmentIDTerminalRuleCall_3_1_0_1 = (RuleCall)cFragmentsDataFragmentCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFragmentsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cFragmentsDataFragmentCrossReference_3_2_1_0 = (CrossReference)cFragmentsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cFragmentsDataFragmentIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cFragmentsDataFragmentCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cNodesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cNodesNodeParserRuleCall_5_0_0 = (RuleCall)cNodesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cNodesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_5_1_1_0 = (RuleCall)cNodesAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOptionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_7_1_0 = (RuleCall)cOptionsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cOptionsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_7_2_1_0 = (RuleCall)cOptionsAssignment_7_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//DataSource data::DataSource:
		//	'description' format=FORMAT name=ID (':' fragments+=[data::DataFragment] (',' fragments+=[data::DataFragment])*)? '{'
		//	(nodes+=Node ("," nodes+=Node)*)?
		//	'}' ('{' options+=Option ("," options+=Option)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//'description' format=FORMAT name=ID (':' fragments+=[data::DataFragment] (',' fragments+=[data::DataFragment])*)? '{'
		//(nodes+=Node ("," nodes+=Node)*)? '}' ('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//format=FORMAT
		public Assignment getFormatAssignment_1() { return cFormatAssignment_1; }
		
		//FORMAT
		public RuleCall getFormatFORMATTerminalRuleCall_1_0() { return cFormatFORMATTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(':' fragments+=[data::DataFragment] (',' fragments+=[data::DataFragment])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//fragments+=[data::DataFragment]
		public Assignment getFragmentsAssignment_3_1() { return cFragmentsAssignment_3_1; }
		
		//[data::DataFragment]
		public CrossReference getFragmentsDataFragmentCrossReference_3_1_0() { return cFragmentsDataFragmentCrossReference_3_1_0; }
		
		//ID
		public RuleCall getFragmentsDataFragmentIDTerminalRuleCall_3_1_0_1() { return cFragmentsDataFragmentIDTerminalRuleCall_3_1_0_1; }
		
		//(',' fragments+=[data::DataFragment])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//fragments+=[data::DataFragment]
		public Assignment getFragmentsAssignment_3_2_1() { return cFragmentsAssignment_3_2_1; }
		
		//[data::DataFragment]
		public CrossReference getFragmentsDataFragmentCrossReference_3_2_1_0() { return cFragmentsDataFragmentCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getFragmentsDataFragmentIDTerminalRuleCall_3_2_1_0_1() { return cFragmentsDataFragmentIDTerminalRuleCall_3_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(nodes+=Node ("," nodes+=Node)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_5_0() { return cNodesAssignment_5_0; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_5_0_0() { return cNodesNodeParserRuleCall_5_0_0; }
		
		//("," nodes+=Node)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_5_1_1() { return cNodesAssignment_5_1_1; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_5_1_1_0() { return cNodesNodeParserRuleCall_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_7_1() { return cOptionsAssignment_7_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_7_1_0() { return cOptionsOptionParserRuleCall_7_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_7_2_1() { return cOptionsAssignment_7_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_7_2_1_0() { return cOptionsOptionParserRuleCall_7_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class DataFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFragmentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cFragmentsDataFragmentCrossReference_2_1_0 = (CrossReference)cFragmentsAssignment_2_1.eContents().get(0);
		private final RuleCall cFragmentsDataFragmentIDTerminalRuleCall_2_1_0_1 = (RuleCall)cFragmentsDataFragmentCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFragmentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cFragmentsDataFragmentCrossReference_2_2_1_0 = (CrossReference)cFragmentsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cFragmentsDataFragmentIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cFragmentsDataFragmentCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cNodesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cNodesNodeParserRuleCall_4_0_0 = (RuleCall)cNodesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cNodesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_4_1_1_0 = (RuleCall)cNodesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DataFragment data::DataFragment:
		//	'fragment' name=ID (':' fragments+=[data::DataFragment] (',' fragments+=[data::DataFragment])*)? '{' (nodes+=Node
		//	("," nodes+=Node)*)?
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'fragment' name=ID (':' fragments+=[data::DataFragment] (',' fragments+=[data::DataFragment])*)? '{' (nodes+=Node (","
		//nodes+=Node)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'fragment'
		public Keyword getFragmentKeyword_0() { return cFragmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' fragments+=[data::DataFragment] (',' fragments+=[data::DataFragment])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//fragments+=[data::DataFragment]
		public Assignment getFragmentsAssignment_2_1() { return cFragmentsAssignment_2_1; }
		
		//[data::DataFragment]
		public CrossReference getFragmentsDataFragmentCrossReference_2_1_0() { return cFragmentsDataFragmentCrossReference_2_1_0; }
		
		//ID
		public RuleCall getFragmentsDataFragmentIDTerminalRuleCall_2_1_0_1() { return cFragmentsDataFragmentIDTerminalRuleCall_2_1_0_1; }
		
		//(',' fragments+=[data::DataFragment])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//fragments+=[data::DataFragment]
		public Assignment getFragmentsAssignment_2_2_1() { return cFragmentsAssignment_2_2_1; }
		
		//[data::DataFragment]
		public CrossReference getFragmentsDataFragmentCrossReference_2_2_1_0() { return cFragmentsDataFragmentCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getFragmentsDataFragmentIDTerminalRuleCall_2_2_1_0_1() { return cFragmentsDataFragmentIDTerminalRuleCall_2_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(nodes+=Node ("," nodes+=Node)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_4_0() { return cNodesAssignment_4_0; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_4_0_0() { return cNodesNodeParserRuleCall_4_0_0; }
		
		//("," nodes+=Node)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_4_1_1() { return cNodesAssignment_4_1_1; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_4_1_1_0() { return cNodesNodeParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.TypeSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSpecification data::TypeSpecification:
		//	DataType | Enumeration
		@Override public ParserRule getRule() { return rule; }
		
		//DataType | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefineBasicTypeEnumRuleCall_3_0 = (RuleCall)cRefineAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOptionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_4_1_0 = (RuleCall)cOptionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cOptionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_4_2_1_0 = (RuleCall)cOptionsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//DataType data::DataType:
		//	'datatype' name=ID ':' refine=BasicType ('{' options+=Option ("," options+=Option)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID ':' refine=BasicType ('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//refine=BasicType
		public Assignment getRefineAssignment_3() { return cRefineAssignment_3; }
		
		//BasicType
		public RuleCall getRefineBasicTypeEnumRuleCall_3_0() { return cRefineBasicTypeEnumRuleCall_3_0; }
		
		//('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_4_1() { return cOptionsAssignment_4_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_1_0() { return cOptionsOptionParserRuleCall_4_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_4_2_1() { return cOptionsAssignment_4_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_2_1_0() { return cOptionsOptionParserRuleCall_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesSTRINGTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enumeration data::Enumeration:
		//	'enumeration' name=ID "{" values+=STRING (',' values+=STRING)* "}"
		@Override public ParserRule getRule() { return rule; }
		
		//'enumeration' name=ID "{" values+=STRING (',' values+=STRING)* "}"
		public Group getGroup() { return cGroup; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//values+=STRING
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_3_0() { return cValuesSTRINGTerminalRuleCall_3_0; }
		
		//(',' values+=STRING)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_4_1_0() { return cValuesSTRINGTerminalRuleCall_4_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeafNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Node data::Node:
		//	LeafNode | CompositeNode
		@Override public ParserRule getRule() { return rule; }
		
		//LeafNode | CompositeNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeafNode
		public RuleCall getLeafNodeParserRuleCall_0() { return cLeafNodeParserRuleCall_0; }
		
		//CompositeNode
		public RuleCall getCompositeNodeParserRuleCall_1() { return cCompositeNodeParserRuleCall_1; }
	}
	public class CompositeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.CompositeNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnvironmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEnvironmentGreaterThanSignKeyword_0_0 = (Keyword)cEnvironmentAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRepresentedAsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRepresentedAsSTRINGTerminalRuleCall_2_0 = (RuleCall)cRepresentedAsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cExtendsCompositeNodeCrossReference_3_1_0 = (CrossReference)cExtendsAssignment_3_1.eContents().get(0);
		private final RuleCall cExtendsCompositeNodeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cExtendsCompositeNodeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cExtendsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cExtendsCompositeNodeCrossReference_3_2_1_0 = (CrossReference)cExtendsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cExtendsCompositeNodeIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cExtendsCompositeNodeCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cSubnodesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cSubnodesNodeParserRuleCall_5_0_0 = (RuleCall)cSubnodesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cSubnodesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cSubnodesNodeParserRuleCall_5_1_1_0 = (RuleCall)cSubnodesAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOptionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_7_1_0 = (RuleCall)cOptionsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cOptionsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_7_2_1_0 = (RuleCall)cOptionsAssignment_7_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//CompositeNode data::CompositeNode:
		//	environment?=">"? name=ID representedAs=STRING? (':' extends+=[data::CompositeNode] (','
		//	extends+=[data::CompositeNode])*)? '{' (subnodes+=Node ("," subnodes+=Node)*)
		//	'}' ('{' options+=Option ("," options+=Option)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//environment?=">"? name=ID representedAs=STRING? (':' extends+=[data::CompositeNode] (','
		//extends+=[data::CompositeNode])*)? '{' (subnodes+=Node ("," subnodes+=Node)*) '}' ('{' options+=Option (","
		//options+=Option)* '}')?
		public Group getGroup() { return cGroup; }
		
		//environment?=">"?
		public Assignment getEnvironmentAssignment_0() { return cEnvironmentAssignment_0; }
		
		//">"
		public Keyword getEnvironmentGreaterThanSignKeyword_0_0() { return cEnvironmentGreaterThanSignKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//representedAs=STRING?
		public Assignment getRepresentedAsAssignment_2() { return cRepresentedAsAssignment_2; }
		
		//STRING
		public RuleCall getRepresentedAsSTRINGTerminalRuleCall_2_0() { return cRepresentedAsSTRINGTerminalRuleCall_2_0; }
		
		//(':' extends+=[data::CompositeNode] (',' extends+=[data::CompositeNode])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//extends+=[data::CompositeNode]
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }
		
		//[data::CompositeNode]
		public CrossReference getExtendsCompositeNodeCrossReference_3_1_0() { return cExtendsCompositeNodeCrossReference_3_1_0; }
		
		//ID
		public RuleCall getExtendsCompositeNodeIDTerminalRuleCall_3_1_0_1() { return cExtendsCompositeNodeIDTerminalRuleCall_3_1_0_1; }
		
		//(',' extends+=[data::CompositeNode])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//extends+=[data::CompositeNode]
		public Assignment getExtendsAssignment_3_2_1() { return cExtendsAssignment_3_2_1; }
		
		//[data::CompositeNode]
		public CrossReference getExtendsCompositeNodeCrossReference_3_2_1_0() { return cExtendsCompositeNodeCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getExtendsCompositeNodeIDTerminalRuleCall_3_2_1_0_1() { return cExtendsCompositeNodeIDTerminalRuleCall_3_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(subnodes+=Node ("," subnodes+=Node)*)
		public Group getGroup_5() { return cGroup_5; }
		
		//subnodes+=Node
		public Assignment getSubnodesAssignment_5_0() { return cSubnodesAssignment_5_0; }
		
		//Node
		public RuleCall getSubnodesNodeParserRuleCall_5_0_0() { return cSubnodesNodeParserRuleCall_5_0_0; }
		
		//("," subnodes+=Node)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//subnodes+=Node
		public Assignment getSubnodesAssignment_5_1_1() { return cSubnodesAssignment_5_1_1; }
		
		//Node
		public RuleCall getSubnodesNodeParserRuleCall_5_1_1_0() { return cSubnodesNodeParserRuleCall_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_7_1() { return cOptionsAssignment_7_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_7_1_0() { return cOptionsOptionParserRuleCall_7_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_7_2_1() { return cOptionsAssignment_7_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_7_2_1_0() { return cOptionsOptionParserRuleCall_7_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class LeafNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.LeafNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUniquenessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUniquenessUNIQUENESSTerminalRuleCall_0_0 = (RuleCall)cUniquenessAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeBasicTypeEnumRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cTypeCallAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cTypeCallTypeSpecificationCrossReference_1_1_0 = (CrossReference)cTypeCallAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeCallTypeSpecificationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTypeCallTypeSpecificationCrossReference_1_1_0.eContents().get(1);
		private final Assignment cKeywordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cKeywordNumberSignKeyword_2_0 = (Keyword)cKeywordAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cRepresentedAsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRepresentedAsSTRINGTerminalRuleCall_4_0 = (RuleCall)cRepresentedAsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOptionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_5_1_0 = (RuleCall)cOptionsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cOptionsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_5_2_1_0 = (RuleCall)cOptionsAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//LeafNode data::LeafNode:
		//	uniqueness=UNIQUENESS? (type=BasicType | typeCall=[data::TypeSpecification]) keyword?="#"? name=ID
		//	representedAs=STRING? ('{' options+=Option ("," options+=Option)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//uniqueness=UNIQUENESS? (type=BasicType | typeCall=[data::TypeSpecification]) keyword?="#"? name=ID representedAs=STRING?
		//('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup() { return cGroup; }
		
		//uniqueness=UNIQUENESS?
		public Assignment getUniquenessAssignment_0() { return cUniquenessAssignment_0; }
		
		//UNIQUENESS
		public RuleCall getUniquenessUNIQUENESSTerminalRuleCall_0_0() { return cUniquenessUNIQUENESSTerminalRuleCall_0_0; }
		
		//(type=BasicType | typeCall=[data::TypeSpecification])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=BasicType
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//BasicType
		public RuleCall getTypeBasicTypeEnumRuleCall_1_0_0() { return cTypeBasicTypeEnumRuleCall_1_0_0; }
		
		//typeCall=[data::TypeSpecification]
		public Assignment getTypeCallAssignment_1_1() { return cTypeCallAssignment_1_1; }
		
		//[data::TypeSpecification]
		public CrossReference getTypeCallTypeSpecificationCrossReference_1_1_0() { return cTypeCallTypeSpecificationCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTypeCallTypeSpecificationIDTerminalRuleCall_1_1_0_1() { return cTypeCallTypeSpecificationIDTerminalRuleCall_1_1_0_1; }
		
		//keyword?="#"?
		public Assignment getKeywordAssignment_2() { return cKeywordAssignment_2; }
		
		//"#"
		public Keyword getKeywordNumberSignKeyword_2_0() { return cKeywordNumberSignKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//representedAs=STRING?
		public Assignment getRepresentedAsAssignment_4() { return cRepresentedAsAssignment_4; }
		
		//STRING
		public RuleCall getRepresentedAsSTRINGTerminalRuleCall_4_0() { return cRepresentedAsSTRINGTerminalRuleCall_4_0; }
		
		//('{' options+=Option ("," options+=Option)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_5_1() { return cOptionsAssignment_5_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_5_1_0() { return cOptionsOptionParserRuleCall_5_1_0; }
		
		//("," options+=Option)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_5_2_1() { return cOptionsAssignment_5_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_5_2_1_0() { return cOptionsOptionParserRuleCall_5_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceTypeCompositeNodeCrossReference_1_0 = (CrossReference)cReferenceTypeAssignment_1.eContents().get(0);
		private final RuleCall cReferenceTypeCompositeNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceTypeCompositeNodeCrossReference_1_0.eContents().get(1);
		
		//Reference data::Reference:
		//	"ref:" referenceType=[data::CompositeNode]
		@Override public ParserRule getRule() { return rule; }
		
		//"ref:" referenceType=[data::CompositeNode]
		public Group getGroup() { return cGroup; }
		
		//"ref:"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//referenceType=[data::CompositeNode]
		public Assignment getReferenceTypeAssignment_1() { return cReferenceTypeAssignment_1; }
		
		//[data::CompositeNode]
		public CrossReference getReferenceTypeCompositeNodeCrossReference_1_0() { return cReferenceTypeCompositeNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getReferenceTypeCompositeNodeIDTerminalRuleCall_1_0_1() { return cReferenceTypeCompositeNodeIDTerminalRuleCall_1_0_1; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeyOptionKeyEnumRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Option data::Option:
		//	key=OptionKey '=' value=STRING | INT
		@Override public ParserRule getRule() { return rule; }
		
		//key=OptionKey '=' value=STRING | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//key=OptionKey '=' value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//key=OptionKey
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//OptionKey
		public RuleCall getKeyOptionKeyEnumRuleCall_0_0_0() { return cKeyOptionKeyEnumRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//value=STRING
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_2_0() { return cValueSTRINGTerminalRuleCall_0_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class BasicTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRealRealKeyword_2_0 = (Keyword)cRealEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateDateKeyword_3_0 = (Keyword)cDateEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTimeTimeKeyword_4_0 = (Keyword)cTimeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cYearEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cYearYearKeyword_5_0 = (Keyword)cYearEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cMonthEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cMonthMonthKeyword_6_0 = (Keyword)cMonthEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDayEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDayDayKeyword_7_0 = (Keyword)cDayEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cBooleanBooleanKeyword_8_0 = (Keyword)cBooleanEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cLatEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cLatLatKeyword_9_0 = (Keyword)cLatEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cLongEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cLongLongKeyword_10_0 = (Keyword)cLongEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum BasicType returns data::BasicType:
		//	string | int | real | date | time | year | month | day | boolean | lat | long;
		public EnumRule getRule() { return rule; }
		
		//string | int | real | date | time | year | month | day | boolean | lat | long
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'string'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }
		
		//'int'
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
		
		//real
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_2() { return cRealEnumLiteralDeclaration_2; }
		
		//'real'
		public Keyword getRealRealKeyword_2_0() { return cRealRealKeyword_2_0; }
		
		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_3() { return cDateEnumLiteralDeclaration_3; }
		
		//'date'
		public Keyword getDateDateKeyword_3_0() { return cDateDateKeyword_3_0; }
		
		//time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_4() { return cTimeEnumLiteralDeclaration_4; }
		
		//'time'
		public Keyword getTimeTimeKeyword_4_0() { return cTimeTimeKeyword_4_0; }
		
		//year
		public EnumLiteralDeclaration getYearEnumLiteralDeclaration_5() { return cYearEnumLiteralDeclaration_5; }
		
		//'year'
		public Keyword getYearYearKeyword_5_0() { return cYearYearKeyword_5_0; }
		
		//month
		public EnumLiteralDeclaration getMonthEnumLiteralDeclaration_6() { return cMonthEnumLiteralDeclaration_6; }
		
		//'month'
		public Keyword getMonthMonthKeyword_6_0() { return cMonthMonthKeyword_6_0; }
		
		//day
		public EnumLiteralDeclaration getDayEnumLiteralDeclaration_7() { return cDayEnumLiteralDeclaration_7; }
		
		//'day'
		public Keyword getDayDayKeyword_7_0() { return cDayDayKeyword_7_0; }
		
		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_8() { return cBooleanEnumLiteralDeclaration_8; }
		
		//'boolean'
		public Keyword getBooleanBooleanKeyword_8_0() { return cBooleanBooleanKeyword_8_0; }
		
		//lat
		public EnumLiteralDeclaration getLatEnumLiteralDeclaration_9() { return cLatEnumLiteralDeclaration_9; }
		
		//'lat'
		public Keyword getLatLatKeyword_9_0() { return cLatLatKeyword_9_0; }
		
		//long
		public EnumLiteralDeclaration getLongEnumLiteralDeclaration_10() { return cLongEnumLiteralDeclaration_10; }
		
		//'long'
		public Keyword getLongLongKeyword_10_0() { return cLongLongKeyword_10_0; }
	}
	public class OptionKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.OptionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinLengthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinLengthMinLengthKeyword_0_0 = (Keyword)cMinLengthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaxLengthEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaxLengthMaxLengthKeyword_1_0 = (Keyword)cMaxLengthEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCasesensitiveEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCasesensitiveCasesensitiveKeyword_2_0 = (Keyword)cCasesensitiveEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMinEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMinMinKeyword_3_0 = (Keyword)cMinEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMaxMaxKeyword_4_0 = (Keyword)cMaxEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNullNullKeyword_5_0 = (Keyword)cNullEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSeparatorEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSeparatorSeparatorKeyword_6_0 = (Keyword)cSeparatorEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDefaultDefaultKeyword_7_0 = (Keyword)cDefaultEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cRegexEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cRegexRegexKeyword_8_0 = (Keyword)cRegexEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cFlagsEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cFlagsFlagsKeyword_9_0 = (Keyword)cFlagsEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalcharEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cDecimalcharDecimalcharKeyword_10_0 = (Keyword)cDecimalcharEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cPatternEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cPatternPatternKeyword_11_0 = (Keyword)cPatternEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cFormatEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cFormatFormatKeyword_12_0 = (Keyword)cFormatEnumLiteralDeclaration_12.eContents().get(0);
		
		//enum OptionKey returns data::OptionKey:
		//	minLength | maxLength | casesensitive | min | max | null | separator | default | regex | flags | decimalchar |
		//	pattern | format;
		public EnumRule getRule() { return rule; }
		
		//minLength | maxLength | casesensitive | min | max | null | separator | default | regex | flags | decimalchar | pattern |
		//format
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//minLength
		public EnumLiteralDeclaration getMinLengthEnumLiteralDeclaration_0() { return cMinLengthEnumLiteralDeclaration_0; }
		
		//'minLength'
		public Keyword getMinLengthMinLengthKeyword_0_0() { return cMinLengthMinLengthKeyword_0_0; }
		
		//maxLength
		public EnumLiteralDeclaration getMaxLengthEnumLiteralDeclaration_1() { return cMaxLengthEnumLiteralDeclaration_1; }
		
		//'maxLength'
		public Keyword getMaxLengthMaxLengthKeyword_1_0() { return cMaxLengthMaxLengthKeyword_1_0; }
		
		//casesensitive
		public EnumLiteralDeclaration getCasesensitiveEnumLiteralDeclaration_2() { return cCasesensitiveEnumLiteralDeclaration_2; }
		
		//'casesensitive'
		public Keyword getCasesensitiveCasesensitiveKeyword_2_0() { return cCasesensitiveCasesensitiveKeyword_2_0; }
		
		//min
		public EnumLiteralDeclaration getMinEnumLiteralDeclaration_3() { return cMinEnumLiteralDeclaration_3; }
		
		//'min'
		public Keyword getMinMinKeyword_3_0() { return cMinMinKeyword_3_0; }
		
		//max
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_4() { return cMaxEnumLiteralDeclaration_4; }
		
		//'max'
		public Keyword getMaxMaxKeyword_4_0() { return cMaxMaxKeyword_4_0; }
		
		//null
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration_5() { return cNullEnumLiteralDeclaration_5; }
		
		//'null'
		public Keyword getNullNullKeyword_5_0() { return cNullNullKeyword_5_0; }
		
		//separator
		public EnumLiteralDeclaration getSeparatorEnumLiteralDeclaration_6() { return cSeparatorEnumLiteralDeclaration_6; }
		
		//'separator'
		public Keyword getSeparatorSeparatorKeyword_6_0() { return cSeparatorSeparatorKeyword_6_0; }
		
		//default
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_7() { return cDefaultEnumLiteralDeclaration_7; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_7_0() { return cDefaultDefaultKeyword_7_0; }
		
		//regex
		public EnumLiteralDeclaration getRegexEnumLiteralDeclaration_8() { return cRegexEnumLiteralDeclaration_8; }
		
		//'regex'
		public Keyword getRegexRegexKeyword_8_0() { return cRegexRegexKeyword_8_0; }
		
		//flags
		public EnumLiteralDeclaration getFlagsEnumLiteralDeclaration_9() { return cFlagsEnumLiteralDeclaration_9; }
		
		//'flags'
		public Keyword getFlagsFlagsKeyword_9_0() { return cFlagsFlagsKeyword_9_0; }
		
		//decimalchar
		public EnumLiteralDeclaration getDecimalcharEnumLiteralDeclaration_10() { return cDecimalcharEnumLiteralDeclaration_10; }
		
		//'decimalchar'
		public Keyword getDecimalcharDecimalcharKeyword_10_0() { return cDecimalcharDecimalcharKeyword_10_0; }
		
		//pattern
		public EnumLiteralDeclaration getPatternEnumLiteralDeclaration_11() { return cPatternEnumLiteralDeclaration_11; }
		
		//'pattern'
		public Keyword getPatternPatternKeyword_11_0() { return cPatternPatternKeyword_11_0; }
		
		//format
		public EnumLiteralDeclaration getFormatEnumLiteralDeclaration_12() { return cFormatEnumLiteralDeclaration_12; }
		
		//'format'
		public Keyword getFormatFormatKeyword_12_0() { return cFormatFormatKeyword_12_0; }
	}
	
	private final DataModelElements pDataModel;
	private final DataDescriptionElements pDataDescription;
	private final DataSourceElements pDataSource;
	private final DataFragmentElements pDataFragment;
	private final TypeSpecificationElements pTypeSpecification;
	private final DataTypeElements pDataType;
	private final EnumerationElements pEnumeration;
	private final NodeElements pNode;
	private final CompositeNodeElements pCompositeNode;
	private final LeafNodeElements pLeafNode;
	private final ReferenceElements pReference;
	private final OptionElements pOption;
	private final BasicTypeElements eBasicType;
	private final OptionKeyElements eOptionKey;
	private final TerminalRule tDELETATION_MARK;
	private final TerminalRule tMODIFICATION_MARK;
	private final TerminalRule tFORMAT;
	private final TerminalRule tUNIQUENESS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DataDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataModel = new DataModelElements();
		this.pDataDescription = new DataDescriptionElements();
		this.pDataSource = new DataSourceElements();
		this.pDataFragment = new DataFragmentElements();
		this.pTypeSpecification = new TypeSpecificationElements();
		this.pDataType = new DataTypeElements();
		this.pEnumeration = new EnumerationElements();
		this.pNode = new NodeElements();
		this.pCompositeNode = new CompositeNodeElements();
		this.pLeafNode = new LeafNodeElements();
		this.pReference = new ReferenceElements();
		this.pOption = new OptionElements();
		this.eBasicType = new BasicTypeElements();
		this.eOptionKey = new OptionKeyElements();
		this.tDELETATION_MARK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.DELETATION_MARK");
		this.tMODIFICATION_MARK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.MODIFICATION_MARK");
		this.tFORMAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.FORMAT");
		this.tUNIQUENESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.datadesc.DataDsl.UNIQUENESS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eagledata.core.dsl.datadesc.DataDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataModel data::DataModel:
	//	descriptions+=DataDescription ("," descriptions+=DataDescription)*
	public DataModelElements getDataModelAccess() {
		return pDataModel;
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}
	
	//DataDescription data::DataDescription:
	//	TypeSpecification | DataSource | DataFragment
	public DataDescriptionElements getDataDescriptionAccess() {
		return pDataDescription;
	}
	
	public ParserRule getDataDescriptionRule() {
		return getDataDescriptionAccess().getRule();
	}
	
	//DataSource data::DataSource:
	//	'description' format=FORMAT name=ID (':' fragments+=[data::DataFragment] (',' fragments+=[data::DataFragment])*)? '{'
	//	(nodes+=Node ("," nodes+=Node)*)?
	//	'}' ('{' options+=Option ("," options+=Option)* '}')?
	public DataSourceElements getDataSourceAccess() {
		return pDataSource;
	}
	
	public ParserRule getDataSourceRule() {
		return getDataSourceAccess().getRule();
	}
	
	//DataFragment data::DataFragment:
	//	'fragment' name=ID (':' fragments+=[data::DataFragment] (',' fragments+=[data::DataFragment])*)? '{' (nodes+=Node
	//	("," nodes+=Node)*)?
	//	'}'
	public DataFragmentElements getDataFragmentAccess() {
		return pDataFragment;
	}
	
	public ParserRule getDataFragmentRule() {
		return getDataFragmentAccess().getRule();
	}
	
	//TypeSpecification data::TypeSpecification:
	//	DataType | Enumeration
	public TypeSpecificationElements getTypeSpecificationAccess() {
		return pTypeSpecification;
	}
	
	public ParserRule getTypeSpecificationRule() {
		return getTypeSpecificationAccess().getRule();
	}
	
	//DataType data::DataType:
	//	'datatype' name=ID ':' refine=BasicType ('{' options+=Option ("," options+=Option)* '}')?
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Enumeration data::Enumeration:
	//	'enumeration' name=ID "{" values+=STRING (',' values+=STRING)* "}"
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//Node data::Node:
	//	LeafNode | CompositeNode
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//CompositeNode data::CompositeNode:
	//	environment?=">"? name=ID representedAs=STRING? (':' extends+=[data::CompositeNode] (','
	//	extends+=[data::CompositeNode])*)? '{' (subnodes+=Node ("," subnodes+=Node)*)
	//	'}' ('{' options+=Option ("," options+=Option)* '}')?
	public CompositeNodeElements getCompositeNodeAccess() {
		return pCompositeNode;
	}
	
	public ParserRule getCompositeNodeRule() {
		return getCompositeNodeAccess().getRule();
	}
	
	//LeafNode data::LeafNode:
	//	uniqueness=UNIQUENESS? (type=BasicType | typeCall=[data::TypeSpecification]) keyword?="#"? name=ID
	//	representedAs=STRING? ('{' options+=Option ("," options+=Option)* '}')?
	public LeafNodeElements getLeafNodeAccess() {
		return pLeafNode;
	}
	
	public ParserRule getLeafNodeRule() {
		return getLeafNodeAccess().getRule();
	}
	
	//Reference data::Reference:
	//	"ref:" referenceType=[data::CompositeNode]
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//Option data::Option:
	//	key=OptionKey '=' value=STRING | INT
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//enum BasicType returns data::BasicType:
	//	string | int | real | date | time | year | month | day | boolean | lat | long;
	public BasicTypeElements getBasicTypeAccess() {
		return eBasicType;
	}
	
	public EnumRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//enum OptionKey returns data::OptionKey:
	//	minLength | maxLength | casesensitive | min | max | null | separator | default | regex | flags | decimalchar |
	//	pattern | format;
	public OptionKeyElements getOptionKeyAccess() {
		return eOptionKey;
	}
	
	public EnumRule getOptionKeyRule() {
		return getOptionKeyAccess().getRule();
	}
	
	//terminal DELETATION_MARK:
	//	'REMOVE';
	public TerminalRule getDELETATION_MARKRule() {
		return tDELETATION_MARK;
	}
	
	//terminal MODIFICATION_MARK:
	//	'RENAME' | 'RETYPE';
	public TerminalRule getMODIFICATION_MARKRule() {
		return tMODIFICATION_MARK;
	}
	
	//terminal FORMAT:
	//	'CSV' | 'JSON' | 'XML';
	public TerminalRule getFORMATRule() {
		return tFORMAT;
	}
	
	//terminal UNIQUENESS:
	//	'KEY' | 'UNIQUE';
	public TerminalRule getUNIQUENESSRule() {
		return tUNIQUENESS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
