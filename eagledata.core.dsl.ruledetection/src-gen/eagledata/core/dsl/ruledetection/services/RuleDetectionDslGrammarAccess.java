/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.ruledetection.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RuleDetectionDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RuleModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.RuleModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0_0 = (RuleCall)cImportsAssignment_0_0.eContents().get(0);
		private final Assignment cImportsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_0_1_0 = (RuleCall)cImportsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsRuleParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsRuleElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//RuleModel rule::RuleModel:
		//	(imports+=Import imports+=Import*)? (elements+=Rule elements+=RuleElement*)?
		@Override public ParserRule getRule() { return rule; }
		
		//(imports+=Import imports+=Import*)? (elements+=Rule elements+=RuleElement*)?
		public Group getGroup() { return cGroup; }
		
		//(imports+=Import imports+=Import*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//imports+=Import
		public Assignment getImportsAssignment_0_0() { return cImportsAssignment_0_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0_0() { return cImportsImportParserRuleCall_0_0_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0_1() { return cImportsAssignment_0_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_1_0() { return cImportsImportParserRuleCall_0_1_0; }
		
		//(elements+=Rule elements+=RuleElement*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//elements+=Rule
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }
		
		//Rule
		public RuleCall getElementsRuleParserRuleCall_1_0_0() { return cElementsRuleParserRuleCall_1_0_0; }
		
		//elements+=RuleElement*
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//RuleElement
		public RuleCall getElementsRuleElementParserRuleCall_1_1_0() { return cElementsRuleElementParserRuleCall_1_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import streaming::Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class RuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.RuleElement");
		private final RuleCall cActionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RuleElement rule::RuleElement:
		//	Action
		@Override public ParserRule getRule() { return rule; }
		
		//Action
		public RuleCall getActionParserRuleCall() { return cActionParserRuleCall; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEventPhraseCrossReference_3_0 = (CrossReference)cEventAssignment_3.eContents().get(0);
		private final RuleCall cEventPhraseIDTerminalRuleCall_3_0_1 = (RuleCall)cEventPhraseCrossReference_3_0.eContents().get(1);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cActionsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cActionsActionParserRuleCall_5_0_0 = (RuleCall)cActionsAssignment_5_0.eContents().get(0);
		private final Assignment cActionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_5_1_0 = (RuleCall)cActionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Rule rule::Rule:
		//	name=ID '{'
		//	'on' event=[streaming::Phrase]
		//	'do' (actions+=Action actions+=Action*)
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' 'on' event=[streaming::Phrase] 'do' (actions+=Action actions+=Action*) '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//event=[streaming::Phrase]
		public Assignment getEventAssignment_3() { return cEventAssignment_3; }
		
		//[streaming::Phrase]
		public CrossReference getEventPhraseCrossReference_3_0() { return cEventPhraseCrossReference_3_0; }
		
		//ID
		public RuleCall getEventPhraseIDTerminalRuleCall_3_0_1() { return cEventPhraseIDTerminalRuleCall_3_0_1; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//(actions+=Action actions+=Action*)
		public Group getGroup_5() { return cGroup_5; }
		
		//actions+=Action
		public Assignment getActionsAssignment_5_0() { return cActionsAssignment_5_0; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0_0() { return cActionsActionParserRuleCall_5_0_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_5_1() { return cActionsAssignment_5_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_1_0() { return cActionsActionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Action rule::Action:
		//	Query | Message
		@Override public ParserRule getRule() { return rule; }
		
		//Query | Message
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Query
		public RuleCall getQueryParserRuleCall_0() { return cQueryParserRuleCall_0; }
		
		//Message
		public RuleCall getMessageParserRuleCall_1() { return cMessageParserRuleCall_1; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectSelectParserRuleCall_2_0 = (RuleCall)cSelectAssignment_2.eContents().get(0);
		private final Assignment cWhereAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhereWhereParserRuleCall_3_0 = (RuleCall)cWhereAssignment_3.eContents().get(0);
		
		//Query rule::Query:
		//	name=ID ':' select=Select where=Where?
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' select=Select where=Where?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//select=Select
		public Assignment getSelectAssignment_2() { return cSelectAssignment_2; }
		
		//Select
		public RuleCall getSelectSelectParserRuleCall_2_0() { return cSelectSelectParserRuleCall_2_0; }
		
		//where=Where?
		public Assignment getWhereAssignment_3() { return cWhereAssignment_3; }
		
		//Where
		public RuleCall getWhereWhereParserRuleCall_3_0() { return cWhereWhereParserRuleCall_3_0; }
	}
	public class AddingSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.AddingSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationSELECTOPERATORTerminalRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cElementConceptCrossReference_1_0_0 = (CrossReference)cElementAssignment_1_0.eContents().get(0);
		private final RuleCall cElementConceptIDTerminalRuleCall_1_0_0_1 = (RuleCall)cElementConceptCrossReference_1_0_0.eContents().get(1);
		private final Assignment cAllAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cAllAsteriskKeyword_1_1_0 = (Keyword)cAllAssignment_1_1.eContents().get(0);
		
		//AddingSelect rule::AddingSelect:
		//	operation=SELECTOPERATOR (element=[streaming::Concept]? | all?='*')
		@Override public ParserRule getRule() { return rule; }
		
		//operation=SELECTOPERATOR (element=[streaming::Concept]? | all?='*')
		public Group getGroup() { return cGroup; }
		
		//operation=SELECTOPERATOR
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//SELECTOPERATOR
		public RuleCall getOperationSELECTOPERATORTerminalRuleCall_0_0() { return cOperationSELECTOPERATORTerminalRuleCall_0_0; }
		
		//(element=[streaming::Concept]? | all?='*')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//element=[streaming::Concept]?
		public Assignment getElementAssignment_1_0() { return cElementAssignment_1_0; }
		
		//[streaming::Concept]
		public CrossReference getElementConceptCrossReference_1_0_0() { return cElementConceptCrossReference_1_0_0; }
		
		//ID
		public RuleCall getElementConceptIDTerminalRuleCall_1_0_0_1() { return cElementConceptIDTerminalRuleCall_1_0_0_1; }
		
		//all?='*'
		public Assignment getAllAssignment_1_1() { return cAllAssignment_1_1; }
		
		//'*'
		public Keyword getAllAsteriskKeyword_1_1_0() { return cAllAsteriskKeyword_1_1_0; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Select");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddingSelectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetSelectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Select rule::Select:
		//	AddingSelect | SetSelect
		@Override public ParserRule getRule() { return rule; }
		
		//AddingSelect | SetSelect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddingSelect
		public RuleCall getAddingSelectParserRuleCall_0() { return cAddingSelectParserRuleCall_0; }
		
		//SetSelect
		public RuleCall getSetSelectParserRuleCall_1() { return cSetSelectParserRuleCall_1; }
	}
	public class SetSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.SetSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetSelectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSelectionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cSelectionNodeCrossReference_2_0_0 = (CrossReference)cSelectionAssignment_2_0.eContents().get(0);
		private final RuleCall cSelectionNodeIDTerminalRuleCall_2_0_0_1 = (RuleCall)cSelectionNodeCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSelectionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cSelectionNodeCrossReference_2_1_1_0 = (CrossReference)cSelectionAssignment_2_1_1.eContents().get(0);
		private final RuleCall cSelectionNodeIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cSelectionNodeCrossReference_2_1_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOperatorSETOPERATORTerminalRuleCall_3_0_0 = (RuleCall)cOperatorAssignment_3_0.eContents().get(0);
		private final Assignment cSelectAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSelectSetSelectParserRuleCall_3_1_0 = (RuleCall)cSelectAssignment_3_1.eContents().get(0);
		
		//SetSelect rule::SetSelect:
		//	{rule::SetSelect}
		//	//'select' (selection+=Selection ( "," selection+=Selection)*)?
		//	'select' (selection+=[datamodel::Node] (',' selection+=[datamodel::Node])*) (operator=SETOPERATOR select=SetSelect)?
		@Override public ParserRule getRule() { return rule; }
		
		//{rule::SetSelect} //'select' (selection+=Selection ( "," selection+=Selection)*)?
		//'select' (selection+=[datamodel::Node] (',' selection+=[datamodel::Node])*) (operator=SETOPERATOR select=SetSelect)?
		public Group getGroup() { return cGroup; }
		
		//{rule::SetSelect}
		public Action getSetSelectAction_0() { return cSetSelectAction_0; }
		
		////'select' (selection+=Selection ( "," selection+=Selection)*)?
		//'select'
		public Keyword getSelectKeyword_1() { return cSelectKeyword_1; }
		
		//(selection+=[datamodel::Node] (',' selection+=[datamodel::Node])*)
		public Group getGroup_2() { return cGroup_2; }
		
		//selection+=[datamodel::Node]
		public Assignment getSelectionAssignment_2_0() { return cSelectionAssignment_2_0; }
		
		//[datamodel::Node]
		public CrossReference getSelectionNodeCrossReference_2_0_0() { return cSelectionNodeCrossReference_2_0_0; }
		
		//ID
		public RuleCall getSelectionNodeIDTerminalRuleCall_2_0_0_1() { return cSelectionNodeIDTerminalRuleCall_2_0_0_1; }
		
		//(',' selection+=[datamodel::Node])*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//selection+=[datamodel::Node]
		public Assignment getSelectionAssignment_2_1_1() { return cSelectionAssignment_2_1_1; }
		
		//[datamodel::Node]
		public CrossReference getSelectionNodeCrossReference_2_1_1_0() { return cSelectionNodeCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getSelectionNodeIDTerminalRuleCall_2_1_1_0_1() { return cSelectionNodeIDTerminalRuleCall_2_1_1_0_1; }
		
		//(operator=SETOPERATOR select=SetSelect)?
		public Group getGroup_3() { return cGroup_3; }
		
		//operator=SETOPERATOR
		public Assignment getOperatorAssignment_3_0() { return cOperatorAssignment_3_0; }
		
		//SETOPERATOR
		public RuleCall getOperatorSETOPERATORTerminalRuleCall_3_0_0() { return cOperatorSETOPERATORTerminalRuleCall_3_0_0; }
		
		//select=SetSelect
		public Assignment getSelectAssignment_3_1() { return cSelectAssignment_3_1; }
		
		//SetSelect
		public RuleCall getSelectSetSelectParserRuleCall_3_1_0() { return cSelectSetSelectParserRuleCall_3_1_0; }
	}
	public class WhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Where");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLeftConceptCrossReference_1_0 = (CrossReference)cLeftAssignment_1.eContents().get(0);
		private final RuleCall cLeftConceptIDTerminalRuleCall_1_0_1 = (RuleCall)cLeftConceptCrossReference_1_0.eContents().get(1);
		private final Assignment cLogicalOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0 = (RuleCall)cLogicalOperatorAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cRightVariableAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cRightVariableConceptCrossReference_3_0_0 = (CrossReference)cRightVariableAssignment_3_0.eContents().get(0);
		private final RuleCall cRightVariableConceptIDTerminalRuleCall_3_0_0_1 = (RuleCall)cRightVariableConceptCrossReference_3_0_0.eContents().get(1);
		private final Assignment cRightAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cRightINTTerminalRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		
		/// *SetOperatorPatternSelect returns rule::SetOperator:
		//	UnionPatternSelect | IntersectPatternSelect | ExceptPatternSelect;
		//
		//UnionPatternSelect returns rule::Union:
		//	'union' select=SetSelect;
		//
		//IntersectPatternSelect returns rule::Intersect:
		//	'intersect' select=SetSelect;
		//
		//ExceptPatternSelect returns rule::Except:
		//	'except' select=SetSelect;* / //Selection returns rule::Selection:
		////(selector=[streaming::Concept | ID] '.')? (root+=[streaming::Concept | ID] ('.'root+=[streaming::Concept | ID])*)
		////(selector=[streaming::Concept | ID] '.')? (root+=[streaming::Concept | ID] ('.'root+=[streaming::Concept | ID])*)
		////;
		/// *enum OperationAddingSelect returns rule::OperationAddingSelect:
		//	count = 'count' //| min = 'min' | max = 'max' | add = 'add' | avg = 'avg'
		//;* / Where rule::Where:
		//	'where' left=[streaming::Concept] logicalOperator=LOGICALOPERATOR (rightVariable=[streaming::Concept] | right=INT)
		@Override public ParserRule getRule() { return rule; }
		
		//'where' left=[streaming::Concept] logicalOperator=LOGICALOPERATOR (rightVariable=[streaming::Concept] | right=INT)
		public Group getGroup() { return cGroup; }
		
		//'where'
		public Keyword getWhereKeyword_0() { return cWhereKeyword_0; }
		
		//left=[streaming::Concept]
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//[streaming::Concept]
		public CrossReference getLeftConceptCrossReference_1_0() { return cLeftConceptCrossReference_1_0; }
		
		//ID
		public RuleCall getLeftConceptIDTerminalRuleCall_1_0_1() { return cLeftConceptIDTerminalRuleCall_1_0_1; }
		
		//logicalOperator=LOGICALOPERATOR
		public Assignment getLogicalOperatorAssignment_2() { return cLogicalOperatorAssignment_2; }
		
		//LOGICALOPERATOR
		public RuleCall getLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0() { return cLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0; }
		
		//(rightVariable=[streaming::Concept] | right=INT)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//rightVariable=[streaming::Concept]
		public Assignment getRightVariableAssignment_3_0() { return cRightVariableAssignment_3_0; }
		
		//[streaming::Concept]
		public CrossReference getRightVariableConceptCrossReference_3_0_0() { return cRightVariableConceptCrossReference_3_0_0; }
		
		//ID
		public RuleCall getRightVariableConceptIDTerminalRuleCall_3_0_0_1() { return cRightVariableConceptIDTerminalRuleCall_3_0_0_1; }
		
		//right=INT
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }
		
		//INT
		public RuleCall getRightINTTerminalRuleCall_3_1_0() { return cRightINTTerminalRuleCall_3_1_0; }
	}
	public class RecipientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Recipient");
		private final RuleCall cConcreteRecipientParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Recipient rule::Recipient:
		//	ConcreteRecipient
		@Override public ParserRule getRule() { return rule; }
		
		//ConcreteRecipient
		public RuleCall getConcreteRecipientParserRuleCall() { return cConcreteRecipientParserRuleCall; }
	}
	public class ConcreteRecipientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.ConcreteRecipient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUserAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUserSTRINGTerminalRuleCall_1_0 = (RuleCall)cUserAssignment_1.eContents().get(0);
		
		/// *QueryResponseRecipient returns QueryResponseRecipient:
		//	query=[TwitterQuery|STRING]
		//;* / ConcreteRecipient rule::ConcreteRecipient:
		//	'@' user=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//'@' user=STRING
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//user=STRING
		public Assignment getUserAssignment_1() { return cUserAssignment_1; }
		
		//STRING
		public RuleCall getUserSTRINGTerminalRuleCall_1_0() { return cUserSTRINGTerminalRuleCall_1_0; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cLogicalOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0 = (RuleCall)cLogicalOperatorAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		////===========================================================================================
		////When --> Expressions
		//When rule::When:
		//	'when' left=Expression logicalOperator=LOGICALOPERATOR right=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//'when' left=Expression logicalOperator=LOGICALOPERATOR right=Expression
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//logicalOperator=LOGICALOPERATOR
		public Assignment getLogicalOperatorAssignment_2() { return cLogicalOperatorAssignment_2; }
		
		//LOGICALOPERATOR
		public RuleCall getLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0() { return cLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlainExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression rule::Expression:
		//	PlainExpression | ComplexExpression
		@Override public ParserRule getRule() { return rule; }
		
		//PlainExpression | ComplexExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlainExpression
		public RuleCall getPlainExpressionParserRuleCall_0() { return cPlainExpressionParserRuleCall_0; }
		
		//ComplexExpression
		public RuleCall getComplexExpressionParserRuleCall_1() { return cComplexExpressionParserRuleCall_1; }
	}
	public class PlainExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.PlainExpression");
		private final Assignment cPlainOperandAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPlainOperandPlainOperandParserRuleCall_0 = (RuleCall)cPlainOperandAssignment.eContents().get(0);
		
		//PlainExpression rule::Expression:
		//	plainOperand=PlainOperand
		@Override public ParserRule getRule() { return rule; }
		
		//plainOperand=PlainOperand
		public Assignment getPlainOperandAssignment() { return cPlainOperandAssignment; }
		
		//PlainOperand
		public RuleCall getPlainOperandPlainOperandParserRuleCall_0() { return cPlainOperandPlainOperandParserRuleCall_0; }
	}
	public class ComplexExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.ComplexExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlainOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlainOperandPlainOperandParserRuleCall_1_0 = (RuleCall)cPlainOperandAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cComplexOperandsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cComplexOperandsComplexOperandParserRuleCall_2_0_0 = (RuleCall)cComplexOperandsAssignment_2_0.eContents().get(0);
		private final Assignment cComplexOperandsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComplexOperandsComplexOperandParserRuleCall_2_1_0 = (RuleCall)cComplexOperandsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComplexExpression rule::Expression:
		//	'(' plainOperand=PlainOperand (complexOperands+=ComplexOperand complexOperands+=ComplexOperand*)? ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'(' plainOperand=PlainOperand (complexOperands+=ComplexOperand complexOperands+=ComplexOperand*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//plainOperand=PlainOperand
		public Assignment getPlainOperandAssignment_1() { return cPlainOperandAssignment_1; }
		
		//PlainOperand
		public RuleCall getPlainOperandPlainOperandParserRuleCall_1_0() { return cPlainOperandPlainOperandParserRuleCall_1_0; }
		
		//(complexOperands+=ComplexOperand complexOperands+=ComplexOperand*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//complexOperands+=ComplexOperand
		public Assignment getComplexOperandsAssignment_2_0() { return cComplexOperandsAssignment_2_0; }
		
		//ComplexOperand
		public RuleCall getComplexOperandsComplexOperandParserRuleCall_2_0_0() { return cComplexOperandsComplexOperandParserRuleCall_2_0_0; }
		
		//complexOperands+=ComplexOperand*
		public Assignment getComplexOperandsAssignment_2_1() { return cComplexOperandsAssignment_2_1; }
		
		//ComplexOperand
		public RuleCall getComplexOperandsComplexOperandParserRuleCall_2_1_0() { return cComplexOperandsComplexOperandParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlainOperandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operand rule::Operand:
		//	PlainOperand | ComplexOperand
		@Override public ParserRule getRule() { return rule; }
		
		//PlainOperand | ComplexOperand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlainOperand
		public RuleCall getPlainOperandParserRuleCall_0() { return cPlainOperandParserRuleCall_0; }
		
		//ComplexOperand
		public RuleCall getComplexOperandParserRuleCall_1() { return cComplexOperandParserRuleCall_1; }
	}
	public class PlainOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.PlainOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumeralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PlainOperand rule::PlainOperand:
		//	Numeral | QueryOperand
		@Override public ParserRule getRule() { return rule; }
		
		//Numeral | QueryOperand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Numeral
		public RuleCall getNumeralParserRuleCall_0() { return cNumeralParserRuleCall_0; }
		
		//QueryOperand
		public RuleCall getQueryOperandParserRuleCall_1() { return cQueryOperandParserRuleCall_1; }
	}
	public class NumeralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Numeral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Numeral rule::Numeral:
		//	value=DOUBLE
		@Override public ParserRule getRule() { return rule; }
		
		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}
	public class QueryOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.QueryOperand");
		private final Assignment cQueryAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cQueryQueryCrossReference_0 = (CrossReference)cQueryAssignment.eContents().get(0);
		private final RuleCall cQueryQueryIDTerminalRuleCall_0_1 = (RuleCall)cQueryQueryCrossReference_0.eContents().get(1);
		
		//QueryOperand rule::QueryOperand:
		//	query=[rule::Query]
		@Override public ParserRule getRule() { return rule; }
		
		//query=[rule::Query]
		public Assignment getQueryAssignment() { return cQueryAssignment; }
		
		//[rule::Query]
		public CrossReference getQueryQueryCrossReference_0() { return cQueryQueryCrossReference_0; }
		
		//ID
		public RuleCall getQueryQueryIDTerminalRuleCall_0_1() { return cQueryQueryIDTerminalRuleCall_0_1; }
	}
	public class ComplexOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.ComplexOperand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOPERATORTerminalRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ComplexOperand rule::ComplexOperand:
		//	operator=OPERATOR expression=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//operator=OPERATOR expression=Expression
		public Group getGroup() { return cGroup; }
		
		//operator=OPERATOR
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//OPERATOR
		public RuleCall getOperatorOPERATORTerminalRuleCall_0_0() { return cOperatorOPERATORTerminalRuleCall_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cComposeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMessageSTRINGTerminalRuleCall_3_0 = (RuleCall)cMessageAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRecipientAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRecipientRecipientParserRuleCall_5_0 = (RuleCall)cRecipientAssignment_5.eContents().get(0);
		
		/// *ArithmeticalOperator returns rule::ArithmeticalOperator:
		//	Addition | Subtraction | Multiplication | Division;
		//
		//
		//Addition returns rule::Addition: '+';
		//
		//Subtraction returns rule::Subtraction: '-';
		//
		//Multiplication returns rule::Multiplication: '*';
		//
		//Division returns rule::Division: '/';* / / *LogicalOperator returns rule::LogicalOperator:
		//	MoreThan | LessThan | MoreEqual | LessEqual | Equal;
		//
		//MoreThan returns expression::MoreThan:
		//	{expression::MoreThan} '>' ;
		//	
		//LessThan returns expression::LessThan:
		//	{expression::LessThan} '<' ;
		//
		//MoreEqual returns expression::MoreEqual:
		//	{expression::MoreEqual} '>=' ;
		//	
		//LessEqual returns expression::LessEqual:
		//	{expression::LessEqual} '<=' ;
		//	
		//Equal returns expression::Equal:
		//	{expression::Equal} '=' ;* / / *EString returns ecore::EString:
		//	STRING | ID;
		//
		//EBoolean returns ecore::EBoolean:
		//	'true' | 'false';
		//	
		//EInt returns ecore::EInt:
		//	'-'? INT;
		//	
		//EFloat returns ecore::EFloat:
		//	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;* / Message rule::Message:
		//	name=ID ':' 'compose' message=STRING 'to' recipient=Recipient
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' 'compose' message=STRING 'to' recipient=Recipient
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'compose'
		public Keyword getComposeKeyword_2() { return cComposeKeyword_2; }
		
		//message=STRING
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_3_0() { return cMessageSTRINGTerminalRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//recipient=Recipient
		public Assignment getRecipientAssignment_5() { return cRecipientAssignment_5; }
		
		//Recipient
		public RuleCall getRecipientRecipientParserRuleCall_5_0() { return cRecipientRecipientParserRuleCall_5_0; }
	}
	
	
	private final RuleModelElements pRuleModel;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final RuleElementElements pRuleElement;
	private final RuleElements pRule;
	private final ActionElements pAction;
	private final QueryElements pQuery;
	private final AddingSelectElements pAddingSelect;
	private final SelectElements pSelect;
	private final SetSelectElements pSetSelect;
	private final WhereElements pWhere;
	private final RecipientElements pRecipient;
	private final ConcreteRecipientElements pConcreteRecipient;
	private final WhenElements pWhen;
	private final ExpressionElements pExpression;
	private final PlainExpressionElements pPlainExpression;
	private final ComplexExpressionElements pComplexExpression;
	private final OperandElements pOperand;
	private final PlainOperandElements pPlainOperand;
	private final NumeralElements pNumeral;
	private final QueryOperandElements pQueryOperand;
	private final ComplexOperandElements pComplexOperand;
	private final MessageElements pMessage;
	private final TerminalRule tOPERATOR;
	private final TerminalRule tLOGICALOPERATOR;
	private final TerminalRule tSELECTOPERATOR;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tSETOPERATOR;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RuleDetectionDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRuleModel = new RuleModelElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pRuleElement = new RuleElementElements();
		this.pRule = new RuleElements();
		this.pAction = new ActionElements();
		this.pQuery = new QueryElements();
		this.pAddingSelect = new AddingSelectElements();
		this.pSelect = new SelectElements();
		this.pSetSelect = new SetSelectElements();
		this.pWhere = new WhereElements();
		this.pRecipient = new RecipientElements();
		this.pConcreteRecipient = new ConcreteRecipientElements();
		this.pWhen = new WhenElements();
		this.pExpression = new ExpressionElements();
		this.pPlainExpression = new PlainExpressionElements();
		this.pComplexExpression = new ComplexExpressionElements();
		this.pOperand = new OperandElements();
		this.pPlainOperand = new PlainOperandElements();
		this.pNumeral = new NumeralElements();
		this.pQueryOperand = new QueryOperandElements();
		this.pComplexOperand = new ComplexOperandElements();
		this.pMessage = new MessageElements();
		this.tOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.OPERATOR");
		this.tLOGICALOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.LOGICALOPERATOR");
		this.tSELECTOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.SELECTOPERATOR");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.DOUBLE");
		this.tSETOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eagledata.core.dsl.ruledetection.RuleDetectionDsl.SETOPERATOR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eagledata.core.dsl.ruledetection.RuleDetectionDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RuleModel rule::RuleModel:
	//	(imports+=Import imports+=Import*)? (elements+=Rule elements+=RuleElement*)?
	public RuleModelElements getRuleModelAccess() {
		return pRuleModel;
	}
	
	public ParserRule getRuleModelRule() {
		return getRuleModelAccess().getRule();
	}
	
	//Import streaming::Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//RuleElement rule::RuleElement:
	//	Action
	public RuleElementElements getRuleElementAccess() {
		return pRuleElement;
	}
	
	public ParserRule getRuleElementRule() {
		return getRuleElementAccess().getRule();
	}
	
	//Rule rule::Rule:
	//	name=ID '{'
	//	'on' event=[streaming::Phrase]
	//	'do' (actions+=Action actions+=Action*)
	//	'}'
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Action rule::Action:
	//	Query | Message
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Query rule::Query:
	//	name=ID ':' select=Select where=Where?
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//AddingSelect rule::AddingSelect:
	//	operation=SELECTOPERATOR (element=[streaming::Concept]? | all?='*')
	public AddingSelectElements getAddingSelectAccess() {
		return pAddingSelect;
	}
	
	public ParserRule getAddingSelectRule() {
		return getAddingSelectAccess().getRule();
	}
	
	//Select rule::Select:
	//	AddingSelect | SetSelect
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//SetSelect rule::SetSelect:
	//	{rule::SetSelect}
	//	//'select' (selection+=Selection ( "," selection+=Selection)*)?
	//	'select' (selection+=[datamodel::Node] (',' selection+=[datamodel::Node])*) (operator=SETOPERATOR select=SetSelect)?
	public SetSelectElements getSetSelectAccess() {
		return pSetSelect;
	}
	
	public ParserRule getSetSelectRule() {
		return getSetSelectAccess().getRule();
	}
	
	/// *SetOperatorPatternSelect returns rule::SetOperator:
	//	UnionPatternSelect | IntersectPatternSelect | ExceptPatternSelect;
	//
	//UnionPatternSelect returns rule::Union:
	//	'union' select=SetSelect;
	//
	//IntersectPatternSelect returns rule::Intersect:
	//	'intersect' select=SetSelect;
	//
	//ExceptPatternSelect returns rule::Except:
	//	'except' select=SetSelect;* / //Selection returns rule::Selection:
	////(selector=[streaming::Concept | ID] '.')? (root+=[streaming::Concept | ID] ('.'root+=[streaming::Concept | ID])*)
	////(selector=[streaming::Concept | ID] '.')? (root+=[streaming::Concept | ID] ('.'root+=[streaming::Concept | ID])*)
	////;
	/// *enum OperationAddingSelect returns rule::OperationAddingSelect:
	//	count = 'count' //| min = 'min' | max = 'max' | add = 'add' | avg = 'avg'
	//;* / Where rule::Where:
	//	'where' left=[streaming::Concept] logicalOperator=LOGICALOPERATOR (rightVariable=[streaming::Concept] | right=INT)
	public WhereElements getWhereAccess() {
		return pWhere;
	}
	
	public ParserRule getWhereRule() {
		return getWhereAccess().getRule();
	}
	
	//Recipient rule::Recipient:
	//	ConcreteRecipient
	public RecipientElements getRecipientAccess() {
		return pRecipient;
	}
	
	public ParserRule getRecipientRule() {
		return getRecipientAccess().getRule();
	}
	
	/// *QueryResponseRecipient returns QueryResponseRecipient:
	//	query=[TwitterQuery|STRING]
	//;* / ConcreteRecipient rule::ConcreteRecipient:
	//	'@' user=STRING
	public ConcreteRecipientElements getConcreteRecipientAccess() {
		return pConcreteRecipient;
	}
	
	public ParserRule getConcreteRecipientRule() {
		return getConcreteRecipientAccess().getRule();
	}
	
	////===========================================================================================
	////When --> Expressions
	//When rule::When:
	//	'when' left=Expression logicalOperator=LOGICALOPERATOR right=Expression
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//Expression rule::Expression:
	//	PlainExpression | ComplexExpression
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//PlainExpression rule::Expression:
	//	plainOperand=PlainOperand
	public PlainExpressionElements getPlainExpressionAccess() {
		return pPlainExpression;
	}
	
	public ParserRule getPlainExpressionRule() {
		return getPlainExpressionAccess().getRule();
	}
	
	//ComplexExpression rule::Expression:
	//	'(' plainOperand=PlainOperand (complexOperands+=ComplexOperand complexOperands+=ComplexOperand*)? ')'
	public ComplexExpressionElements getComplexExpressionAccess() {
		return pComplexExpression;
	}
	
	public ParserRule getComplexExpressionRule() {
		return getComplexExpressionAccess().getRule();
	}
	
	//Operand rule::Operand:
	//	PlainOperand | ComplexOperand
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//PlainOperand rule::PlainOperand:
	//	Numeral | QueryOperand
	public PlainOperandElements getPlainOperandAccess() {
		return pPlainOperand;
	}
	
	public ParserRule getPlainOperandRule() {
		return getPlainOperandAccess().getRule();
	}
	
	//Numeral rule::Numeral:
	//	value=DOUBLE
	public NumeralElements getNumeralAccess() {
		return pNumeral;
	}
	
	public ParserRule getNumeralRule() {
		return getNumeralAccess().getRule();
	}
	
	//QueryOperand rule::QueryOperand:
	//	query=[rule::Query]
	public QueryOperandElements getQueryOperandAccess() {
		return pQueryOperand;
	}
	
	public ParserRule getQueryOperandRule() {
		return getQueryOperandAccess().getRule();
	}
	
	//ComplexOperand rule::ComplexOperand:
	//	operator=OPERATOR expression=Expression
	public ComplexOperandElements getComplexOperandAccess() {
		return pComplexOperand;
	}
	
	public ParserRule getComplexOperandRule() {
		return getComplexOperandAccess().getRule();
	}
	
	/// *ArithmeticalOperator returns rule::ArithmeticalOperator:
	//	Addition | Subtraction | Multiplication | Division;
	//
	//
	//Addition returns rule::Addition: '+';
	//
	//Subtraction returns rule::Subtraction: '-';
	//
	//Multiplication returns rule::Multiplication: '*';
	//
	//Division returns rule::Division: '/';* / / *LogicalOperator returns rule::LogicalOperator:
	//	MoreThan | LessThan | MoreEqual | LessEqual | Equal;
	//
	//MoreThan returns expression::MoreThan:
	//	{expression::MoreThan} '>' ;
	//	
	//LessThan returns expression::LessThan:
	//	{expression::LessThan} '<' ;
	//
	//MoreEqual returns expression::MoreEqual:
	//	{expression::MoreEqual} '>=' ;
	//	
	//LessEqual returns expression::LessEqual:
	//	{expression::LessEqual} '<=' ;
	//	
	//Equal returns expression::Equal:
	//	{expression::Equal} '=' ;* / / *EString returns ecore::EString:
	//	STRING | ID;
	//
	//EBoolean returns ecore::EBoolean:
	//	'true' | 'false';
	//	
	//EInt returns ecore::EInt:
	//	'-'? INT;
	//	
	//EFloat returns ecore::EFloat:
	//	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;* / Message rule::Message:
	//	name=ID ':' 'compose' message=STRING 'to' recipient=Recipient
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//terminal OPERATOR:
	//	'+' | '-' | '*' | 'DIV';
	public TerminalRule getOPERATORRule() {
		return tOPERATOR;
	}
	
	//terminal LOGICALOPERATOR:
	//	'>' | '<' | '>=' | '<=' | '=';
	public TerminalRule getLOGICALOPERATORRule() {
		return tLOGICALOPERATOR;
	}
	
	//terminal SELECTOPERATOR:
	//	'COUNT' | 'MIN' | 'MAX';
	public TerminalRule getSELECTOPERATORRule() {
		return tSELECTOPERATOR;
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal SETOPERATOR:
	//	'UNION' | 'EXCEPT' | 'INTERSECT';
	public TerminalRule getSETOPERATORRule() {
		return tSETOPERATOR;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
