/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.ruledetection.ruleDetectionDsl.impl;

import eagledata.core.dsl.pattern.streamingDsl.Concept;

import eagledata.core.dsl.ruledetection.ruleDetectionDsl.RuleDetectionDslPackage;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.Where;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Where</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eagledata.core.dsl.ruledetection.ruleDetectionDsl.impl.WhereImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link eagledata.core.dsl.ruledetection.ruleDetectionDsl.impl.WhereImpl#getLogicalOperator <em>Logical Operator</em>}</li>
 *   <li>{@link eagledata.core.dsl.ruledetection.ruleDetectionDsl.impl.WhereImpl#getRightVariable <em>Right Variable</em>}</li>
 *   <li>{@link eagledata.core.dsl.ruledetection.ruleDetectionDsl.impl.WhereImpl#getRight <em>Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WhereImpl extends MinimalEObjectImpl.Container implements Where
{
  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected Concept left;

  /**
   * The default value of the '{@link #getLogicalOperator() <em>Logical Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicalOperator()
   * @generated
   * @ordered
   */
  protected static final String LOGICAL_OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLogicalOperator() <em>Logical Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicalOperator()
   * @generated
   * @ordered
   */
  protected String logicalOperator = LOGICAL_OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getRightVariable() <em>Right Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightVariable()
   * @generated
   * @ordered
   */
  protected Concept rightVariable;

  /**
   * The default value of the '{@link #getRight() <em>Right</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected static final int RIGHT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected int right = RIGHT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WhereImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RuleDetectionDslPackage.Literals.WHERE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept getLeft()
  {
    if (left != null && left.eIsProxy())
    {
      InternalEObject oldLeft = (InternalEObject)left;
      left = (Concept)eResolveProxy(oldLeft);
      if (left != oldLeft)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RuleDetectionDslPackage.WHERE__LEFT, oldLeft, left));
      }
    }
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept basicGetLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft(Concept newLeft)
  {
    Concept oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDetectionDslPackage.WHERE__LEFT, oldLeft, left));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLogicalOperator()
  {
    return logicalOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLogicalOperator(String newLogicalOperator)
  {
    String oldLogicalOperator = logicalOperator;
    logicalOperator = newLogicalOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDetectionDslPackage.WHERE__LOGICAL_OPERATOR, oldLogicalOperator, logicalOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept getRightVariable()
  {
    if (rightVariable != null && rightVariable.eIsProxy())
    {
      InternalEObject oldRightVariable = (InternalEObject)rightVariable;
      rightVariable = (Concept)eResolveProxy(oldRightVariable);
      if (rightVariable != oldRightVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RuleDetectionDslPackage.WHERE__RIGHT_VARIABLE, oldRightVariable, rightVariable));
      }
    }
    return rightVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept basicGetRightVariable()
  {
    return rightVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRightVariable(Concept newRightVariable)
  {
    Concept oldRightVariable = rightVariable;
    rightVariable = newRightVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDetectionDslPackage.WHERE__RIGHT_VARIABLE, oldRightVariable, rightVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight(int newRight)
  {
    int oldRight = right;
    right = newRight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDetectionDslPackage.WHERE__RIGHT, oldRight, right));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RuleDetectionDslPackage.WHERE__LEFT:
        if (resolve) return getLeft();
        return basicGetLeft();
      case RuleDetectionDslPackage.WHERE__LOGICAL_OPERATOR:
        return getLogicalOperator();
      case RuleDetectionDslPackage.WHERE__RIGHT_VARIABLE:
        if (resolve) return getRightVariable();
        return basicGetRightVariable();
      case RuleDetectionDslPackage.WHERE__RIGHT:
        return getRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RuleDetectionDslPackage.WHERE__LEFT:
        setLeft((Concept)newValue);
        return;
      case RuleDetectionDslPackage.WHERE__LOGICAL_OPERATOR:
        setLogicalOperator((String)newValue);
        return;
      case RuleDetectionDslPackage.WHERE__RIGHT_VARIABLE:
        setRightVariable((Concept)newValue);
        return;
      case RuleDetectionDslPackage.WHERE__RIGHT:
        setRight((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RuleDetectionDslPackage.WHERE__LEFT:
        setLeft((Concept)null);
        return;
      case RuleDetectionDslPackage.WHERE__LOGICAL_OPERATOR:
        setLogicalOperator(LOGICAL_OPERATOR_EDEFAULT);
        return;
      case RuleDetectionDslPackage.WHERE__RIGHT_VARIABLE:
        setRightVariable((Concept)null);
        return;
      case RuleDetectionDslPackage.WHERE__RIGHT:
        setRight(RIGHT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RuleDetectionDslPackage.WHERE__LEFT:
        return left != null;
      case RuleDetectionDslPackage.WHERE__LOGICAL_OPERATOR:
        return LOGICAL_OPERATOR_EDEFAULT == null ? logicalOperator != null : !LOGICAL_OPERATOR_EDEFAULT.equals(logicalOperator);
      case RuleDetectionDslPackage.WHERE__RIGHT_VARIABLE:
        return rightVariable != null;
      case RuleDetectionDslPackage.WHERE__RIGHT:
        return right != RIGHT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (logicalOperator: ");
    result.append(logicalOperator);
    result.append(", right: ");
    result.append(right);
    result.append(')');
    return result.toString();
  }

} //WhereImpl
