/**
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.ruledetection.ruleDetectionDsl.impl;

import eagledata.core.dsl.ruledetection.ruleDetectionDsl.ComplexOperand;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.Expression;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.PlainOperand;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.RuleDetectionDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eagledata.core.dsl.ruledetection.ruleDetectionDsl.impl.ExpressionImpl#getPlainOperand <em>Plain Operand</em>}</li>
 *   <li>{@link eagledata.core.dsl.ruledetection.ruleDetectionDsl.impl.ExpressionImpl#getComplexOperands <em>Complex Operands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The cached value of the '{@link #getPlainOperand() <em>Plain Operand</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlainOperand()
   * @generated
   * @ordered
   */
  protected PlainOperand plainOperand;

  /**
   * The cached value of the '{@link #getComplexOperands() <em>Complex Operands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComplexOperands()
   * @generated
   * @ordered
   */
  protected EList<ComplexOperand> complexOperands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RuleDetectionDslPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlainOperand getPlainOperand()
  {
    return plainOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPlainOperand(PlainOperand newPlainOperand, NotificationChain msgs)
  {
    PlainOperand oldPlainOperand = plainOperand;
    plainOperand = newPlainOperand;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RuleDetectionDslPackage.EXPRESSION__PLAIN_OPERAND, oldPlainOperand, newPlainOperand);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPlainOperand(PlainOperand newPlainOperand)
  {
    if (newPlainOperand != plainOperand)
    {
      NotificationChain msgs = null;
      if (plainOperand != null)
        msgs = ((InternalEObject)plainOperand).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RuleDetectionDslPackage.EXPRESSION__PLAIN_OPERAND, null, msgs);
      if (newPlainOperand != null)
        msgs = ((InternalEObject)newPlainOperand).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RuleDetectionDslPackage.EXPRESSION__PLAIN_OPERAND, null, msgs);
      msgs = basicSetPlainOperand(newPlainOperand, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RuleDetectionDslPackage.EXPRESSION__PLAIN_OPERAND, newPlainOperand, newPlainOperand));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ComplexOperand> getComplexOperands()
  {
    if (complexOperands == null)
    {
      complexOperands = new EObjectContainmentEList<ComplexOperand>(ComplexOperand.class, this, RuleDetectionDslPackage.EXPRESSION__COMPLEX_OPERANDS);
    }
    return complexOperands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RuleDetectionDslPackage.EXPRESSION__PLAIN_OPERAND:
        return basicSetPlainOperand(null, msgs);
      case RuleDetectionDslPackage.EXPRESSION__COMPLEX_OPERANDS:
        return ((InternalEList<?>)getComplexOperands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RuleDetectionDslPackage.EXPRESSION__PLAIN_OPERAND:
        return getPlainOperand();
      case RuleDetectionDslPackage.EXPRESSION__COMPLEX_OPERANDS:
        return getComplexOperands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RuleDetectionDslPackage.EXPRESSION__PLAIN_OPERAND:
        setPlainOperand((PlainOperand)newValue);
        return;
      case RuleDetectionDslPackage.EXPRESSION__COMPLEX_OPERANDS:
        getComplexOperands().clear();
        getComplexOperands().addAll((Collection<? extends ComplexOperand>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RuleDetectionDslPackage.EXPRESSION__PLAIN_OPERAND:
        setPlainOperand((PlainOperand)null);
        return;
      case RuleDetectionDslPackage.EXPRESSION__COMPLEX_OPERANDS:
        getComplexOperands().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RuleDetectionDslPackage.EXPRESSION__PLAIN_OPERAND:
        return plainOperand != null;
      case RuleDetectionDslPackage.EXPRESSION__COMPLEX_OPERANDS:
        return complexOperands != null && !complexOperands.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExpressionImpl
