/*
 * generated by Xtext 2.9.2
 */
package eagledata.core.dsl.ruledetection.serializer;

import com.google.inject.Inject;
import eagledata.core.dsl.pattern.streamingDsl.Import;
import eagledata.core.dsl.pattern.streamingDsl.StreamingDslPackage;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.AddingSelect;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.ComplexOperand;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.ConcreteRecipient;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.Expression;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.Message;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.Numeral;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.Query;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.QueryOperand;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.Rule;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.RuleDetectionDslPackage;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.RuleModel;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.SetSelect;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.When;
import eagledata.core.dsl.ruledetection.ruleDetectionDsl.Where;
import eagledata.core.dsl.ruledetection.services.RuleDetectionDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RuleDetectionDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RuleDetectionDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RuleDetectionDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RuleDetectionDslPackage.ADDING_SELECT:
				sequence_AddingSelect(context, (AddingSelect) semanticObject); 
				return; 
			case RuleDetectionDslPackage.COMPLEX_OPERAND:
				sequence_ComplexOperand(context, (ComplexOperand) semanticObject); 
				return; 
			case RuleDetectionDslPackage.CONCRETE_RECIPIENT:
				sequence_ConcreteRecipient(context, (ConcreteRecipient) semanticObject); 
				return; 
			case RuleDetectionDslPackage.EXPRESSION:
				if (rule == grammarAccess.getComplexExpressionRule()) {
					sequence_ComplexExpression(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()) {
					sequence_ComplexExpression_PlainExpression(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPlainExpressionRule()) {
					sequence_PlainExpression(context, (Expression) semanticObject); 
					return; 
				}
				else break;
			case RuleDetectionDslPackage.MESSAGE:
				sequence_Message(context, (Message) semanticObject); 
				return; 
			case RuleDetectionDslPackage.NUMERAL:
				sequence_Numeral(context, (Numeral) semanticObject); 
				return; 
			case RuleDetectionDslPackage.QUERY:
				sequence_Query(context, (Query) semanticObject); 
				return; 
			case RuleDetectionDslPackage.QUERY_OPERAND:
				sequence_QueryOperand(context, (QueryOperand) semanticObject); 
				return; 
			case RuleDetectionDslPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case RuleDetectionDslPackage.RULE_MODEL:
				sequence_RuleModel(context, (RuleModel) semanticObject); 
				return; 
			case RuleDetectionDslPackage.SET_SELECT:
				sequence_SetSelect(context, (SetSelect) semanticObject); 
				return; 
			case RuleDetectionDslPackage.WHEN:
				sequence_When(context, (When) semanticObject); 
				return; 
			case RuleDetectionDslPackage.WHERE:
				sequence_Where(context, (Where) semanticObject); 
				return; 
			}
		else if (epackage == StreamingDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StreamingDslPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AddingSelect returns AddingSelect
	 *     Select returns AddingSelect
	 *
	 * Constraint:
	 *     (operation=SELECTOPERATOR (element=[Concept|ID] | all?='*')?)
	 */
	protected void sequence_AddingSelect(ISerializationContext context, AddingSelect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComplexExpression returns Expression
	 *
	 * Constraint:
	 *     (plainOperand=PlainOperand (complexOperands+=ComplexOperand complexOperands+=ComplexOperand*)?)
	 */
	protected void sequence_ComplexExpression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (plainOperand=PlainOperand | (plainOperand=PlainOperand (complexOperands+=ComplexOperand complexOperands+=ComplexOperand*)?))
	 */
	protected void sequence_ComplexExpression_PlainExpression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operand returns ComplexOperand
	 *     ComplexOperand returns ComplexOperand
	 *
	 * Constraint:
	 *     (operator=OPERATOR expression=Expression)
	 */
	protected void sequence_ComplexOperand(ISerializationContext context, ComplexOperand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.COMPLEX_OPERAND__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.COMPLEX_OPERAND__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.COMPLEX_OPERAND__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.COMPLEX_OPERAND__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComplexOperandAccess().getOperatorOPERATORTerminalRuleCall_0_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getComplexOperandAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Recipient returns ConcreteRecipient
	 *     ConcreteRecipient returns ConcreteRecipient
	 *
	 * Constraint:
	 *     user=STRING
	 */
	protected void sequence_ConcreteRecipient(ISerializationContext context, ConcreteRecipient semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.CONCRETE_RECIPIENT__USER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.CONCRETE_RECIPIENT__USER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcreteRecipientAccess().getUserSTRINGTerminalRuleCall_1_0(), semanticObject.getUser());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StreamingDslPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StreamingDslPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RuleElement returns Message
	 *     Action returns Message
	 *     Message returns Message
	 *
	 * Constraint:
	 *     (name=ID message=STRING recipient=Recipient)
	 */
	protected void sequence_Message(ISerializationContext context, Message semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.MESSAGE__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.MESSAGE__MESSAGE));
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.MESSAGE__RECIPIENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.MESSAGE__RECIPIENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMessageAccess().getMessageSTRINGTerminalRuleCall_3_0(), semanticObject.getMessage());
		feeder.accept(grammarAccess.getMessageAccess().getRecipientRecipientParserRuleCall_5_0(), semanticObject.getRecipient());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operand returns Numeral
	 *     PlainOperand returns Numeral
	 *     Numeral returns Numeral
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_Numeral(ISerializationContext context, Numeral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.NUMERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.NUMERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumeralAccess().getValueDOUBLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PlainExpression returns Expression
	 *
	 * Constraint:
	 *     plainOperand=PlainOperand
	 */
	protected void sequence_PlainExpression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.EXPRESSION__PLAIN_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.EXPRESSION__PLAIN_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlainExpressionAccess().getPlainOperandPlainOperandParserRuleCall_0(), semanticObject.getPlainOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operand returns QueryOperand
	 *     PlainOperand returns QueryOperand
	 *     QueryOperand returns QueryOperand
	 *
	 * Constraint:
	 *     query=[Query|ID]
	 */
	protected void sequence_QueryOperand(ISerializationContext context, QueryOperand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.QUERY_OPERAND__QUERY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.QUERY_OPERAND__QUERY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryOperandAccess().getQueryQueryIDTerminalRuleCall_0_1(), semanticObject.getQuery());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RuleElement returns Query
	 *     Action returns Query
	 *     Query returns Query
	 *
	 * Constraint:
	 *     (name=ID select=Select where=Where?)
	 */
	protected void sequence_Query(ISerializationContext context, Query semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RuleModel returns RuleModel
	 *
	 * Constraint:
	 *     ((imports+=Import imports+=Import* (elements+=Rule elements+=RuleElement*)) | (elements+=Rule elements+=RuleElement*))?
	 */
	protected void sequence_RuleModel(ISerializationContext context, RuleModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (name=ID event=[Phrase|ID] actions+=Action actions+=Action*)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Select returns SetSelect
	 *     SetSelect returns SetSelect
	 *
	 * Constraint:
	 *     (selection+=[Node|ID] selection+=[Node|ID]* (operator=SETOPERATOR select=SetSelect)?)
	 */
	protected void sequence_SetSelect(ISerializationContext context, SetSelect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     When returns When
	 *
	 * Constraint:
	 *     (left=Expression logicalOperator=LOGICALOPERATOR right=Expression)
	 */
	protected void sequence_When(ISerializationContext context, When semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.WHEN__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.WHEN__LEFT));
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.WHEN__LOGICAL_OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.WHEN__LOGICAL_OPERATOR));
			if (transientValues.isValueTransient(semanticObject, RuleDetectionDslPackage.Literals.WHEN__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuleDetectionDslPackage.Literals.WHEN__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhenAccess().getLeftExpressionParserRuleCall_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getWhenAccess().getLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0(), semanticObject.getLogicalOperator());
		feeder.accept(grammarAccess.getWhenAccess().getRightExpressionParserRuleCall_3_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Where returns Where
	 *
	 * Constraint:
	 *     (left=[Concept|ID] logicalOperator=LOGICALOPERATOR (rightVariable=[Concept|ID] | right=INT))
	 */
	protected void sequence_Where(ISerializationContext context, Where semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
