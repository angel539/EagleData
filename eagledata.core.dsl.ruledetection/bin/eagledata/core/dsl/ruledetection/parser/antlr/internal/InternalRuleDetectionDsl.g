/*
 * generated by Xtext 2.9.2
 */
grammar InternalRuleDetectionDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package eagledata.core.dsl.ruledetection.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eagledata.core.dsl.ruledetection.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eagledata.core.dsl.ruledetection.services.RuleDetectionDslGrammarAccess;

}

@parser::members {

 	private RuleDetectionDslGrammarAccess grammarAccess;

    public InternalRuleDetectionDslParser(TokenStream input, RuleDetectionDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RuleModel";
   	}

   	@Override
   	protected RuleDetectionDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRuleModel
entryRuleRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleModelRule()); }
	iv_ruleRuleModel=ruleRuleModel
	{ $current=$iv_ruleRuleModel.current; }
	EOF;

// Rule RuleModel
ruleRuleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleModelAccess().getImportsImportParserRuleCall_0_0_0());
					}
					lv_imports_0_0=ruleImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleModelRule());
						}
						add(
							$current,
							"imports",
							lv_imports_0_0,
							"eagledata.core.dsl.ruledetection.RuleDetectionDsl.Import");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleModelAccess().getImportsImportParserRuleCall_0_1_0());
					}
					lv_imports_1_0=ruleImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleModelRule());
						}
						add(
							$current,
							"imports",
							lv_imports_1_0,
							"eagledata.core.dsl.ruledetection.RuleDetectionDsl.Import");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleModelAccess().getElementsRuleParserRuleCall_1_0_0());
					}
					lv_elements_2_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleModelRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"eagledata.core.dsl.ruledetection.RuleDetectionDsl.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleModelAccess().getElementsRuleElementParserRuleCall_1_1_0());
					}
					lv_elements_3_0=ruleRuleElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleModelRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_0,
							"eagledata.core.dsl.ruledetection.RuleDetectionDsl.RuleElement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"eagledata.core.dsl.ruledetection.RuleDetectionDsl.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleRuleElement
entryRuleRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleElementRule()); }
	iv_ruleRuleElement=ruleRuleElement
	{ $current=$iv_ruleRuleElement.current; }
	EOF;

// Rule RuleElement
ruleRuleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getRuleElementAccess().getActionParserRuleCall());
	}
	this_Action_0=ruleAction
	{
		$current = $this_Action_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='on'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getOnKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getEventPhraseCrossReference_3_0());
				}
			)
		)
		otherlv_4='do'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getDoKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getActionsActionParserRuleCall_5_0_0());
					}
					lv_actions_5_0=ruleAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						add(
							$current,
							"actions",
							lv_actions_5_0,
							"eagledata.core.dsl.ruledetection.RuleDetectionDsl.Action");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getActionsActionParserRuleCall_5_1_0());
					}
					lv_actions_6_0=ruleAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						add(
							$current,
							"actions",
							lv_actions_6_0,
							"eagledata.core.dsl.ruledetection.RuleDetectionDsl.Action");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionAccess().getQueryParserRuleCall_0());
		}
		this_Query_0=ruleQuery
		{
			$current = $this_Query_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getMessageParserRuleCall_1());
		}
		this_Message_1=ruleMessage
		{
			$current = $this_Message_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getQueryAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQueryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getQueryAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getSelectSelectParserRuleCall_2_0());
				}
				lv_select_2_0=ruleSelect
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"select",
						lv_select_2_0,
						"eagledata.core.dsl.ruledetection.RuleDetectionDsl.Select");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getWhereWhereParserRuleCall_3_0());
				}
				lv_where_3_0=ruleWhere
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"where",
						lv_where_3_0,
						"eagledata.core.dsl.ruledetection.RuleDetectionDsl.Where");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAddingSelect
entryRuleAddingSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddingSelectRule()); }
	iv_ruleAddingSelect=ruleAddingSelect
	{ $current=$iv_ruleAddingSelect.current; }
	EOF;

// Rule AddingSelect
ruleAddingSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_operation_0_0=RULE_SELECTOPERATOR
				{
					newLeafNode(lv_operation_0_0, grammarAccess.getAddingSelectAccess().getOperationSELECTOPERATORTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddingSelectRule());
					}
					setWithLastConsumed(
						$current,
						"operation",
						lv_operation_0_0,
						"eagledata.core.dsl.ruledetection.RuleDetectionDsl.SELECTOPERATOR");
				}
			)
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddingSelectRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getAddingSelectAccess().getElementConceptCrossReference_1_0_0());
					}
				)
			)?
			    |
			(
				(
					lv_all_2_0='*'
					{
						newLeafNode(lv_all_2_0, grammarAccess.getAddingSelectAccess().getAllAsteriskKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddingSelectRule());
						}
						setWithLastConsumed($current, "all", true, "*");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	iv_ruleSelect=ruleSelect
	{ $current=$iv_ruleSelect.current; }
	EOF;

// Rule Select
ruleSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSelectAccess().getAddingSelectParserRuleCall_0());
		}
		this_AddingSelect_0=ruleAddingSelect
		{
			$current = $this_AddingSelect_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectAccess().getSetSelectParserRuleCall_1());
		}
		this_SetSelect_1=ruleSetSelect
		{
			$current = $this_SetSelect_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSetSelect
entryRuleSetSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetSelectRule()); }
	iv_ruleSetSelect=ruleSetSelect
	{ $current=$iv_ruleSetSelect.current; }
	EOF;

// Rule SetSelect
ruleSetSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetSelectAccess().getSetSelectAction_0(),
					$current);
			}
		)
		otherlv_1='select'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetSelectAccess().getSelectKeyword_1());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetSelectRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getSetSelectAccess().getSelectionNodeCrossReference_2_0_0());
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSetSelectAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSetSelectRule());
							}
						}
						otherlv_4=RULE_ID
						{
							newLeafNode(otherlv_4, grammarAccess.getSetSelectAccess().getSelectionNodeCrossReference_2_1_1_0());
						}
					)
				)
			)*
		)
		(
			(
				(
					lv_operator_5_0=RULE_SETOPERATOR
					{
						newLeafNode(lv_operator_5_0, grammarAccess.getSetSelectAccess().getOperatorSETOPERATORTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetSelectRule());
						}
						setWithLastConsumed(
							$current,
							"operator",
							lv_operator_5_0,
							"eagledata.core.dsl.ruledetection.RuleDetectionDsl.SETOPERATOR");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSetSelectAccess().getSelectSetSelectParserRuleCall_3_1_0());
					}
					lv_select_6_0=ruleSetSelect
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetSelectRule());
						}
						set(
							$current,
							"select",
							lv_select_6_0,
							"eagledata.core.dsl.ruledetection.RuleDetectionDsl.SetSelect");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleWhere
entryRuleWhere returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhereRule()); }
	iv_ruleWhere=ruleWhere
	{ $current=$iv_ruleWhere.current; }
	EOF;

// Rule Where
ruleWhere returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='where'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhereAccess().getWhereKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWhereRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getWhereAccess().getLeftConceptCrossReference_1_0());
				}
			)
		)
		(
			(
				lv_logicalOperator_2_0=RULE_LOGICALOPERATOR
				{
					newLeafNode(lv_logicalOperator_2_0, grammarAccess.getWhereAccess().getLogicalOperatorLOGICALOPERATORTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWhereRule());
					}
					setWithLastConsumed(
						$current,
						"logicalOperator",
						lv_logicalOperator_2_0,
						"eagledata.core.dsl.ruledetection.RuleDetectionDsl.LOGICALOPERATOR");
				}
			)
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWhereRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getWhereAccess().getRightVariableConceptCrossReference_3_0_0());
					}
				)
			)
			    |
			(
				(
					lv_right_4_0=RULE_INT
					{
						newLeafNode(lv_right_4_0, grammarAccess.getWhereAccess().getRightINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWhereRule());
						}
						setWithLastConsumed(
							$current,
							"right",
							lv_right_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleRecipient
entryRuleRecipient returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecipientRule()); }
	iv_ruleRecipient=ruleRecipient
	{ $current=$iv_ruleRecipient.current; }
	EOF;

// Rule Recipient
ruleRecipient returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getRecipientAccess().getConcreteRecipientParserRuleCall());
	}
	this_ConcreteRecipient_0=ruleConcreteRecipient
	{
		$current = $this_ConcreteRecipient_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleConcreteRecipient
entryRuleConcreteRecipient returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcreteRecipientRule()); }
	iv_ruleConcreteRecipient=ruleConcreteRecipient
	{ $current=$iv_ruleConcreteRecipient.current; }
	EOF;

// Rule ConcreteRecipient
ruleConcreteRecipient returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getConcreteRecipientAccess().getCommercialAtKeyword_0());
		}
		(
			(
				lv_user_1_0=RULE_STRING
				{
					newLeafNode(lv_user_1_0, grammarAccess.getConcreteRecipientAccess().getUserSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConcreteRecipientRule());
					}
					setWithLastConsumed(
						$current,
						"user",
						lv_user_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPlainExpressionParserRuleCall_0());
		}
		this_PlainExpression_0=rulePlainExpression
		{
			$current = $this_PlainExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getComplexExpressionParserRuleCall_1());
		}
		this_ComplexExpression_1=ruleComplexExpression
		{
			$current = $this_ComplexExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePlainExpression
entryRulePlainExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlainExpressionRule()); }
	iv_rulePlainExpression=rulePlainExpression
	{ $current=$iv_rulePlainExpression.current; }
	EOF;

// Rule PlainExpression
rulePlainExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPlainExpressionAccess().getPlainOperandPlainOperandParserRuleCall_0());
			}
			lv_plainOperand_0_0=rulePlainOperand
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPlainExpressionRule());
				}
				set(
					$current,
					"plainOperand",
					lv_plainOperand_0_0,
					"eagledata.core.dsl.ruledetection.RuleDetectionDsl.PlainOperand");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleComplexExpression
entryRuleComplexExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexExpressionRule()); }
	iv_ruleComplexExpression=ruleComplexExpression
	{ $current=$iv_ruleComplexExpression.current; }
	EOF;

// Rule ComplexExpression
ruleComplexExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getComplexExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexExpressionAccess().getPlainOperandPlainOperandParserRuleCall_1_0());
				}
				lv_plainOperand_1_0=rulePlainOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexExpressionRule());
					}
					set(
						$current,
						"plainOperand",
						lv_plainOperand_1_0,
						"eagledata.core.dsl.ruledetection.RuleDetectionDsl.PlainOperand");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getComplexExpressionAccess().getComplexOperandsComplexOperandParserRuleCall_2_0_0());
					}
					lv_complexOperands_2_0=ruleComplexOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComplexExpressionRule());
						}
						add(
							$current,
							"complexOperands",
							lv_complexOperands_2_0,
							"eagledata.core.dsl.ruledetection.RuleDetectionDsl.ComplexOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComplexExpressionAccess().getComplexOperandsComplexOperandParserRuleCall_2_1_0());
					}
					lv_complexOperands_3_0=ruleComplexOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComplexExpressionRule());
						}
						add(
							$current,
							"complexOperands",
							lv_complexOperands_3_0,
							"eagledata.core.dsl.ruledetection.RuleDetectionDsl.ComplexOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getComplexExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePlainOperand
entryRulePlainOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlainOperandRule()); }
	iv_rulePlainOperand=rulePlainOperand
	{ $current=$iv_rulePlainOperand.current; }
	EOF;

// Rule PlainOperand
rulePlainOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlainOperandAccess().getNumeralParserRuleCall_0());
		}
		this_Numeral_0=ruleNumeral
		{
			$current = $this_Numeral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPlainOperandAccess().getQueryOperandParserRuleCall_1());
		}
		this_QueryOperand_1=ruleQueryOperand
		{
			$current = $this_QueryOperand_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumeral
entryRuleNumeral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumeralRule()); }
	iv_ruleNumeral=ruleNumeral
	{ $current=$iv_ruleNumeral.current; }
	EOF;

// Rule Numeral
ruleNumeral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_DOUBLE
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumeralAccess().getValueDOUBLETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumeralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"eagledata.core.dsl.ruledetection.RuleDetectionDsl.DOUBLE");
			}
		)
	)
;

// Entry rule entryRuleQueryOperand
entryRuleQueryOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryOperandRule()); }
	iv_ruleQueryOperand=ruleQueryOperand
	{ $current=$iv_ruleQueryOperand.current; }
	EOF;

// Rule QueryOperand
ruleQueryOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getQueryOperandRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getQueryOperandAccess().getQueryQueryCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleComplexOperand
entryRuleComplexOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexOperandRule()); }
	iv_ruleComplexOperand=ruleComplexOperand
	{ $current=$iv_ruleComplexOperand.current; }
	EOF;

// Rule ComplexOperand
ruleComplexOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_operator_0_0=RULE_OPERATOR
				{
					newLeafNode(lv_operator_0_0, grammarAccess.getComplexOperandAccess().getOperatorOPERATORTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexOperandRule());
					}
					setWithLastConsumed(
						$current,
						"operator",
						lv_operator_0_0,
						"eagledata.core.dsl.ruledetection.RuleDetectionDsl.OPERATOR");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexOperandAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexOperandRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"eagledata.core.dsl.ruledetection.RuleDetectionDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	iv_ruleMessage=ruleMessage
	{ $current=$iv_ruleMessage.current; }
	EOF;

// Rule Message
ruleMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMessageAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMessageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getMessageAccess().getColonKeyword_1());
		}
		otherlv_2='compose'
		{
			newLeafNode(otherlv_2, grammarAccess.getMessageAccess().getComposeKeyword_2());
		}
		(
			(
				lv_message_3_0=RULE_STRING
				{
					newLeafNode(lv_message_3_0, grammarAccess.getMessageAccess().getMessageSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMessageRule());
					}
					setWithLastConsumed(
						$current,
						"message",
						lv_message_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='to'
		{
			newLeafNode(otherlv_4, grammarAccess.getMessageAccess().getToKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMessageAccess().getRecipientRecipientParserRuleCall_5_0());
				}
				lv_recipient_5_0=ruleRecipient
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMessageRule());
					}
					set(
						$current,
						"recipient",
						lv_recipient_5_0,
						"eagledata.core.dsl.ruledetection.RuleDetectionDsl.Recipient");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_OPERATOR : ('+'|'-'|'*'|'DIV');

RULE_LOGICALOPERATOR : ('>'|'<'|'>='|'<='|'=');

RULE_SELECTOPERATOR : ('COUNT'|'MIN'|'MAX');

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_SETOPERATOR : ('UNION'|'EXCEPT'|'INTERSECT');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
